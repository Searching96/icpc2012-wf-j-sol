; ================================================================================
; HUMAN READABLE ASSEMBLY VERSION
; ICPC 2012 WF Problem J - Spherical Flight Path
; ================================================================================
;
; ALGORITHM: Calculate shortest flight path on sphere using great circles
; INPUT: Sequence of waypoints (latitude, longitude)
; OUTPUT: Total distance in kilometers
;
; KEY COMPONENTS:
; 1. Point structure with x, y, z coordinates (24 bytes)
; 2. Vector operations (add, subtract, multiply, normalize)
; 3. Spherical coordinate conversion
; 4. Great circle distance calculation
; 5. Main loop to process waypoints
;
; REGISTER USAGE:
; xmm0-xmm3: Floating point calculations
; rcx, rdx, r8, r9: Function arguments
; rax: Return values
; rsp: Stack pointer
;
; MEMORY LAYOUT:
; Point structure: [x:8][y:8][z:8] = 24 bytes
; Double precision: 8 bytes per coordinate
;

    .text
.globl	@feat.00
    .intel_syntax noprefix
; ----------------------------------------
; FUNCTION: add_two_points
; ----------------------------------------
; Adds two 3D points: result = point1 + point2
.globl add_two_points
    .p2align	4, 0x90
add_two_points:
; Begin add_two_points
    .seh_proc "add_two_points"
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], r8                        ; Move 64-bit value
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    addsd	xmm0, qword ptr [rdx]                        ; Add two doubles
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    addsd	xmm0, qword ptr [rdx + 8]                    ; Add two doubles
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    addsd	xmm0, qword ptr [rdx + 16]                   ; Add two doubles
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
; End add_two_points

; ----------------------------------------
; FUNCTION: subtract_two_points
; ----------------------------------------
; Subtracts two 3D points: result = point1 - point2
.globl subtract_two_points
    .p2align	4, 0x90
subtract_two_points:
; Begin subtract_two_points
    .seh_proc "subtract_two_points"
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], r8                        ; Move 64-bit value
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    subsd	xmm0, qword ptr [rdx]                        ; Subtract two doubles
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    subsd	xmm0, qword ptr [rdx + 8]                    ; Subtract two doubles
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    subsd	xmm0, qword ptr [rdx + 16]                   ; Subtract two doubles
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
; End subtract_two_points

.globl	"??D@YA?AUPoint@@AEBU0@O@Z"     # -- Begin function ??D@YA?AUPoint@@AEBU0@O@Z
    .p2align	4, 0x90
    "??D@YA?AUPoint@@AEBU0@O@Z":            # @"??D@YA?AUPoint@@AEBU0@O@Z"
    .seh_proc "??D@YA?AUPoint@@AEBU0@O@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    movsd	qword ptr [rsp + 8], xmm2                    ; Load 64-bit double
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp + 8]                    ; Multiply two doubles
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp + 8]                    ; Multiply two doubles
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp + 8]                    ; Multiply two doubles
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
.globl	"??D@YA?AUPoint@@OAEBU0@@Z"     # -- Begin function ??D@YA?AUPoint@@OAEBU0@@Z
    .p2align	4, 0x90
    "??D@YA?AUPoint@@OAEBU0@@Z":            # @"??D@YA?AUPoint@@OAEBU0@@Z"
    .seh_proc "??D@YA?AUPoint@@OAEBU0@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], r8                        ; Move 64-bit value
    movsd	qword ptr [rsp], xmm1                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp]                        ; Multiply two doubles
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp]                        ; Multiply two doubles
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp]                        ; Multiply two doubles
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
.globl	"??K@YA?AUPoint@@AEBU0@O@Z"     # -- Begin function ??K@YA?AUPoint@@AEBU0@O@Z
    .p2align	4, 0x90
    "??K@YA?AUPoint@@AEBU0@O@Z":            # @"??K@YA?AUPoint@@AEBU0@O@Z"
    .seh_proc "??K@YA?AUPoint@@AEBU0@O@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    movsd	qword ptr [rsp + 8], xmm2                    ; Load 64-bit double
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero ; Load 64-bit double
    divsd	xmm0, qword ptr [rsp + 8]                    ; Divide two doubles
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    divsd	xmm0, qword ptr [rsp + 8]                    ; Divide two doubles
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    divsd	xmm0, qword ptr [rsp + 8]                    ; Divide two doubles
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
.globl	__real@40b8e20000000000         # -- Begin function ?lat_lon_to_xyz@@YA?AUPoint@@OO@Z
    .section	.rdata,"dr",discard,__real@40b8e20000000000
    .p2align	3, 0x0
    __real@40b8e20000000000:
    .quad	0x40b8e20000000000              # double 6370
.globl	__real@4066800000000000
    .section	.rdata,"dr",discard,__real@4066800000000000
    .p2align	3, 0x0
    __real@4066800000000000:
    .quad	0x4066800000000000              # double 180
.globl	__real@400921fb54442d18
    .section	.rdata,"dr",discard,__real@400921fb54442d18
    .p2align	3, 0x0
    __real@400921fb54442d18:
    .quad	0x400921fb54442d18              # double 3.1415926535897931
    .text
.globl	"?lat_lon_to_xyz@@YA?AUPoint@@OO@Z"
    .p2align	4, 0x90
    "?lat_lon_to_xyz@@YA?AUPoint@@OO@Z":    # @"?lat_lon_to_xyz@@YA?AUPoint@@OO@Z"
    .seh_proc "?lat_lon_to_xyz@@YA?AUPoint@@OO@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 128], rcx                     ; Move 64-bit value
    movsd	qword ptr [rsp + 120], xmm2                  ; Load 64-bit double
    movsd	qword ptr [rsp + 112], xmm1                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@400921fb54442d18] # xmm0 = [3.1415926535897931E+0,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp + 112]                  ; Multiply two doubles
    movsd	xmm1, qword ptr [rip + __real@4066800000000000] # xmm1 = [1.8E+2,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rsp + 104], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@400921fb54442d18] # xmm0 = [3.1415926535897931E+0,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp + 120]                  ; Multiply two doubles
    movsd	xmm1, qword ptr [rip + __real@4066800000000000] # xmm1 = [1.8E+2,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rsp + 96], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 104]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rsp + 40], xmm0      # 8-byte Spill ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 96]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rsp + 40]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rsp + 88], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 104]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rsp + 48], xmm0      # 8-byte Spill ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 96]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rsp + 48]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rsp + 80], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 104]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rsp + 72], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 88]      # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 80]      # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 72]      # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?cos@@YAOO@Z"
.globl	"?cos@@YAOO@Z"                  # -- Begin function ?cos@@YAOO@Z
    .p2align	4, 0x90
    "?cos@@YAOO@Z":                         # @"?cos@@YAOO@Z"
    .seh_proc "?cos@@YAOO@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	cosl                                          ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?sin@@YAOO@Z"
.globl	"?sin@@YAOO@Z"                  # -- Begin function ?sin@@YAOO@Z
    .p2align	4, 0x90
    "?sin@@YAOO@Z":                         # @"?sin@@YAOO@Z"
    .seh_proc "?sin@@YAOO@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	sinl                                          ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .text
.globl	"?dot@@YAOAEBUPoint@@0@Z"       # -- Begin function ?dot@@YAOAEBUPoint@@0@Z
    .p2align	4, 0x90
    "?dot@@YAOAEBUPoint@@0@Z":              # @"?dot@@YAOAEBUPoint@@0@Z"
    .seh_proc "?dot@@YAOAEBUPoint@@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm2, qword ptr [rax]           # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mulsd	xmm0, qword ptr [rax + 8]                    ; Multiply two doubles
    mulsd	xmm1, xmm2                                   ; Multiply two doubles
    addsd	xmm1, xmm0                                   ; Add two doubles
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm2, qword ptr [rax + 16]      # xmm2 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, xmm2                                   ; Multiply two doubles
    addsd	xmm0, xmm1                                   ; Add two doubles
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
.globl	"?cross@@YA?AUPoint@@AEBU1@0@Z" # -- Begin function ?cross@@YA?AUPoint@@AEBU1@0@Z
    .p2align	4, 0x90
    "?cross@@YA?AUPoint@@AEBU1@0@Z":        # @"?cross@@YA?AUPoint@@AEBU1@0@Z"
    .seh_proc "?cross@@YA?AUPoint@@AEBU1@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], r8                        ; Move 64-bit value
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm2, qword ptr [rdx + 16]      # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm1, qword ptr [rdx + 16]      # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mulsd	xmm1, qword ptr [rdx + 8]                    ; Multiply two doubles
    movq	rdx, xmm1
    movabs	r8, -9223372036854775808
    xor	rdx, r8
    movq	xmm1, rdx
    mulsd	xmm0, xmm2                                   ; Multiply two doubles
    addsd	xmm0, xmm1                                   ; Add two doubles
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm2, qword ptr [rdx]           # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm1, qword ptr [rdx]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mulsd	xmm1, qword ptr [rdx + 16]                   ; Multiply two doubles
    movq	rdx, xmm1
    movabs	r8, -9223372036854775808
    xor	rdx, r8
    movq	xmm1, rdx
    mulsd	xmm0, xmm2                                   ; Multiply two doubles
    addsd	xmm0, xmm1                                   ; Add two doubles
    movsd	qword ptr [rcx + 8], xmm0                    ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm0, qword ptr [rdx]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm2, qword ptr [rdx + 8]       # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp]                           ; Move 64-bit value
    movsd	xmm1, qword ptr [rdx + 8]       # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mulsd	xmm1, qword ptr [rdx]                        ; Multiply two doubles
    movq	rdx, xmm1
    movabs	r8, -9223372036854775808
    xor	rdx, r8
    movq	xmm1, rdx
    mulsd	xmm0, xmm2                                   ; Multiply two doubles
    addsd	xmm0, xmm1                                   ; Add two doubles
    movsd	qword ptr [rcx + 16], xmm0                   ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
.globl	"?magnitude@@YAOAEBUPoint@@@Z"  # -- Begin function ?magnitude@@YAOAEBUPoint@@@Z
    .p2align	4, 0x90
    "?magnitude@@YAOAEBUPoint@@@Z":         # @"?magnitude@@YAOAEBUPoint@@@Z"
    .seh_proc "?magnitude@@YAOAEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    call	"?sqrt@@YAOO@Z"                               ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?sqrt@@YAOO@Z"
.globl	"?sqrt@@YAOO@Z"                 # -- Begin function ?sqrt@@YAOO@Z
    .p2align	4, 0x90
    "?sqrt@@YAOO@Z":                        # @"?sqrt@@YAOO@Z"
    .seh_proc "?sqrt@@YAOO@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	sqrtl                                         ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
.globl	__real@3e112e0be826d695         # -- Begin function ?normalize@@YA?AUPoint@@AEBU1@@Z
    .section	.rdata,"dr",discard,__real@3e112e0be826d695
    .p2align	3, 0x0
    __real@3e112e0be826d695:
    .quad	0x3e112e0be826d695              # double 1.0000000000000001E-9
    .text
.globl	"?normalize@@YA?AUPoint@@AEBU1@@Z"
    .p2align	4, 0x90
    "?normalize@@YA?AUPoint@@AEBU1@@Z":     # @"?normalize@@YA?AUPoint@@AEBU1@@Z"
    .seh_proc "?normalize@@YA?AUPoint@@AEBU1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?magnitude@@YAOAEBUPoint@@@Z"                ; Function call
    movsd	qword ptr [rsp + 48], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rsp + 48]
    jbe	.LBB12_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    xor	edx, edx
    mov	r8d, 24
    call	memset                                        ; Function call
    jmp	.LBB12_3                                       ; Jump instruction
    .LBB12_2:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    movsd	xmm2, qword ptr [rsp + 48]      # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??K@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    .LBB12_3:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
.globl	__real@bff0000000000000         # -- Begin function ?dist_xyz@@YAOAEBUPoint@@0@Z
    .section	.rdata,"dr",discard,__real@bff0000000000000
    .p2align	3, 0x0
    __real@bff0000000000000:
    .quad	0xbff0000000000000              # double -1
.globl	__real@3ff0000000000000
    .section	.rdata,"dr",discard,__real@3ff0000000000000
    .p2align	3, 0x0
    __real@3ff0000000000000:
    .quad	0x3ff0000000000000              # double 1
    .text
.globl	"?dist_xyz@@YAOAEBUPoint@@0@Z"
    .p2align	4, 0x90
    "?dist_xyz@@YAOAEBUPoint@@0@Z":         # @"?dist_xyz@@YAOAEBUPoint@@0@Z"
    .seh_proc "?dist_xyz@@YAOAEBUPoint@@0@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 128], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 120], rcx                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 120]                     ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rdx, qword ptr [rsp + 128]                     ; Move 64-bit value
    lea	rcx, [rsp + 72]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    lea	rcx, [rsp + 96]
    lea	rdx, [rsp + 72]
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    movsd	qword ptr [rsp + 64], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rsp + 56], xmm0                   ; Load 64-bit double
    lea	rcx, [rsp + 56]
    lea	rdx, [rsp + 64]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movsd	xmm0, qword ptr [rip + __real@bff0000000000000] # xmm0 = [-1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rsp + 48], xmm0                   ; Load 64-bit double
    lea	rcx, [rsp + 48]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rsp + 64], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 64]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    movsd	qword ptr [rsp + 40], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rsp + 40]                   ; Multiply two doubles
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$max@O@std@@YAAEBOAEBO0@Z"
.globl	"??$max@O@std@@YAAEBOAEBO0@Z"   # -- Begin function ??$max@O@std@@YAAEBOAEBO0@Z
    .p2align	4, 0x90
    "??$max@O@std@@YAAEBOAEBO0@Z":          # @"??$max@O@std@@YAAEBOAEBO0@Z"
    .seh_proc "??$max@O@std@@YAAEBOAEBO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB14_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB14_3                                       ; Jump instruction
    .LBB14_2:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    .LBB14_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$min@O@std@@YAAEBOAEBO0@Z"
.globl	"??$min@O@std@@YAAEBOAEBO0@Z"   # -- Begin function ??$min@O@std@@YAAEBOAEBO0@Z
    .p2align	4, 0x90
    "??$min@O@std@@YAAEBOAEBO0@Z":          # @"??$min@O@std@@YAAEBOAEBO0@Z"
    .seh_proc "??$min@O@std@@YAAEBOAEBO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB15_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB15_3                                       ; Jump instruction
    .LBB15_2:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    .LBB15_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?acos@@YAOO@Z"
.globl	"?acos@@YAOO@Z"                 # -- Begin function ?acos@@YAOO@Z
    .p2align	4, 0x90
    "?acos@@YAOO@Z":                        # @"?acos@@YAOO@Z"
    .seh_proc "?acos@@YAOO@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	acosl                                         ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .text
.globl	"?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z" # -- Begin function ?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z
    .p2align	4, 0x90
    "?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z": # @"?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z"
    .seh_proc "?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z"
# %bb.0:
    sub	rsp, 280
    .seh_stackalloc 280
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 272], rcx                     ; Move 64-bit value
    movsd	qword ptr [rsp + 264], xmm3                  ; Load 64-bit double
    mov	qword ptr [rsp + 256], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 248], rdx                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 248]                     ; Move 64-bit value
    lea	rcx, [rsp + 224]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rdx, qword ptr [rsp + 256]                     ; Move 64-bit value
    lea	rcx, [rsp + 200]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    lea	rcx, [rsp + 224]
    lea	rdx, [rsp + 200]
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    movsd	qword ptr [rsp + 184], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rsp + 176], xmm0                  ; Load 64-bit double
    lea	rcx, [rsp + 176]
    lea	rdx, [rsp + 184]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movsd	xmm0, qword ptr [rip + __real@bff0000000000000] # xmm0 = [-1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rsp + 168], xmm0                  ; Load 64-bit double
    lea	rcx, [rsp + 168]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    movsd	qword ptr [rsp + 192], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rsp + 192]
    jbe	.LBB17_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 248]                     ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    jmp	.LBB17_3                                       ; Jump instruction
    .LBB17_2:
    lea	rcx, [rsp + 224]
    lea	rdx, [rsp + 200]
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rsp + 96]
    lea	rdx, [rsp + 224]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    lea	rcx, [rsp + 120]
    lea	rdx, [rsp + 200]
    lea	r8, [rsp + 96]
    call	"subtract_two_points"                         ; Function call
    lea	rcx, [rsp + 144]
    lea	rdx, [rsp + 120]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    movsd	xmm0, qword ptr [rsp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rsp + 72]
    lea	rdx, [rsp + 144]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    movsd	xmm0, qword ptr [rsp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rsp + 48]
    lea	rdx, [rsp + 224]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rsp + 48]
    lea	r8, [rsp + 72]
    call	"add_two_points"                              ; Function call
    .LBB17_3:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 280
    ret                                                ; Return from function
    .seh_endproc
.globl	"?is_on_arc@@YA_NAEBUPoint@@00@Z" # -- Begin function ?is_on_arc@@YA_NAEBUPoint@@00@Z
    .p2align	4, 0x90
    "?is_on_arc@@YA_NAEBUPoint@@00@Z":      # @"?is_on_arc@@YA_NAEBUPoint@@00@Z"
    .seh_proc "?is_on_arc@@YA_NAEBUPoint@@00@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rsp + 56], xmm0                   ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rsp + 48], xmm0                   ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rsp + 40], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 48]      # xmm0 = mem[0],zero ; Load 64-bit double
    addsd	xmm0, qword ptr [rsp + 40]                   ; Add two doubles
    subsd	xmm0, qword ptr [rsp + 56]                   ; Subtract two doubles
    call	"?abs@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    seta	al
    and	al, 1
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
.globl	__xmm@7fffffffffffffff7fffffffffffffff # -- Begin function ?abs@@YAOO@Z
    .section	.rdata,"dr",discard,__xmm@7fffffffffffffff7fffffffffffffff
    .p2align	4, 0x0
    __xmm@7fffffffffffffff7fffffffffffffff:
    .quad	0x7fffffffffffffff              # double NaN
    .quad	0x7fffffffffffffff              # double NaN
    .section	.text,"xr",discard,"?abs@@YAOO@Z"
.globl	"?abs@@YAOO@Z"
    .p2align	4, 0x90
    "?abs@@YAOO@Z":                         # @"?abs@@YAOO@Z"
    .seh_proc "?abs@@YAOO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    movsd	qword ptr [rsp], xmm0                        ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp]           # xmm0 = mem[0],zero ; Load 64-bit double
    movaps	xmm1, xmmword ptr [rip + __xmm@7fffffffffffffff7fffffffffffffff] # xmm1 = [NaN,NaN]
    pand	xmm0, xmm1
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .text
.globl	"?get_arc_parameter@@YAOAEBUPoint@@00@Z" # -- Begin function ?get_arc_parameter@@YAOAEBUPoint@@00@Z
    .p2align	4, 0x90
    "?get_arc_parameter@@YAOAEBUPoint@@00@Z": # @"?get_arc_parameter@@YAOAEBUPoint@@00@Z"
    .seh_proc "?get_arc_parameter@@YAOAEBUPoint@@00@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rsp + 48], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rsp + 48]
    jbe	.LBB20_2                                       ; Jump instruction
# %bb.1:
    xorps	xmm0, xmm0
    movsd	qword ptr [rsp + 80], xmm0                   ; Load 64-bit double
    jmp	.LBB20_3                                       ; Jump instruction
    .LBB20_2:
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rsp + 40], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 40]      # xmm0 = mem[0],zero ; Load 64-bit double
    divsd	xmm0, qword ptr [rsp + 48]                   ; Divide two doubles
    movsd	qword ptr [rsp + 80], xmm0                   ; Load 64-bit double
    .LBB20_3:
    movsd	xmm0, qword ptr [rsp + 80]      # xmm0 = mem[0],zero ; Load 64-bit double
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
.globl	__real@3ff000000044b830         # -- Begin function ?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z
    .section	.rdata,"dr",discard,__real@3ff000000044b830
    .p2align	3, 0x0
    __real@3ff000000044b830:
    .quad	0x3ff000000044b830              # double 1.0000000010000001
.globl	__real@4000000000000000
    .section	.rdata,"dr",discard,__real@4000000000000000
    .p2align	3, 0x0
    __real@4000000000000000:
    .quad	0x4000000000000000              # double 2
.globl	__real@bff000000044b830
    .section	.rdata,"dr",discard,__real@bff000000044b830
    .p2align	3, 0x0
    __real@bff000000044b830:
    .quad	0xbff000000044b830              # double -1.0000000010000001
.globl	__real@3fe0000000000000
    .section	.rdata,"dr",discard,__real@3fe0000000000000
    .p2align	3, 0x0
    __real@3fe0000000000000:
    .quad	0x3fe0000000000000              # double 0.5
    .text
.globl	"?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z"
    .p2align	4, 0x90
    "?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z": # @"?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z"
    .Lfunc_begin0:
    .seh_proc "?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 592
    .seh_stackalloc 592
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 456], -2                      ; Move 64-bit value
    mov	qword ptr [rbp], rcx            # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rbp - 8], rax        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp + 448], rcx                     ; Move 64-bit value
    movsd	qword ptr [rbp + 440], xmm3                  ; Load 64-bit double
    mov	qword ptr [rbp + 432], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 424], rdx                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 424]                     ; Move 64-bit value
    lea	rcx, [rbp + 400]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rdx, qword ptr [rbp + 432]                     ; Move 64-bit value
    lea	rcx, [rbp + 376]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    movsd	xmm0, qword ptr [rbp + 440]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@40b8e20000000000] # xmm1 = [6.37E+3,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 368], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 400]
    lea	rdx, [rbp + 376]
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    movsd	qword ptr [rbp + 352], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 344], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 344]
    lea	rdx, [rbp + 352]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movsd	xmm0, qword ptr [rip + __real@bff0000000000000] # xmm0 = [-1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 336], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 336]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    movsd	qword ptr [rbp + 360], xmm0                  ; Load 64-bit double
    mov	byte ptr [rbp + 335], 0
    call	"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    movsd	xmm0, qword ptr [rbp + 360]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rbp + 368]     # xmm1 = mem[0],zero ; Load 64-bit double
    addsd	xmm1, xmm1                                   ; Add two doubles
    movsd	xmm2, qword ptr [rip + __real@3e112e0be826d695] # xmm2 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm1, xmm2                                   ; Add two doubles
    ucomisd	xmm0, xmm1
    jbe	.LBB21_2                                       ; Jump instruction
# %bb.1:
    mov	byte ptr [rbp + 335], 1
    mov	dword ptr [rbp + 328], 1                       ; Move 32-bit value
    jmp	.LBB21_12                                      ; Jump instruction
    .LBB21_2:
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp + 360]
    jbe	.LBB21_4                                       ; Jump instruction
# %bb.3:
    mov	byte ptr [rbp + 335], 1
    mov	dword ptr [rbp + 328], 1                       ; Move 32-bit value
    jmp	.LBB21_12                                      ; Jump instruction
    .LBB21_4:
    movsd	xmm0, qword ptr [rbp + 368]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movsd	qword ptr [rbp - 16], xmm0      # 8-byte Spill ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 360]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@4000000000000000] # xmm1 = [2.0E+0,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rbp - 16]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 320], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 320]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@3ff000000044b830] # xmm1 = [1.0000000010000001E+0,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    ja	.LBB21_6                                        ; Jump instruction
# %bb.5:
    movsd	xmm0, qword ptr [rip + __real@bff000000044b830] # xmm0 = [-1.0000000010000001E+0,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp + 320]
    jbe	.LBB21_7                                       ; Jump instruction
    .LBB21_6:
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 312], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 312]
    lea	rdx, [rbp + 320]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movsd	xmm0, qword ptr [rip + __real@bff0000000000000] # xmm0 = [-1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 304], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 304]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 320], xmm0                  ; Load 64-bit double
    .LBB21_7:
    movsd	xmm0, qword ptr [rbp + 320]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    movsd	qword ptr [rbp + 296], xmm0                  ; Load 64-bit double
    movsd	xmm3, qword ptr [rbp + 360]     # xmm3 = mem[0],zero ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3fe0000000000000] # xmm0 = [5.0E-1,0.0E+0] ; Load 64-bit double
    mulsd	xmm3, xmm0                                   ; Multiply two doubles
    lea	rcx, [rbp + 272]
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 400]
    mov	qword ptr [rbp - 96], rdx       # 8-byte Spill ; Move 64-bit value
    lea	r8, [rbp + 376]
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    call	"?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z" ; Function call
    mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 88]        # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 200]
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    call	"subtract_two_points"                         ; Function call
    mov	r8, qword ptr [rbp - 80]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 224]
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?cross@@YA?AUPoint@@AEBU1@0@Z"               ; Function call
    mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 248]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    movsd	xmm0, qword ptr [rbp + 296]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 152]
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    movsd	xmm0, qword ptr [rbp + 296]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    mov	rdx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 128]
    mov	qword ptr [rbp - 64], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 176]
    call	"add_two_points"                              ; Function call
    movsd	xmm0, qword ptr [rbp + 296]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 80]
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    movsd	xmm0, qword ptr [rbp + 296]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    mov	rdx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 56]
    mov	qword ptr [rbp - 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    mov	rdx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 24]        # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 104]
    call	"subtract_two_points"                         ; Function call
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 176]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@40b8e20000000000] # xmm1 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rbp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 184]     # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rbp + 40], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 192]     # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rbp + 48], xmm0                   ; Load 64-bit double
    .Ltmp0:
    lea	rdx, [rbp + 32]
    call	"?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" ; Push to stack
    .Ltmp1:
    jmp	.LBB21_8                                       ; Jump instruction
    .LBB21_8:
    movsd	xmm0, qword ptr [rbp + 296]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@3e112e0be826d695] # xmm1 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB21_11                                      ; Jump instruction
# %bb.9:
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 104]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@40b8e20000000000] # xmm1 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rbp + 8], xmm0                    ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 112]     # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rbp + 16], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 120]     # xmm0 = mem[0],zero ; Load 64-bit double
    mulsd	xmm0, xmm1                                   ; Multiply two doubles
    movsd	qword ptr [rbp + 24], xmm0                   ; Load 64-bit double
    .Ltmp2:
    lea	rdx, [rbp + 8]
    call	"?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" ; Push to stack
    .Ltmp3:
    jmp	.LBB21_10                                      ; Jump instruction
    .LBB21_10:
    jmp	.LBB21_11                                      ; Jump instruction
    .LBB21_11:
    mov	byte ptr [rbp + 335], 1
    mov	dword ptr [rbp + 328], 1                       ; Move 32-bit value
    .LBB21_12:
    test	byte ptr [rbp + 335], 1                       ; Test values
    jne	.LBB21_14                                      ; Jump instruction
# %bb.13:
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    .LBB21_14:
    mov	rax, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    add	rsp, 592
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z")@IMGREL
    .text
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$15@?0??get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z@4HA":
    .seh_proc "?dtor$15@?0??get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z@4HA"
    .LBB21_15:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end0:
    .seh_handlerdata
    .text
    .seh_endproc
    .section	.xdata,"dr"
    .p2align	2, 0x0
    "$cppxdata$?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z")@IMGREL # IPToStateXData
    .long	584                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z":
    .long	-1                              # ToState
    .long	"?dtor$15@?0??get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z@4HA"@IMGREL # Action
    "$ip2state$?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z":
    .long	.Lfunc_begin0@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp0@IMGREL+1                 # IP
    .long	0                               # ToState
    .long	.Ltmp3@IMGREL+1                 # IP
    .long	-1                              # ToState
    .text
    .section	.text,"xr",discard,"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ": # @"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" ; Push to stack
.globl	"?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" # -- Begin function ?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z
    .p2align	4, 0x90
    "?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z": # @"?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" ; Push to stack
    .seh_proc "?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" ; Push to stack
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ": # @"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .text
.globl	"?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z" # -- Begin function ?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z
    .p2align	4, 0x90
    "?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z": # @"?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z"
    .Lfunc_begin1:
    .seh_proc "?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 1200
    .seh_stackalloc 1200
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 1064], -2                     ; Move 64-bit value
    mov	qword ptr [rbp + 24], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rbp + 32], rax       # 8-byte Spill ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 1120]    # xmm0 = mem[0],zero ; Load 64-bit double
    mov	qword ptr [rbp + 1056], rcx                    ; Move 64-bit value
    mov	qword ptr [rbp + 1048], r9                     ; Move 64-bit value
    mov	qword ptr [rbp + 1040], r8                     ; Move 64-bit value
    mov	qword ptr [rbp + 1032], rdx                    ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 1120]    # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@40b8e20000000000] # xmm1 = [6.37E+3,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 1024], xmm0                 ; Load 64-bit double
    mov	rdx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	rcx, [rbp + 1000]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rdx, qword ptr [rbp + 1040]                    ; Move 64-bit value
    lea	rcx, [rbp + 976]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rdx, qword ptr [rbp + 1048]                    ; Move 64-bit value
    lea	rcx, [rbp + 952]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    lea	rcx, [rbp + 1000]
    lea	rdx, [rbp + 976]
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    movsd	qword ptr [rbp + 936], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 928], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 928]
    lea	rdx, [rbp + 936]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movsd	xmm0, qword ptr [rip + __real@bff0000000000000] # xmm0 = [-1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 920], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 920]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    movsd	qword ptr [rbp + 944], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp + 944]
    jbe	.LBB25_4                                       ; Jump instruction
# %bb.1:
    mov	rdx, qword ptr [rbp + 1048]                    ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 1120]                 ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB25_3                                        ; Jump instruction
# %bb.2:
    xorps	xmm0, xmm0
    movsd	qword ptr [rbp + 880], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 872], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 888]
    lea	rdx, [rbp + 880]
    lea	r8, [rbp + 872]
    call	"??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z"   ; Function call
    lea	rax, [rbp + 888]
    mov	qword ptr [rbp + 904], rax                     ; Move 64-bit value
    lea	rax, [rbp + 888]
    add	rax, 16
    mov	qword ptr [rbp + 912], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 871]
    call	"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 904]
    lea	r8, [rbp + 871]
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z" ; Function call
    jmp	.LBB25_44                                      ; Jump instruction
    .LBB25_3:
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB25_44                                      ; Jump instruction
    .LBB25_4:
    lea	rcx, [rbp + 816]
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 1000]
    lea	r8, [rbp + 976]
    call	"?cross@@YA?AUPoint@@AEBU1@0@Z"               ; Function call
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 840]
    mov	qword ptr [rbp + 8], rcx        # 8-byte Spill ; Move 64-bit value
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rdx, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 952]
    mov	qword ptr [rbp], rcx            # 8-byte Spill ; Move 64-bit value
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    mov	rdx, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 760]
    mov	qword ptr [rbp - 16], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    mov	r8, qword ptr [rbp - 16]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 784]
    mov	qword ptr [rbp - 8], rcx        # 8-byte Spill ; Move 64-bit value
    call	"subtract_two_points"                         ; Function call
    mov	rdx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp + 736]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 752]                     ; Move 64-bit value
    mov	qword ptr [rbp + 800], rax                     ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 736]
    movaps	xmmword ptr [rbp + 784], xmm0
    call	"?dot@@YAOAEBUPoint@@0@Z"                     ; Function call
    call	"?abs@@YAOO@Z"                                ; Function call
    movsd	qword ptr [rbp + 720], xmm0                  ; Load 64-bit double
    movabs	rax, 4607182418800017408
    mov	qword ptr [rbp + 712], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 712]
    lea	rdx, [rbp + 720]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movabs	rax, -4616189618054758400
    mov	qword ptr [rbp + 704], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 704]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    movsd	qword ptr [rbp + 728], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 680]
    mov	qword ptr [rbp + 16], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 16]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 672], 0                       ; Move 64-bit value
    .Ltmp4:
    lea	rdx, [rbp + 672]
    call	"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
    .Ltmp5:
    jmp	.LBB25_5                                       ; Jump instruction
    .LBB25_5:
    movabs	rax, 4607182418800017408
    mov	qword ptr [rbp + 664], rax                     ; Move 64-bit value
    .Ltmp6:
    lea	rcx, [rbp + 680]
    lea	rdx, [rbp + 664]
    call	"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
    .Ltmp7:
    jmp	.LBB25_6                                       ; Jump instruction
    .LBB25_6:
    movsd	xmm1, qword ptr [rbp + 728]     # xmm1 = mem[0],zero ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 1024]                 ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB25_24                                       ; Jump instruction
# %bb.7:
    movsd	xmm0, qword ptr [rbp + 728]     # xmm0 = mem[0],zero ; Load 64-bit double
    subsd	xmm0, qword ptr [rbp + 1024]                 ; Subtract two doubles
    call	"?abs@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB25_9                                       ; Jump instruction
# %bb.8:
    xorps	xmm0, xmm0
    movsd	qword ptr [rbp + 656], xmm0                  ; Load 64-bit double
    jmp	.LBB25_23                                      ; Jump instruction
    .LBB25_9:
    movsd	xmm0, qword ptr [rbp + 1024]    # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movsd	qword ptr [rbp - 32], xmm0      # 8-byte Spill ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 728]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rbp - 32]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 648], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rbp + 648]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@bff000000044b830] # xmm1 = [-1.0000000010000001E+0,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jb	.LBB25_19                                       ; Jump instruction
# %bb.10:
    movsd	xmm0, qword ptr [rip + __real@3ff000000044b830] # xmm0 = [1.0000000010000001E+0,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp + 648]
    jb	.LBB25_19                                       ; Jump instruction
# %bb.11:
    movsd	xmm0, qword ptr [rip + __real@3ff0000000000000] # xmm0 = [1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 640], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 640]
    lea	rdx, [rbp + 648]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rdx, rax
    movsd	xmm0, qword ptr [rip + __real@bff0000000000000] # xmm0 = [-1.0E+0,0.0E+0] ; Load 64-bit double
    movsd	qword ptr [rbp + 632], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 632]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?acos@@YAOO@Z"                               ; Function call
    movsd	qword ptr [rbp + 656], xmm0                  ; Load 64-bit double
    lea	rcx, [rbp + 584]
    lea	rdx, [rbp + 840]
    lea	r8, [rbp + 784]
    call	"?cross@@YA?AUPoint@@AEBU1@0@Z"               ; Function call
    lea	rcx, [rbp + 608]
    lea	rdx, [rbp + 584]
    call	"?normalize@@YA?AUPoint@@AEBU1@@Z"            ; Function call
    movsd	xmm0, qword ptr [rbp + 656]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 536]
    lea	rdx, [rbp + 608]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    movsd	xmm0, qword ptr [rbp + 656]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 512]
    lea	rdx, [rbp + 784]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    lea	rcx, [rbp + 560]
    lea	rdx, [rbp + 512]
    lea	r8, [rbp + 536]
    call	"add_two_points"                              ; Function call
    movsd	xmm0, qword ptr [rbp + 656]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?sin@@YAOO@Z"                                ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 464]
    lea	rdx, [rbp + 608]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    movsd	xmm0, qword ptr [rbp + 656]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?cos@@YAOO@Z"                                ; Function call
    movaps	xmm2, xmm0
    lea	rcx, [rbp + 440]
    lea	rdx, [rbp + 784]
    call	"??D@YA?AUPoint@@AEBU0@O@Z"                   ; Function call
    lea	rcx, [rbp + 488]
    lea	rdx, [rbp + 440]
    lea	r8, [rbp + 464]
    call	"subtract_two_points"                         ; Function call
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rbp + 560]                  ; Multiply two doubles
    movsd	qword ptr [rbp + 416], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rbp + 568]                  ; Multiply two doubles
    movsd	qword ptr [rbp + 424], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rbp + 576]                  ; Multiply two doubles
    movsd	qword ptr [rbp + 432], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rbp + 488]                  ; Multiply two doubles
    movsd	qword ptr [rbp + 392], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rbp + 496]                  ; Multiply two doubles
    movsd	qword ptr [rbp + 400], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@40b8e20000000000] # xmm0 = [6.37E+3,0.0E+0] ; Load 64-bit double
    mulsd	xmm0, qword ptr [rbp + 504]                  ; Multiply two doubles
    movsd	qword ptr [rbp + 408], xmm0                  ; Load 64-bit double
    mov	rdx, qword ptr [rbp + 1040]                    ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	r8, [rbp + 416]
    call	"?is_on_arc@@YA_NAEBUPoint@@00@Z"             ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB25_12                                      ; Jump instruction
    jmp	.LBB25_14                                      ; Jump instruction
    .LBB25_12:
    mov	rdx, qword ptr [rbp + 1040]                    ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	r8, [rbp + 416]
    call	"?get_arc_parameter@@YAOAEBUPoint@@00@Z"      ; Function call
    movsd	qword ptr [rbp + 384], xmm0                  ; Load 64-bit double
    .Ltmp12:
    lea	rcx, [rbp + 680]
    lea	rdx, [rbp + 384]
    call	"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
    .Ltmp13:
    jmp	.LBB25_13                                      ; Jump instruction
    .LBB25_13:
    jmp	.LBB25_14                                      ; Jump instruction
    .LBB25_14:
    movsd	xmm0, qword ptr [rbp + 656]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@3e112e0be826d695] # xmm1 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB25_18                                      ; Jump instruction
# %bb.15:
    mov	rdx, qword ptr [rbp + 1040]                    ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	r8, [rbp + 392]
    call	"?is_on_arc@@YA_NAEBUPoint@@00@Z"             ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB25_16                                      ; Jump instruction
    jmp	.LBB25_18                                      ; Jump instruction
    .LBB25_16:
    mov	rdx, qword ptr [rbp + 1040]                    ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	r8, [rbp + 392]
    call	"?get_arc_parameter@@YAOAEBUPoint@@00@Z"      ; Function call
    movsd	qword ptr [rbp + 376], xmm0                  ; Load 64-bit double
    .Ltmp14:
    lea	rcx, [rbp + 680]
    lea	rdx, [rbp + 376]
    call	"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
    .Ltmp15:
    jmp	.LBB25_17                                      ; Jump instruction
    .LBB25_17:
    jmp	.LBB25_18                                      ; Jump instruction
    .LBB25_18:
    jmp	.LBB25_23                                      ; Jump instruction
    .LBB25_19:
    movsd	xmm0, qword ptr [rbp + 944]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@4000000000000000] # xmm1 = [2.0E+0,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 368], xmm0                  ; Load 64-bit double
    movsd	xmm3, qword ptr [rbp + 368]     # xmm3 = mem[0],zero ; Load 64-bit double
    mov	r8, qword ptr [rbp + 1040]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	rcx, [rbp + 344]
    call	"?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z" ; Function call
    mov	rdx, qword ptr [rbp + 1048]                    ; Move 64-bit value
    lea	rcx, [rbp + 344]
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 1120]                 ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB25_22                                       ; Jump instruction
# %bb.20:
    mov	qword ptr [rbp + 304], 0                       ; Move 64-bit value
    movabs	rax, 4607182418800017408
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 312]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 304]
    lea	r8, [rbp + 296]
    call	"??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z"   ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 328], rax                     ; Move 64-bit value
    lea	rax, [rbp + 328]
    mov	qword ptr [rbp + 336], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 295]
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 40]        # 8-byte Reload ; Move 64-bit value
    .Ltmp10:
    lea	rdx, [rbp + 328]
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z" ; Function call
    .Ltmp11:
    jmp	.LBB25_21                                      ; Jump instruction
    .LBB25_21:
    mov	dword ptr [rbp + 288], 1                       ; Move 32-bit value
    jmp	.LBB25_42                                      ; Jump instruction
    .LBB25_22:
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    mov	dword ptr [rbp + 288], 1                       ; Move 32-bit value
    jmp	.LBB25_42                                      ; Jump instruction
    .LBB25_23:
    lea	rcx, [rbp + 680]
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 192]
    call	"?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 184]
    call	"?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 184]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 192]                     ; Move 64-bit value
    .Ltmp16:
    call	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z" ; Function call
    .Ltmp17:
    jmp	.LBB25_28                                      ; Jump instruction
    .LBB25_24:
    movsd	xmm0, qword ptr [rbp + 944]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@4000000000000000] # xmm1 = [2.0E+0,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 280], xmm0                  ; Load 64-bit double
    movsd	xmm3, qword ptr [rbp + 280]     # xmm3 = mem[0],zero ; Load 64-bit double
    mov	r8, qword ptr [rbp + 1040]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	rcx, [rbp + 256]
    call	"?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z" ; Function call
    mov	rdx, qword ptr [rbp + 1048]                    ; Move 64-bit value
    lea	rcx, [rbp + 256]
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 1120]                 ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB25_27                                       ; Jump instruction
# %bb.25:
    mov	qword ptr [rbp + 216], 0                       ; Move 64-bit value
    movabs	rax, 4607182418800017408
    mov	qword ptr [rbp + 208], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 224]
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 216]
    lea	r8, [rbp + 208]
    call	"??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z"   ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 240], rax                     ; Move 64-bit value
    lea	rax, [rbp + 240]
    mov	qword ptr [rbp + 248], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 207]
    mov	qword ptr [rbp - 64], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 64]        # 8-byte Reload ; Move 64-bit value
    .Ltmp8:
    lea	rdx, [rbp + 240]
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z" ; Function call
    .Ltmp9:
    jmp	.LBB25_26                                      ; Jump instruction
    .LBB25_26:
    mov	dword ptr [rbp + 288], 1                       ; Move 32-bit value
    jmp	.LBB25_42                                      ; Jump instruction
    .LBB25_27:
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    mov	dword ptr [rbp + 288], 1                       ; Move 32-bit value
    jmp	.LBB25_42                                      ; Jump instruction
    .LBB25_28:
    lea	rcx, [rbp + 680]
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 168]
    call	"?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 168]                     ; Move 64-bit value
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    lea	rdx, [rbp + 136]
    call	"?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 128]
    call	"?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" ; Function call
    mov	rdx, qword ptr [rbp + 128]                     ; Move 64-bit value
    mov	r8, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 151]
    .Ltmp18:
    lea	rcx, [rbp + 152]
    call	"??$unique@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@2@AEBUPoint@@00O@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@V10@0V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@0@AEBUPoint@@11O@Z@@Z" ; Function call
    .Ltmp19:
    jmp	.LBB25_29                                      ; Jump instruction
    .LBB25_29:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	qword ptr [rbp + 160], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rbp + 160]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 176]                      ; Move 64-bit value
    lea	rcx, [rbp + 680]
    lea	rdx, [rbp + 120]
    call	"?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp + 119], 0
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    mov	qword ptr [rbp + 104], 0                       ; Move 64-bit value
    .LBB25_30:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 680]
    call	"?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jae	.LBB25_38                                      ; Jump instruction
# %bb.31:                               #   in Loop: Header=BB25_30 Depth=1
    mov	rdx, qword ptr [rbp + 104]                     ; Move 64-bit value
    lea	rcx, [rbp + 680]
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 96], xmm0                   ; Load 64-bit double
    mov	rdx, qword ptr [rbp + 104]                     ; Move 64-bit value
    add	rdx, 1
    lea	rcx, [rbp + 680]
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 88], xmm0                   ; Load 64-bit double
    movsd	xmm1, qword ptr [rbp + 88]      # xmm1 = mem[0],zero ; Load 64-bit double
    subsd	xmm1, qword ptr [rbp + 96]                   ; Subtract two doubles
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB25_33                                      ; Jump instruction
# %bb.32:                               #   in Loop: Header=BB25_30 Depth=1
    jmp	.LBB25_37                                      ; Jump instruction
    .LBB25_33:                              #   in Loop: Header=BB25_30 Depth=1
    movsd	xmm0, qword ptr [rbp + 96]      # xmm0 = mem[0],zero ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 88]                   ; Add two doubles
    movsd	xmm1, qword ptr [rip + __real@4000000000000000] # xmm1 = [2.0E+0,0.0E+0] ; Load 64-bit double
    divsd	xmm0, xmm1                                   ; Divide two doubles
    movsd	qword ptr [rbp + 80], xmm0                   ; Load 64-bit double
    movsd	xmm3, qword ptr [rbp + 80]      # xmm3 = mem[0],zero ; Load 64-bit double
    mulsd	xmm3, qword ptr [rbp + 944]                  ; Multiply two doubles
    mov	r8, qword ptr [rbp + 1040]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 1032]                    ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z" ; Function call
    mov	rdx, qword ptr [rbp + 1048]                    ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 1120]                 ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB25_36                                       ; Jump instruction
# %bb.34:                               #   in Loop: Header=BB25_30 Depth=1
    lea	rcx, [rbp + 40]
    mov	qword ptr [rbp - 96], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 96]
    lea	r8, [rbp + 88]
    call	"??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    .Ltmp20:
    call	"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z" ; Push to stack
    .Ltmp21:
    jmp	.LBB25_35                                      ; Jump instruction
    .LBB25_35:                              #   in Loop: Header=BB25_30 Depth=1
    jmp	.LBB25_36                                      ; Jump instruction
    .LBB25_36:                              #   in Loop: Header=BB25_30 Depth=1
    jmp	.LBB25_37                                      ; Jump instruction
    .LBB25_37:                              #   in Loop: Header=BB25_30 Depth=1
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 104], rax                     ; Move 64-bit value
    jmp	.LBB25_30                                      ; Jump instruction
    .LBB25_38:
    mov	byte ptr [rbp + 119], 1
    mov	dword ptr [rbp + 288], 1                       ; Move 32-bit value
    test	byte ptr [rbp + 119], 1                       ; Test values
    jne	.LBB25_40                                      ; Jump instruction
# %bb.39:
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    .LBB25_40:
    jmp	.LBB25_42                                      ; Jump instruction
    .LBB25_42:
    lea	rcx, [rbp + 680]
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB25_44                                      ; Jump instruction
    .LBB25_44:
    mov	rax, qword ptr [rbp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 1200
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z")@IMGREL
    .text
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$41@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@4HA":
    .seh_proc "?dtor$41@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@4HA"
    .LBB25_41:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$43@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@4HA":
    .seh_proc "?dtor$43@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@4HA"
    .LBB25_43:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 680]
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end1:
    .seh_handlerdata
    .text
    .seh_endproc
    .section	.xdata,"dr"
    .p2align	2, 0x0
    "$cppxdata$?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z")@IMGREL # IPToStateXData
    .long	1192                            # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z":
    .long	-1                              # ToState
    .long	"?dtor$43@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$41@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@4HA"@IMGREL # Action
    "$ip2state$?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z":
    .long	.Lfunc_begin1@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp4@IMGREL+1                 # IP
    .long	0                               # ToState
    .long	.Ltmp20@IMGREL+1                # IP
    .long	1                               # ToState
    .long	.Ltmp21@IMGREL+1                # IP
    .long	-1                              # ToState
    .text
    .section	.text,"xr",discard,"??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z"
.globl	"??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z" # -- Begin function ??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z
    .p2align	4, 0x90
    "??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z": # @"??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z"
    .seh_proc "??$?0NN$0A@@?$pair@OO@std@@QEAA@$$QEAN0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax + 8], xmm0                    ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ"
.globl	"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ" # -- Begin function ??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ": # @"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z"
.globl	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z" # -- Begin function ??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z": # @"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z"
    .seh_proc "??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@V?$initializer_list@U?$pair@OO@std@@@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 96], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 96]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 79]
    call	"??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    call	"?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    call	"?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    call	"??$_Convert_size@_K_K@std@@YA_K_K@Z"         ; Function call
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    lea	r8, [rsp + 56]
    lea	r9, [rsp + 64]
    call	"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ"
.globl	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" # -- Begin function ??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ": # @"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ"
    .seh_proc "??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ"
.globl	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" # -- Begin function ??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ": # @"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
.globl	"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" # -- Begin function ?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z
    .p2align	4, 0x90
    "?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z": # @"?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
    .seh_proc "?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
.globl	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z" # -- Begin function ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z
    .p2align	4, 0x90
    "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z": # @"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
    .seh_proc "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 55]
    call	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
.globl	"?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" # -- Begin function ?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ": # @"?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
    .seh_proc "?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
.globl	"?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ" # -- Begin function ?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ": # @"?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
    .seh_proc "?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z"
.globl	"?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z" # -- Begin function ?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z
    .p2align	4, 0x90
    "?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z": # @"?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z"
    .seh_proc "?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 128], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 120], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 88]                      ; Compare values
    je	.LBB35_2                                        ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z" ; Function call
    mov	r8, qword ptr [rsp + 96]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z" ; Function call
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	r8, rax
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB35_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??$unique@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@2@AEBUPoint@@00O@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@V10@0V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@0@AEBUPoint@@11O@Z@@Z
    "??$unique@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@2@AEBUPoint@@00O@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@V10@0V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@0@AEBUPoint@@11O@Z@@Z": # @"??$unique@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@2@AEBUPoint@@00O@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@V10@0V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@0@AEBUPoint@@11O@Z@@Z"
    .seh_proc "??$unique@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@2@AEBUPoint@@00O@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@V10@0V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@0@AEBUPoint@@11O@Z@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	byte ptr [rsp + 79], r9b
    lea	rcx, [rsp + 88]
    lea	rdx, [rsp + 80]
    call	"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z" ; Function call
    lea	rcx, [rsp + 88]
    call	"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 80]
    call	"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    je	.LBB36_13                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    .LBB36_2:                               # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    je	.LBB36_12                                       ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB36_2 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	xmm2, qword ptr [rax]           # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    lea	rcx, [rsp + 79]
    call	"??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB36_4                                       ; Jump instruction
    jmp	.LBB36_10                                      ; Jump instruction
    .LBB36_4:
    jmp	.LBB36_5                                       ; Jump instruction
    .LBB36_5:                               # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    je	.LBB36_9                                        ; Jump instruction
# %bb.6:                                #   in Loop: Header=BB36_5 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	xmm2, qword ptr [rax]           # xmm2 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    lea	rcx, [rsp + 79]
    call	"??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB36_8                                       ; Jump instruction
# %bb.7:                                #   in Loop: Header=BB36_5 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 8
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    movsd	qword ptr [rax + 8], xmm0                    ; Load 64-bit double
    .LBB36_8:                               #   in Loop: Header=BB36_5 Depth=1
    jmp	.LBB36_5                                       ; Jump instruction
    .LBB36_9:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 80]
    lea	rdx, [rsp + 48]
    call	"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB36_14                                      ; Jump instruction
    .LBB36_10:                              #   in Loop: Header=BB36_2 Depth=1
    jmp	.LBB36_11                                      ; Jump instruction
    .LBB36_11:                              #   in Loop: Header=BB36_2 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    jmp	.LBB36_2                                       ; Jump instruction
    .LBB36_12:
    jmp	.LBB36_13                                      ; Jump instruction
    .LBB36_13:
    lea	rcx, [rsp + 80]
    lea	rdx, [rsp + 56]
    call	"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB36_14:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
.globl	"?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" # -- Begin function ?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ": # @"?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
    .seh_proc "?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z"
.globl	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" # -- Begin function ??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z
    .p2align	4, 0x90
    "??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z": # @"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z"
    .seh_proc "??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    shl	rcx, 3
    add	rax, rcx
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z" ; Push to stack
.globl	"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z" # -- Begin function ?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z
    .p2align	4, 0x90
    "?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z": # @"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z" ; Push to stack
    .seh_proc "?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z" ; Push to stack
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z"
.globl	"??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z" # -- Begin function ??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z
    .p2align	4, 0x90
    "??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z": # @"??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z"
    .seh_proc "??$?0AEAOAEAO$0A@@?$pair@OO@std@@QEAA@AEAO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax + 8], xmm0                    ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ"
.globl	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" # -- Begin function ??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ": # @"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ"
    .seh_proc "??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ"
.globl	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" # -- Begin function ??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ": # @"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .text
.globl	"?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z" # -- Begin function ?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z
    .p2align	4, 0x90
    "?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z": # @"?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z"
    .Lfunc_begin2:
    .seh_proc "?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 144
    .seh_stackalloc 144
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rbp - 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp], rcx                           ; Move 64-bit value
    mov	qword ptr [rbp - 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    call	"?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB43_1                                       ; Jump instruction
    jmp	.LBB43_2                                       ; Jump instruction
    .LBB43_1:
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB43_16                                      ; Jump instruction
    .LBB43_2:
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 16]
    call	"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 24]
    call	"?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 25], 0
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    call	"?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB43_12                                      ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    call	"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    .Ltmp22:
    call	"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" ; Push to stack
    .Ltmp23:
    jmp	.LBB43_4                                       ; Jump instruction
    .LBB43_4:
    mov	qword ptr [rbp - 40], 1                        ; Move 64-bit value
    .LBB43_5:                               # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    call	"?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jae	.LBB43_11                                      ; Jump instruction
# %bb.6:                                #   in Loop: Header=BB43_5 Depth=1
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 72], xmm0      # 8-byte Spill ; Load 64-bit double
    call	"?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ" ; Function call
    movsd	xmm1, qword ptr [rbp - 72]      # 8-byte Reload ; Load 64-bit double
# xmm1 = mem[0],zero
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rax + 8]                    ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB43_8                                        ; Jump instruction
# %bb.7:                                #   in Loop: Header=BB43_5 Depth=1
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    call	"?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ" ; Function call
    mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 8
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 80], xmm0      # 8-byte Spill ; Load 64-bit double
    call	"?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ" ; Function call
    movsd	xmm0, qword ptr [rbp - 80]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rax + 8], xmm0                    ; Load 64-bit double
    jmp	.LBB43_10                                      ; Jump instruction
    .LBB43_8:                               #   in Loop: Header=BB43_5 Depth=1
    mov	rcx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    .Ltmp24:
    call	"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" ; Push to stack
    .Ltmp25:
    jmp	.LBB43_9                                       ; Jump instruction
    .LBB43_9:                               #   in Loop: Header=BB43_5 Depth=1
    jmp	.LBB43_10                                      ; Jump instruction
    .LBB43_10:                              #   in Loop: Header=BB43_5 Depth=1
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    jmp	.LBB43_5                                       ; Jump instruction
    .LBB43_11:
    jmp	.LBB43_12                                      ; Jump instruction
    .LBB43_12:
    mov	byte ptr [rbp - 25], 1
    test	byte ptr [rbp - 25], 1                        ; Test values
    jne	.LBB43_14                                      ; Jump instruction
# %bb.13:
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    .LBB43_14:
    jmp	.LBB43_16                                      ; Jump instruction
    .LBB43_16:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 144
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z")@IMGREL
    .text
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$15@?0??merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z@4HA":
    .seh_proc "?dtor$15@?0??merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z@4HA"
    .LBB43_15:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end2:
    .seh_handlerdata
    .text
    .seh_endproc
    .section	.xdata,"dr"
    .p2align	2, 0x0
    "$cppxdata$?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z")@IMGREL # IPToStateXData
    .long	136                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z":
    .long	-1                              # ToState
    .long	"?dtor$15@?0??merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z@4HA"@IMGREL # Action
    "$ip2state$?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z":
    .long	.Lfunc_begin2@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp22@IMGREL+1                # IP
    .long	0                               # ToState
    .long	.Ltmp25@IMGREL+1                # IP
    .long	-1                              # ToState
    .text
    .section	.text,"xr",discard,"?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ"
.globl	"?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ" # -- Begin function ?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ
    .p2align	4, 0x90
    "?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ": # @"?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ"
    .seh_proc "?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    sete	al
    and	al, 1
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
.globl	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z" # -- Begin function ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z
    .p2align	4, 0x90
    "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z": # @"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
    .seh_proc "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 55]
    call	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
.globl	"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" # -- Begin function ?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ": # @"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
    .seh_proc "?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
.globl	"?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" # -- Begin function ?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ": # @"?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
    .seh_proc "?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" ; Push to stack
.globl	"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" # -- Begin function ?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z
    .p2align	4, 0x90
    "?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z": # @"?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" ; Push to stack
    .seh_proc "?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" ; Push to stack
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z"
.globl	"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z" # -- Begin function ??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z
    .p2align	4, 0x90
    "??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z": # @"??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z"
    .seh_proc "??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
.globl	"?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" # -- Begin function ?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ": # @"?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
    .seh_proc "?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ"
.globl	"?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ" # -- Begin function ?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ
    .p2align	4, 0x90
    "?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ": # @"?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ"
    .seh_proc "?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rax, -16
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
.globl	__real@3fefffffff768fa1         # -- Begin function ?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z
    .section	.rdata,"dr",discard,__real@3fefffffff768fa1
    .p2align	3, 0x0
    __real@3fefffffff768fa1:
    .quad	0x3fefffffff768fa1              # double 0.99999999900000002
    .text
.globl	"?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z"
    .p2align	4, 0x90
    "?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z": # @"?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z"
    .Lfunc_begin3:
    .seh_proc "?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 304
    .seh_stackalloc 304
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 168], -2                      ; Move 64-bit value
    movsd	qword ptr [rbp + 152], xmm3                  ; Load 64-bit double
    mov	qword ptr [rbp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 136], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 128], rcx                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rbp + 120], xmm0                  ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp + 120]
    jbe	.LBB52_2                                       ; Jump instruction
# %bb.1:
    mov	byte ptr [rbp + 167], 1
    jmp	.LBB52_21                                      ; Jump instruction
    .LBB52_2:
    lea	rcx, [rbp + 96]
    call	"??0?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 88]                      ; Move 64-bit value
    lea	rdx, [rbp + 80]
    call	"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 88]                      ; Move 64-bit value
    lea	rdx, [rbp + 72]
    call	"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    .LBB52_3:                               # =>This Inner Loop Header: Depth=1
    lea	rcx, [rbp + 80]
    lea	rdx, [rbp + 72]
    call	"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB52_4                                       ; Jump instruction
    jmp	.LBB52_8                                       ; Jump instruction
    .LBB52_4:                               #   in Loop: Header=BB52_3 Depth=1
    lea	rcx, [rbp + 80]
    call	"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ" ; Function call
    mov	qword ptr [rbp + 64], rax                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 152]     # xmm0 = mem[0],zero ; Load 64-bit double
    mov	r9, qword ptr [rbp + 64]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 128]                     ; Move 64-bit value
    .Ltmp28:
    mov	rax, rsp
    movsd	qword ptr [rax + 32], xmm0                   ; Load 64-bit double
    lea	rcx, [rbp + 40]
    call	"?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z" ; Function call
    .Ltmp29:
    jmp	.LBB52_5                                       ; Jump instruction
    .LBB52_5:                               #   in Loop: Header=BB52_3 Depth=1
    lea	rcx, [rbp + 40]
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 32]
    call	"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 24]
    call	"?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    lea	rcx, [rbp + 96]
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 8]
    call	"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	qword ptr [rbp + 16], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp + 16]                       ; Move 64-bit value
    mov	r9, qword ptr [rbp + 24]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 32]                      ; Move 64-bit value
    .Ltmp30:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    mov	rdx, rbp
    call	"??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z" ; Function call
    .Ltmp31:
    jmp	.LBB52_6                                       ; Jump instruction
    .LBB52_6:                               #   in Loop: Header=BB52_3 Depth=1
    lea	rcx, [rbp + 40]
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 80]
    call	"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB52_3                                       ; Jump instruction
    .LBB52_8:
    .Ltmp26:
    lea	rcx, [rbp - 24]
    lea	rdx, [rbp + 96]
    call	"?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z" ; Function call
    .Ltmp27:
    jmp	.LBB52_9                                       ; Jump instruction
    .LBB52_9:
    lea	rcx, [rbp - 24]
    call	"?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB52_10                                      ; Jump instruction
    jmp	.LBB52_11                                      ; Jump instruction
    .LBB52_10:
    mov	byte ptr [rbp + 167], 0
    mov	dword ptr [rbp - 28], 1                        ; Move 32-bit value
    jmp	.LBB52_19                                      ; Jump instruction
    .LBB52_11:
    xorps	xmm0, xmm0
    movsd	qword ptr [rbp - 40], xmm0                   ; Load 64-bit double
    lea	rax, [rbp - 24]
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 48]                      ; Move 64-bit value
    lea	rdx, [rbp - 56]
    call	"?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 48]                      ; Move 64-bit value
    lea	rdx, [rbp - 64]
    call	"?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ" ; Function call
    .LBB52_12:                              # =>This Inner Loop Header: Depth=1
    lea	rcx, [rbp - 56]
    lea	rdx, [rbp - 64]
    call	"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB52_13                                      ; Jump instruction
    jmp	.LBB52_16                                      ; Jump instruction
    .LBB52_13:                              #   in Loop: Header=BB52_12 Depth=1
    lea	rcx, [rbp - 56]
    call	"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ" ; Function call
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 72]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@3e112e0be826d695] # xmm1 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm1, qword ptr [rbp - 40]                   ; Add two doubles
    ucomisd	xmm0, xmm1
    jbe	.LBB52_15                                      ; Jump instruction
# %bb.14:
    mov	byte ptr [rbp + 167], 0
    mov	dword ptr [rbp - 28], 1                        ; Move 32-bit value
    jmp	.LBB52_19                                      ; Jump instruction
    .LBB52_15:                              #   in Loop: Header=BB52_12 Depth=1
    mov	rdx, qword ptr [rbp - 72]                      ; Move 64-bit value
    add	rdx, 8
    lea	rcx, [rbp - 40]
    call	"??$max@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 40], xmm0                   ; Load 64-bit double
    lea	rcx, [rbp - 56]
    call	"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB52_12                                      ; Jump instruction
    .LBB52_16:
    movsd	xmm0, qword ptr [rip + __real@3fefffffff768fa1] # xmm0 = [9.9999999900000002E-1,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp - 40]
    jbe	.LBB52_18                                      ; Jump instruction
# %bb.17:
    mov	byte ptr [rbp + 167], 0
    mov	dword ptr [rbp - 28], 1                        ; Move 32-bit value
    jmp	.LBB52_19                                      ; Jump instruction
    .LBB52_18:
    mov	byte ptr [rbp + 167], 1
    mov	dword ptr [rbp - 28], 1                        ; Move 32-bit value
    .LBB52_19:
    lea	rcx, [rbp - 24]
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 96]
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB52_21                                      ; Jump instruction
    .LBB52_21:
    mov	al, byte ptr [rbp + 167]
    and	al, 1
    add	rsp, 304
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z")@IMGREL
    .text
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$7@?0??is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z@4HA":
    .seh_proc "?dtor$7@?0??is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z@4HA"
    .LBB52_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 40]
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$20@?0??is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z@4HA":
    .seh_proc "?dtor$20@?0??is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z@4HA"
    .LBB52_20:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 96]
    call	"??1?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end3:
    .seh_handlerdata
    .text
    .seh_endproc
    .section	.xdata,"dr"
    .p2align	2, 0x0
    "$cppxdata$?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z")@IMGREL # IPToStateXData
    .long	296                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z":
    .long	-1                              # ToState
    .long	"?dtor$20@?0??is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$7@?0??is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z@4HA"@IMGREL # Action
    "$ip2state$?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z":
    .long	.Lfunc_begin3@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp28@IMGREL+1                # IP
    .long	0                               # ToState
    .long	.Ltmp30@IMGREL+1                # IP
    .long	1                               # ToState
    .long	.Ltmp26@IMGREL+1                # IP
    .long	0                               # ToState
    .long	.Ltmp27@IMGREL+1                # IP
    .long	-1                              # ToState
    .text
    .section	.text,"xr",discard,"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
.globl	"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" # -- Begin function ?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ": # @"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .seh_proc "?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
.globl	"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" # -- Begin function ?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ": # @"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .seh_proc "?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
.globl	"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" # -- Begin function ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z": # @"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" ; Function call
    xor	al, -1
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ"
.globl	"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ" # -- Begin function ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ
    .p2align	4, 0x90
    "??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ": # @"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ"
    .seh_proc "??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z"
.globl	"??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z" # -- Begin function ??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z
    .p2align	4, 0x90
    "??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z": # @"??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z"
    .seh_proc "??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z"
# %bb.0:
    sub	rsp, 168
    .seh_stackalloc 168
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	qword ptr [rsp + 160], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 152], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 144], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rax                     ; Move 64-bit value
    mov	qword ptr [rsp + 128], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 152]                     ; Move 64-bit value
    mov	qword ptr [rsp + 120], rcx                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    lea	rcx, [rsp + 144]
    lea	rdx, [rsp + 136]
    call	"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z" ; Function call
    lea	rcx, [rsp + 144]
    call	"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 136]
    call	"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Convert_size@_K_K@std@@YA_K_K@Z"         ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	r8, qword ptr [rsp + 96]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 152]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    call	"?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 168
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
.globl	"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ": # @"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 24
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
.globl	"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" # -- Begin function ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z": # @"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" ; Function call
    xor	al, -1
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ"
.globl	"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ" # -- Begin function ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ
    .p2align	4, 0x90
    "??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ": # @"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ"
    .seh_proc "??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
.globl	"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ": # @"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
; ----------------------------------------
; FUNCTION: main_program
; ----------------------------------------
; Main program: reads input, calculates distance, outputs result
.globl main_program
    .section	.rdata,"dr",discard,__real@7ff0000000000000
    .p2align	3, 0x0
    .quad	0x7ff0000000000000              # double +Inf
    .section	.rdata,"dr",discard,__real@40d38afc7e364350
    .p2align	3, 0x0
    .quad	0x40d38afc7e364350              # double 20011.94520336698
    .text
; ----------------------------------------
; FUNCTION: main_program
; ----------------------------------------
; Main program: reads input, calculates distance, outputs result
.globl main_program
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc main_program
    .seh_handler __CxxFrameHandler3, @unwind, @except
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 944
    .seh_stackalloc 944
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 808], -2                      ; Move 64-bit value
    mov	dword ptr [rbp + 804], 0                       ; Move 32-bit value
    xor	ecx, ecx
    call	"?sync_with_stdio@ios_base@std@@SA_N_N@Z"     ; Function call
    mov	rax, qword ptr [rip + "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"] ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    lea	rcx, [rip + "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"]
    add	rcx, rax
    xor	eax, eax
    mov	edx, eax
    call	"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z" ; Function call
    lea	rcx, [rip + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rip + "?fixed@std@@YAAEAVios_base@1@AEAV21@@Z"]
    call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z" ; Function call
    mov	qword ptr [rbp + 200], rax      # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 784]
    mov	edx, 3
    call	"?setprecision@std@@YA?AU?$_Smanip@_J@1@_J@Z" ; Function call
    mov	rcx, qword ptr [rbp + 200]      # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 784]
    call	"??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z" ; Function call
    mov	dword ptr [rbp + 772], 1                       ; Move 32-bit value
#     Child Loop BB62_3 Depth 2
#     Child Loop BB62_9 Depth 2
#     Child Loop BB62_13 Depth 2
#       Child Loop BB62_15 Depth 3
#         Child Loop BB62_18 Depth 4
#     Child Loop BB62_28 Depth 2
#     Child Loop BB62_32 Depth 2
#     Child Loop BB62_38 Depth 2
#     Child Loop BB62_42 Depth 2
#       Child Loop BB62_44 Depth 3
#     Child Loop BB62_58 Depth 2
#       Child Loop BB62_60 Depth 3
#         Child Loop BB62_62 Depth 4
#     Child Loop BB62_75 Depth 2
#       Child Loop BB62_82 Depth 3
#       Child Loop BB62_86 Depth 3
#         Child Loop BB62_88 Depth 4
#       Child Loop BB62_97 Depth 3
#         Child Loop BB62_99 Depth 4
#           Child Loop BB62_101 Depth 5
    lea	rcx, [rip + "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rbp + 780]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z" ; Function call
    mov	rcx, rax
    lea	rdx, [rbp + 760]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"??Bios_base@std@@QEBA_NXZ"                   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB62_2                                       ; Jump instruction
    jmp	.LBB62_124                                     ; Jump instruction
    lea	rcx, [rbp + 735]
    call	"??0?$allocator@UPoint@@@std@@QEAA@XZ"        ; Function call
    movsxd	rdx, dword ptr [rbp + 780]                  ; Move 32-bit value
    lea	rcx, [rbp + 736]
    lea	r8, [rbp + 735]
    call	"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z" ; Function call
    mov	dword ptr [rbp + 728], 0                       ; Move 32-bit value
    mov	eax, dword ptr [rbp + 728]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_7                                       ; Jump instruction
    lea	rcx, [rip + "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rbp + 712]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z" ; Function call
    mov	qword ptr [rbp + 192], rax      # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_5                                       ; Jump instruction
    mov	rcx, qword ptr [rbp + 192]      # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 720]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z" ; Function call
    jmp	.LBB62_6                                       ; Jump instruction
    movsd	xmm2, qword ptr [rbp + 712]     # xmm2 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rbp + 720]     # xmm1 = mem[0],zero ; Load 64-bit double
    lea	rcx, [rbp + 688]
    call	"?lat_lon_to_xyz@@YA?AUPoint@@OO@Z"           ; Function call
    movsxd	rdx, dword ptr [rbp + 728]                  ; Move 32-bit value
    lea	rcx, [rbp + 736]
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp + 688]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 696]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 704]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rbp + 728]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 728], eax                     ; Move 32-bit value
    jmp	.LBB62_3                                       ; Jump instruction
    lea	rcx, [rbp + 672]
    call	"??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB62_8                                       ; Jump instruction
    lea	rax, [rbp + 736]
    mov	qword ptr [rbp + 664], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 664]                     ; Move 64-bit value
    lea	rdx, [rbp + 656]
    call	"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 664]                     ; Move 64-bit value
    lea	rdx, [rbp + 648]
    call	"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    lea	rcx, [rbp + 656]
    lea	rdx, [rbp + 648]
    call	"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB62_10                                      ; Jump instruction
    jmp	.LBB62_12                                      ; Jump instruction
    lea	rcx, [rbp + 656]
    call	"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ" ; Function call
    mov	qword ptr [rbp + 640], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rbp + 640]                      ; Move 64-bit value
    lea	rcx, [rbp + 672]
    lea	rdx, [rbp + 624]
    call	"??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z" ; Function call
    jmp	.LBB62_11                                      ; Jump instruction
    lea	rcx, [rbp + 656]
    call	"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB62_9                                       ; Jump instruction
    mov	dword ptr [rbp + 620], 0                       ; Move 32-bit value
#       Child Loop BB62_15 Depth 3
#         Child Loop BB62_18 Depth 4
    mov	eax, dword ptr [rbp + 620]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_24                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 620]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 616], eax                     ; Move 32-bit value
#     Parent Loop BB62_13 Depth=2
#         Child Loop BB62_18 Depth 4
    mov	eax, dword ptr [rbp + 616]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_23                                      ; Jump instruction
    movsd	xmm0, qword ptr [rbp + 760]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 184], xmm0     # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 616]                  ; Move 32-bit value
    lea	rcx, [rbp + 736]
    mov	qword ptr [rbp + 168], rcx      # 8-byte Spill ; Move 64-bit value
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp + 168]      # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 176], rax      # 8-byte Spill ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 620]                  ; Move 32-bit value
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	r8, qword ptr [rbp + 176]       # 8-byte Reload ; Move 64-bit value
    movsd	xmm3, qword ptr [rbp + 184]     # 8-byte Reload ; Load 64-bit double
# xmm3 = mem[0],zero
    mov	rdx, rax
    lea	rcx, [rbp + 592]
    call	"?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z" ; Function call
    jmp	.LBB62_17                                      ; Jump instruction
    lea	rax, [rbp + 592]
    mov	qword ptr [rbp + 584], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 584]                     ; Move 64-bit value
    lea	rdx, [rbp + 576]
    call	"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 584]                     ; Move 64-bit value
    lea	rdx, [rbp + 568]
    call	"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
#     Parent Loop BB62_13 Depth=2
#       Parent Loop BB62_15 Depth=3
    lea	rcx, [rbp + 576]
    lea	rdx, [rbp + 568]
    call	"??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB62_19                                      ; Jump instruction
    jmp	.LBB62_21                                      ; Jump instruction
    lea	rcx, [rbp + 576]
    call	"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ" ; Function call
    mov	qword ptr [rbp + 560], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rbp + 560]                      ; Move 64-bit value
    lea	rcx, [rbp + 672]
    lea	rdx, [rbp + 544]
    call	"??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z" ; Function call
    jmp	.LBB62_20                                      ; Jump instruction
    lea	rcx, [rbp + 576]
    call	"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB62_18                                      ; Jump instruction
    lea	rcx, [rbp + 592]
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    mov	eax, dword ptr [rbp + 616]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 616], eax                     ; Move 32-bit value
    jmp	.LBB62_15                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 620]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 620], eax                     ; Move 32-bit value
    jmp	.LBB62_13                                      ; Jump instruction
    lea	rcx, [rbp + 519]
    mov	qword ptr [rbp + 160], rcx      # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@UPoint@@@std@@QEAA@XZ"        ; Function call
    lea	rcx, [rbp + 672]
    mov	qword ptr [rbp + 152], rcx      # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rbp + 504]
    call	"?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 152]      # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 496]
    call	"?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ" ; Function call
    mov	r9, qword ptr [rbp + 160]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 496]                     ; Move 64-bit value
    mov	r8, qword ptr [rbp + 504]                      ; Move 64-bit value
    lea	rcx, [rbp + 520]
    call	"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z" ; Function call
    jmp	.LBB62_25                                      ; Jump instruction
    lea	rcx, [rbp + 480]
    call	"??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB62_26                                      ; Jump instruction
    lea	rcx, [rbp + 455]
    mov	qword ptr [rbp + 144], rcx      # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@H@std@@QEAA@XZ"               ; Function call
    mov	r8, qword ptr [rbp + 144]       # 8-byte Reload ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 780]                  ; Move 32-bit value
    lea	rcx, [rbp + 456]
    call	"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z" ; Function call
    jmp	.LBB62_27                                      ; Jump instruction
    mov	dword ptr [rbp + 448], 0                       ; Move 32-bit value
    movsxd	rax, dword ptr [rbp + 448]                  ; Move 32-bit value
    mov	qword ptr [rbp + 136], rax      # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 520]
    call	"?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 136]      # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jae	.LBB62_31                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 448]                     ; Move 32-bit value
    mov	dword ptr [rbp + 124], eax      # 4-byte Spill ; Move 32-bit value
    movsxd	rdx, eax
    lea	rcx, [rbp + 520]
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rdx, rax
    lea	rcx, [rbp + 480]
    call	"??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z" ; Function call
    mov	qword ptr [rbp + 128], rax      # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_30                                      ; Jump instruction
    mov	rax, qword ptr [rbp + 128]      # 8-byte Reload ; Move 64-bit value
    mov	ecx, dword ptr [rbp + 124]      # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	eax, dword ptr [rbp + 448]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 448], eax                     ; Move 32-bit value
    jmp	.LBB62_28                                      ; Jump instruction
    mov	dword ptr [rbp + 444], 0                       ; Move 32-bit value
    mov	eax, dword ptr [rbp + 444]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_35                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 444]                  ; Move 32-bit value
    lea	rcx, [rbp + 736]
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rdx, rax
    lea	rcx, [rbp + 480]
    call	"??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z" ; Function call
    mov	qword ptr [rbp + 112], rax      # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_34                                      ; Jump instruction
    mov	rax, qword ptr [rbp + 112]      # 8-byte Reload ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rbp + 108], eax      # 4-byte Spill ; Move 32-bit value
    movsxd	rdx, dword ptr [rbp + 444]                  ; Move 32-bit value
    lea	rcx, [rbp + 456]
    call	"??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z" ; Function call
    mov	ecx, dword ptr [rbp + 108]      # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	eax, dword ptr [rbp + 444]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 444], eax                     ; Move 32-bit value
    jmp	.LBB62_32                                      ; Jump instruction
    lea	rcx, [rbp + 520]
    call	"?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" ; Function call
    mov	dword ptr [rbp + 440], eax                     ; Move 32-bit value
    lea	rcx, [rbp + 415]
    call	"??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 383]
    mov	qword ptr [rbp + 96], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@O@std@@QEAA@XZ"               ; Function call
    mov	r9, qword ptr [rbp + 96]        # 8-byte Reload ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 440]                  ; Move 32-bit value
    lea	r8, [rip + INF]
    lea	rcx, [rbp + 384]
    call	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z" ; Function call
    jmp	.LBB62_36                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 440]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    lea	r8, [rbp + 384]
    lea	r9, [rbp + 415]
    call	"??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" ; Function call
    jmp	.LBB62_37                                      ; Jump instruction
    lea	rcx, [rbp + 384]
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    mov	dword ptr [rbp + 376], 0                       ; Move 32-bit value
    mov	eax, dword ptr [rbp + 376]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 440]                     ; Compare values
    jge	.LBB62_41                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 376]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 376]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    xorps	xmm0, xmm0
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	eax, dword ptr [rbp + 376]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 376], eax                     ; Move 32-bit value
    jmp	.LBB62_38                                      ; Jump instruction
    mov	dword ptr [rbp + 372], 0                       ; Move 32-bit value
#       Child Loop BB62_44 Depth 3
    mov	eax, dword ptr [rbp + 372]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 440]                     ; Compare values
    jge	.LBB62_57                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 372]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 368], eax                     ; Move 32-bit value
#     Parent Loop BB62_42 Depth=2
    mov	eax, dword ptr [rbp + 368]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 440]                     ; Compare values
    jge	.LBB62_56                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 368]                  ; Move 32-bit value
    lea	rcx, [rbp + 520]
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	qword ptr [rbp + 88], rax       # 8-byte Spill ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 372]                  ; Move 32-bit value
    lea	rcx, [rbp + 520]
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rdx, qword ptr [rbp + 88]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"?dist_xyz@@YAOAEBUPoint@@0@Z"                ; Function call
    movsd	qword ptr [rbp + 360], xmm0                  ; Load 64-bit double
    mov	byte ptr [rbp + 359], 0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, qword ptr [rbp + 360]
    jbe	.LBB62_47                                      ; Jump instruction
    mov	byte ptr [rbp + 359], 1
    jmp	.LBB62_53                                      ; Jump instruction
    movsd	xmm0, qword ptr [rbp + 360]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@40d38afc7e364350] # xmm1 = [2.001194520336698E+4,0.0E+0] ; Load 64-bit double
    subsd	xmm0, xmm1                                   ; Subtract two doubles
    call	"?abs@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB62_50                                      ; Jump instruction
    movsd	xmm0, qword ptr [rbp + 760]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 72], xmm0      # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 368]                  ; Move 32-bit value
    lea	rcx, [rbp + 520]
    mov	qword ptr [rbp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 64], rax       # 8-byte Spill ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 372]                  ; Move 32-bit value
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rdx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    movsd	xmm3, qword ptr [rbp + 72]      # 8-byte Reload ; Load 64-bit double
# xmm3 = mem[0],zero
    mov	rcx, rax
    lea	r8, [rbp + 736]
    call	"?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z" ; Function call
    mov	byte ptr [rbp + 87], al         # 1-byte Spill
    jmp	.LBB62_49                                      ; Jump instruction
    mov	al, byte ptr [rbp + 87]         # 1-byte Reload
    and	al, 1
    mov	byte ptr [rbp + 359], al
    jmp	.LBB62_52                                      ; Jump instruction
    movsd	xmm0, qword ptr [rbp + 760]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 40], xmm0      # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 368]                  ; Move 32-bit value
    lea	rcx, [rbp + 520]
    mov	qword ptr [rbp + 24], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 32], rax       # 8-byte Spill ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 372]                  ; Move 32-bit value
    call	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" ; Function call
    mov	rdx, qword ptr [rbp + 32]       # 8-byte Reload ; Move 64-bit value
    movsd	xmm3, qword ptr [rbp + 40]      # 8-byte Reload ; Load 64-bit double
# xmm3 = mem[0],zero
    mov	rcx, rax
    lea	r8, [rbp + 736]
    call	"?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z" ; Function call
    mov	byte ptr [rbp + 55], al         # 1-byte Spill
    jmp	.LBB62_51                                      ; Jump instruction
    mov	al, byte ptr [rbp + 55]         # 1-byte Reload
    and	al, 1
    mov	byte ptr [rbp + 359], al
    jmp	.LBB62_53                                      ; Jump instruction
    test	byte ptr [rbp + 359], 1                       ; Test values
    je	.LBB62_55                                       ; Jump instruction
    movsd	xmm0, qword ptr [rbp + 360]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 16], xmm0      # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 368]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 372]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp + 16]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 372]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 368]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp + 16]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	eax, dword ptr [rbp + 368]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 368], eax                     ; Move 32-bit value
    jmp	.LBB62_44                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 372]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 372], eax                     ; Move 32-bit value
    jmp	.LBB62_42                                      ; Jump instruction
    mov	dword ptr [rbp + 352], 0                       ; Move 32-bit value
#       Child Loop BB62_60 Depth 3
#         Child Loop BB62_62 Depth 4
    mov	eax, dword ptr [rbp + 352]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 440]                     ; Compare values
    jge	.LBB62_69                                      ; Jump instruction
    mov	dword ptr [rbp + 348], 0                       ; Move 32-bit value
#     Parent Loop BB62_58 Depth=2
#         Child Loop BB62_62 Depth 4
    mov	eax, dword ptr [rbp + 348]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 440]                     ; Compare values
    jge	.LBB62_68                                      ; Jump instruction
    mov	dword ptr [rbp + 344], 0                       ; Move 32-bit value
#     Parent Loop BB62_58 Depth=2
#       Parent Loop BB62_60 Depth=3
    mov	eax, dword ptr [rbp + 344]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 440]                     ; Compare values
    jge	.LBB62_67                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 348]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 352]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@7ff0000000000000] # xmm1 = [+Inf,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jne	.LBB62_64                                      ; Jump instruction
    jp	.LBB62_64                                       ; Jump instruction
    jmp	.LBB62_66                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 352]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 344]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@7ff0000000000000] # xmm1 = [+Inf,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jne	.LBB62_65                                      ; Jump instruction
    jp	.LBB62_65                                       ; Jump instruction
    jmp	.LBB62_66                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 348]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 352]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp], xmm0           # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 352]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 344]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp]           # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    addsd	xmm0, qword ptr [rax]                        ; Add two doubles
    movsd	qword ptr [rbp + 336], xmm0                  ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 348]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 344]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    mov	rcx, rax
    lea	rdx, [rbp + 336]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp + 8], xmm0       # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 348]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 344]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp + 8]       # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	eax, dword ptr [rbp + 344]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 344], eax                     ; Move 32-bit value
    jmp	.LBB62_62                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 348]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 348], eax                     ; Move 32-bit value
    jmp	.LBB62_60                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 352]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 352], eax                     ; Move 32-bit value
    jmp	.LBB62_58                                      ; Jump instruction
    lea	rcx, [rip + "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rbp + 776]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z" ; Function call
    jmp	.LBB62_70                                      ; Jump instruction
    lea	rcx, [rip + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rip + "??_C@_05MBLBFKHI@Case?5?$AA@"]
    call	"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z" ; Function call
    mov	qword ptr [rbp - 8], rax        # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_71                                      ; Jump instruction
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	edx, dword ptr [rbp + 772]                     ; Move 32-bit value
    mov	eax, edx
    inc	eax
    mov	dword ptr [rbp + 772], eax                     ; Move 32-bit value
    call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z" ; Function call
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_72                                      ; Jump instruction
    mov	rcx, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "??_C@_01JLIPDDHJ@?3?$AA@"]
    call	"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z" ; Function call
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_73                                      ; Jump instruction
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"]
    call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z" ; Function call
    jmp	.LBB62_74                                      ; Jump instruction
    mov	dword ptr [rbp + 332], 0                       ; Move 32-bit value
#       Child Loop BB62_82 Depth 3
#       Child Loop BB62_86 Depth 3
#         Child Loop BB62_88 Depth 4
#       Child Loop BB62_97 Depth 3
#         Child Loop BB62_99 Depth 4
#           Child Loop BB62_101 Depth 5
    mov	eax, dword ptr [rbp + 332]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 776]                     ; Compare values
    jge	.LBB62_117                                     ; Jump instruction
    lea	rcx, [rip + "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rbp + 328]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z" ; Function call
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_77                                      ; Jump instruction
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 324]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z" ; Function call
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_78                                      ; Jump instruction
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp + 312]
    call	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z" ; Function call
    jmp	.LBB62_79                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 328]                     ; Move 32-bit value
    dec	eax
    mov	dword ptr [rbp + 328], eax                     ; Move 32-bit value
    mov	eax, dword ptr [rbp + 324]                     ; Move 32-bit value
    dec	eax
    mov	dword ptr [rbp + 324], eax                     ; Move 32-bit value
    lea	rcx, [rbp + 287]
    call	"??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 255]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@O@std@@QEAA@XZ"               ; Function call
    mov	r9, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    movsxd	rdx, dword ptr [rbp + 780]                  ; Move 32-bit value
    lea	r8, [rip + INF]
    lea	rcx, [rbp + 256]
    call	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z" ; Function call
    jmp	.LBB62_80                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 780]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    lea	r8, [rbp + 256]
    lea	r9, [rbp + 287]
    call	"??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" ; Function call
    jmp	.LBB62_81                                      ; Jump instruction
    lea	rcx, [rbp + 256]
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    mov	dword ptr [rbp + 248], 0                       ; Move 32-bit value
#     Parent Loop BB62_75 Depth=2
    mov	eax, dword ptr [rbp + 248]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_85                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 248]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 248]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    xorps	xmm0, xmm0
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	eax, dword ptr [rbp + 248]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 248], eax                     ; Move 32-bit value
    jmp	.LBB62_82                                      ; Jump instruction
    mov	dword ptr [rbp + 244], 0                       ; Move 32-bit value
#     Parent Loop BB62_75 Depth=2
#         Child Loop BB62_88 Depth 4
    mov	eax, dword ptr [rbp + 244]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_96                                      ; Jump instruction
    mov	dword ptr [rbp + 240], 0                       ; Move 32-bit value
#     Parent Loop BB62_75 Depth=2
#       Parent Loop BB62_86 Depth=3
    mov	eax, dword ptr [rbp + 240]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_95                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 244]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 240]                     ; Compare values
    jne	.LBB62_91                                      ; Jump instruction
    jmp	.LBB62_94                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 244]                  ; Move 32-bit value
    lea	rcx, [rbp + 456]
    call	"??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z" ; Function call
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rbp + 236], eax                     ; Move 32-bit value
    movsxd	rdx, dword ptr [rbp + 240]                  ; Move 32-bit value
    lea	rcx, [rbp + 456]
    call	"??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z" ; Function call
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rbp + 232], eax                     ; Move 32-bit value
    movsxd	rdx, dword ptr [rbp + 236]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 232]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    addsd	xmm0, qword ptr [rbp + 312]                  ; Add two doubles
    ucomisd	xmm0, xmm1
    jb	.LBB62_93                                       ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 236]                  ; Move 32-bit value
    lea	rcx, [rbp + 416]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 232]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 56], xmm0      # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 244]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 240]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp - 56]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    jmp	.LBB62_94                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 240]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 240], eax                     ; Move 32-bit value
    jmp	.LBB62_88                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 244]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 244], eax                     ; Move 32-bit value
    jmp	.LBB62_86                                      ; Jump instruction
    mov	dword ptr [rbp + 228], 0                       ; Move 32-bit value
#     Parent Loop BB62_75 Depth=2
#         Child Loop BB62_99 Depth 4
#           Child Loop BB62_101 Depth 5
    mov	eax, dword ptr [rbp + 228]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_108                                     ; Jump instruction
    mov	dword ptr [rbp + 224], 0                       ; Move 32-bit value
#     Parent Loop BB62_75 Depth=2
#       Parent Loop BB62_97 Depth=3
#           Child Loop BB62_101 Depth 5
    mov	eax, dword ptr [rbp + 224]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_107                                     ; Jump instruction
    mov	dword ptr [rbp + 220], 0                       ; Move 32-bit value
#     Parent Loop BB62_75 Depth=2
#       Parent Loop BB62_97 Depth=3
#         Parent Loop BB62_99 Depth=4
    mov	eax, dword ptr [rbp + 220]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 780]                     ; Compare values
    jge	.LBB62_106                                     ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 224]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 228]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@7ff0000000000000] # xmm1 = [+Inf,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jne	.LBB62_103                                     ; Jump instruction
    jp	.LBB62_103                                      ; Jump instruction
    jmp	.LBB62_105                                     ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 228]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 220]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@7ff0000000000000] # xmm1 = [+Inf,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jne	.LBB62_104                                     ; Jump instruction
    jp	.LBB62_104                                      ; Jump instruction
    jmp	.LBB62_105                                     ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 224]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 228]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 72], xmm0      # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 228]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 220]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp - 72]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    addsd	xmm0, qword ptr [rax]                        ; Add two doubles
    movsd	qword ptr [rbp + 208], xmm0                  ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 224]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 220]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    mov	rcx, rax
    lea	rdx, [rbp + 208]
    call	"??$min@O@std@@YAAEBOAEBO0@Z"                 ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 64], xmm0      # 8-byte Spill ; Load 64-bit double
    movsxd	rdx, dword ptr [rbp + 224]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 220]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp - 64]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	eax, dword ptr [rbp + 220]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 220], eax                     ; Move 32-bit value
    jmp	.LBB62_101                                     ; Jump instruction
    mov	eax, dword ptr [rbp + 224]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 224], eax                     ; Move 32-bit value
    jmp	.LBB62_99                                      ; Jump instruction
    mov	eax, dword ptr [rbp + 228]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 228], eax                     ; Move 32-bit value
    jmp	.LBB62_97                                      ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 328]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 324]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm1, qword ptr [rip + __real@7ff0000000000000] # xmm1 = [+Inf,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jne	.LBB62_112                                     ; Jump instruction
    jp	.LBB62_112                                      ; Jump instruction
    lea	rcx, [rip + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    lea	rdx, [rip + "??_C@_0L@GOOMCKGH@impossible?$AA@"]
    call	"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z" ; Function call
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_110                                     ; Jump instruction
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"]
    call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z" ; Function call
    jmp	.LBB62_111                                     ; Jump instruction
    jmp	.LBB62_115                                     ; Jump instruction
    movsxd	rdx, dword ptr [rbp + 328]                  ; Move 32-bit value
    lea	rcx, [rbp + 288]
    call	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" ; Function call
    mov	rcx, rax
    movsxd	rdx, dword ptr [rbp + 324]                  ; Move 32-bit value
    call	"??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z" ; Function call
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    lea	rcx, [rip + "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"]
    call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z" ; Function call
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB62_113                                     ; Jump instruction
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"]
    call	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z" ; Function call
    jmp	.LBB62_114                                     ; Jump instruction
    jmp	.LBB62_115                                     ; Jump instruction
    lea	rcx, [rbp + 288]
    call	"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ" ; Function call
    mov	eax, dword ptr [rbp + 332]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 332], eax                     ; Move 32-bit value
    jmp	.LBB62_75                                      ; Jump instruction
    lea	rcx, [rbp + 416]
    call	"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 456]
    call	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 480]
    call	"??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 520]
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 672]
    call	"??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 736]
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB62_1                                       ; Jump instruction
    xor	eax, eax
    add	rsp, 944
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	($cppxdata$main_program)@IMGREL
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$22@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 592]
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$40@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 384]
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$84@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 256]
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$116@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 288]
    call	"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$118@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 416]
    call	"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$119@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 456]
    call	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$120@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 480]
    call	"??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$121@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 520]
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$122@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 672]
    call	"??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .p2align	4, 0x90
main_program:
; Begin main_program
    .seh_proc "?dtor$123@?0?main_program@4HA"
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 736]
    call	"??1?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .text
    .seh_endproc
    .section	.xdata,"dr"
    .p2align	2, 0x0
main_program:
; Begin main_program
    .long	429065506                       # MagicNumber
    .long	10                              # MaxState
    .long	($stateUnwindMap$main_program)@IMGREL   # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	13                              # IPMapEntries
    .long	($ip2state$main_program)@IMGREL         # IPToStateXData
    .long	936                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
main_program:
; Begin main_program
    .long	-1                              # ToState
    .long	"?dtor$123@?0?main_program@4HA"@IMGREL  # Action
    .long	0                               # ToState
    .long	"?dtor$122@?0?main_program@4HA"@IMGREL  # Action
    .long	1                               # ToState
    .long	"?dtor$121@?0?main_program@4HA"@IMGREL  # Action
    .long	2                               # ToState
    .long	"?dtor$120@?0?main_program@4HA"@IMGREL  # Action
    .long	3                               # ToState
    .long	"?dtor$119@?0?main_program@4HA"@IMGREL  # Action
    .long	4                               # ToState
    .long	"?dtor$118@?0?main_program@4HA"@IMGREL  # Action
    .long	5                               # ToState
    .long	"?dtor$116@?0?main_program@4HA"@IMGREL  # Action
    .long	5                               # ToState
    .long	"?dtor$84@?0?main_program@4HA"@IMGREL   # Action
    .long	4                               # ToState
    .long	"?dtor$40@?0?main_program@4HA"@IMGREL   # Action
    .long	1                               # ToState
    .long	"?dtor$22@?0?main_program@4HA"@IMGREL   # Action
main_program:
; Begin main_program
    .long	.Lfunc_begin4@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp86@IMGREL+1                # IP
    .long	0                               # ToState
    .long	.Ltmp84@IMGREL+1                # IP
    .long	1                               # ToState
    .long	.Ltmp82@IMGREL+1                # IP
    .long	9                               # ToState
    .long	.Ltmp34@IMGREL+1                # IP
    .long	1                               # ToState
    .long	.Ltmp36@IMGREL+1                # IP
    .long	2                               # ToState
    .long	.Ltmp38@IMGREL+1                # IP
    .long	3                               # ToState
    .long	.Ltmp78@IMGREL+1                # IP
    .long	4                               # ToState
    .long	.Ltmp42@IMGREL+1                # IP
    .long	8                               # ToState
    .long	.Ltmp74@IMGREL+1                # IP
    .long	5                               # ToState
    .long	.Ltmp62@IMGREL+1                # IP
    .long	7                               # ToState
    .long	.Ltmp68@IMGREL+1                # IP
    .long	6                               # ToState
    .long	.Ltmp67@IMGREL+1                # IP
    .long	-1                              # ToState
    .text
; End main_program

    .section	.text,"xr",discard,"?sync_with_stdio@ios_base@std@@SA_N_N@Z"
.globl	"?sync_with_stdio@ios_base@std@@SA_N_N@Z" # -- Begin function ?sync_with_stdio@ios_base@std@@SA_N_N@Z
    .p2align	4, 0x90
    "?sync_with_stdio@ios_base@std@@SA_N_N@Z": # @"?sync_with_stdio@ios_base@std@@SA_N_N@Z"
    .seh_proc "?sync_with_stdio@ios_base@std@@SA_N_N@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    and	cl, 1
    mov	byte ptr [rsp + 55], cl
    lea	rcx, [rsp + 48]
    mov	edx, 2
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
    mov	al, byte ptr [rip + "?_Sync@ios_base@std@@0_NA"]
    and	al, 1
    mov	byte ptr [rsp + 47], al
    mov	al, byte ptr [rsp + 55]
    and	al, 1
    mov	byte ptr [rip + "?_Sync@ios_base@std@@0_NA"], al
    mov	al, byte ptr [rsp + 47]
    mov	byte ptr [rsp + 46], al         # 1-byte Spill
    lea	rcx, [rsp + 48]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    mov	al, byte ptr [rsp + 46]         # 1-byte Reload
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z"
.globl	"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z" # -- Begin function ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z
    .p2align	4, 0x90
    "?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z": # @"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z"
    .seh_proc "?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 80], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z"
.globl	"??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z" # -- Begin function ??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
    .p2align	4, 0x90
    "??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z": # @"??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z"
    .seh_proc "??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rcx]                            ; Move 64-bit value
    movsxd	r8, dword ptr [r8 + 4]                      ; Move 32-bit value
    add	r8, 0
    add	rcx, r8
    call	rax                                           ; Function call
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z"
.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
    .p2align	4, 0x90
    "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z"
    .seh_proc "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rdx, dword ptr [rdx + 4]                    ; Move 32-bit value
    add	rdx, 0
    add	rcx, rdx
    call	rax                                           ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?fixed@std@@YAAEAVios_base@1@AEAV21@@Z"
.globl	"?fixed@std@@YAAEAVios_base@1@AEAV21@@Z" # -- Begin function ?fixed@std@@YAAEAVios_base@1@AEAV21@@Z
    .p2align	4, 0x90
    "?fixed@std@@YAAEAVios_base@1@AEAV21@@Z": # @"?fixed@std@@YAAEAVios_base@1@AEAV21@@Z"
    .seh_proc "?fixed@std@@YAAEAVios_base@1@AEAV21@@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	edx, 8192
    mov	r8d, 12288
    call	"?setf@ios_base@std@@QEAAHHH@Z"               ; Function call
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z"
.globl	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z" # -- Begin function ??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z
    .p2align	4, 0x90
    "??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z": # @"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z"
    .seh_proc "??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rsp + 52], eax                      ; Move 32-bit value
    lea	rdx, [rsp + 52]
    call	"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	edx, dword ptr [rsp + 52]                      ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	dword ptr [rcx], edx                           ; Move 32-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z"
.globl	"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z" # -- Begin function ??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z
    .p2align	4, 0x90
    "??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z": # @"??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z"
    .seh_proc "??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??Bios_base@std@@QEBA_NXZ"
.globl	"??Bios_base@std@@QEBA_NXZ"     # -- Begin function ??Bios_base@std@@QEBA_NXZ
    .p2align	4, 0x90
    "??Bios_base@std@@QEBA_NXZ":            # @"??Bios_base@std@@QEBA_NXZ"
    .seh_proc "??Bios_base@std@@QEBA_NXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?fail@ios_base@std@@QEBA_NXZ"                ; Function call
    xor	al, -1
    and	al, 1
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@UPoint@@@std@@QEAA@XZ"
.globl	"??0?$allocator@UPoint@@@std@@QEAA@XZ" # -- Begin function ??0?$allocator@UPoint@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@UPoint@@@std@@QEAA@XZ": # @"??0?$allocator@UPoint@@@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@UPoint@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z"
.globl	"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z" # -- Begin function ??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z
    .p2align	4, 0x90
    "??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z": # @"??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z"
    .seh_proc "??0?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@_KAEBV?$allocator@UPoint@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z"
.globl	"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z" # -- Begin function ??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z
    .p2align	4, 0x90
    "??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z": # @"??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z"
    .seh_proc "??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    imul	rcx, qword ptr [rsp + 16], 24
    add	rax, rcx
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ": # @"??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rsp + 47]
    call	"??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
.globl	"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" # -- Begin function ?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ": # @"?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .seh_proc "?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
.globl	"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ" # -- Begin function ?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ": # @"?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .seh_proc "?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ"
.globl	"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ" # -- Begin function ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ
    .p2align	4, 0x90
    "??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ": # @"??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ"
    .seh_proc "??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z"
.globl	"??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z" # -- Begin function ??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z": # @"??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z"
    .seh_proc "??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    lea	rdx, [rsp + 64]
    call	"??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    lea	rcx, [rsp + 56]
    call	"??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	r8, [rsp + 64]
    add	r8, 8
    lea	rdx, [rsp + 56]
    call	"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
.globl	"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ": # @"??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
.globl	"?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ" # -- Begin function ?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ": # @"?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
    .seh_proc "?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
.globl	"?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ" # -- Begin function ?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ": # @"?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
    .seh_proc "?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z"
.globl	"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z" # -- Begin function ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z
    .p2align	4, 0x90
    "??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z": # @"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z"
    .seh_proc "??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@$0A@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@0AEBV?$allocator@UPoint@@@1@@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 128], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 120], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	dl, byte ptr [rsp + 103]
    call	"??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z" ; Function call
    lea	rcx, [rsp + 128]
    lea	rdx, [rsp + 120]
    call	"??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z" ; Function call
    lea	rcx, [rsp + 88]
    lea	rdx, [rsp + 128]
    call	"??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z" ; Function call
    lea	rcx, [rsp + 80]
    lea	rdx, [rsp + 120]
    call	"??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Convert_size@_K_K@std@@YA_K_K@Z"         ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    lea	r8, [rsp + 88]
    lea	r9, [rsp + 80]
    call	"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
.globl	"??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ": # @"??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rsp + 47]
    call	"??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@H@std@@QEAA@XZ"
.globl	"??0?$allocator@H@std@@QEAA@XZ" # -- Begin function ??0?$allocator@H@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@H@std@@QEAA@XZ":        # @"??0?$allocator@H@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@H@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z"
.globl	"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z" # -- Begin function ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z
    .p2align	4, 0x90
    "??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z": # @"??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z"
    .seh_proc "??0?$vector@HV?$allocator@H@std@@@std@@QEAA@_KAEBV?$allocator@H@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
.globl	"?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" # -- Begin function ?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ": # @"?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
    .seh_proc "?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    mov	ecx, 24
    cqo
    idiv	rcx
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z"
.globl	"??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z" # -- Begin function ??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z
    .p2align	4, 0x90
    "??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z": # @"??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z"
    .seh_proc "??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    lea	rdx, [rsp + 40]
    call	"??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rax, 32
    add	rax, 24
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z"
.globl	"??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z" # -- Begin function ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
    .p2align	4, 0x90
    "??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z": # @"??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z"
    .seh_proc "??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    shl	rcx, 2
    add	rax, rcx
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ"
.globl	"??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ": # @"??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@O@std@@QEAA@XZ"
.globl	"??0?$allocator@O@std@@QEAA@XZ" # -- Begin function ??0?$allocator@O@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@O@std@@QEAA@XZ":        # @"??0?$allocator@O@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@O@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z"
.globl	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z" # -- Begin function ??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z
    .p2align	4, 0x90
    "??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z": # @"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z"
    .seh_proc "??0?$vector@OV?$allocator@O@std@@@std@@QEAA@_KAEBOAEBV?$allocator@O@1@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    call	"??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
.globl	"??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" # -- Begin function ??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z": # @"??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
    .seh_proc "??0?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@_KAEBV?$vector@OV?$allocator@O@std@@@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    call	"??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z"
.globl	"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z" # -- Begin function ??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z
    .p2align	4, 0x90
    "??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z": # @"??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z"
    .seh_proc "??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    imul	rcx, qword ptr [rsp + 16], 24
    add	rax, rcx
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
.globl	"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z" # -- Begin function ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
    .p2align	4, 0x90
    "??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z": # @"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .Lfunc_begin5:
    .seh_proc "??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 160
    .seh_stackalloc 160
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 24], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 8], rcx                       ; Move 64-bit value
    mov	dword ptr [rbp + 4], 0                         ; Move 32-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    call	"?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z" ; Function call
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, 0                                         ; Compare values
    jle	.LBB94_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, qword ptr [rbp - 8]                       ; Compare values
    jg	.LBB94_3                                        ; Jump instruction
    .LBB94_2:
    xor	eax, eax
# kill: def $rax killed $eax
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB94_4                                       ; Jump instruction
    .LBB94_3:
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    sub	rax, qword ptr [rbp - 8]
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    .LBB94_4:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 8]                       ; Move 64-bit value
    lea	rcx, [rbp - 32]
    call	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
    lea	rcx, [rbp - 32]
    call	"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB94_6                                       ; Jump instruction
# %bb.5:
    mov	eax, dword ptr [rbp + 4]                       ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp + 4], eax                       ; Move 32-bit value
    jmp	.LBB94_31                                      ; Jump instruction
    .LBB94_6:
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 448
    cmp	eax, 64                                        ; Compare values
    je	.LBB94_14                                       ; Jump instruction
# %bb.7:
    jmp	.LBB94_8                                       ; Jump instruction
    .LBB94_8:                               # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rbp - 16]                      ; Compare values
    jge	.LBB94_13                                      ; Jump instruction
# %bb.9:                                #   in Loop: Header=BB94_8 Depth=1
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	dl, al
    .Ltmp90:
    call	"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z" ; Function call
    .Ltmp91:
    mov	dword ptr [rbp - 44], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB94_10                                      ; Jump instruction
    .LBB94_10:                              #   in Loop: Header=BB94_8 Depth=1
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rbp - 44]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB94_11                                      ; Jump instruction
    jmp	.LBB94_12                                      ; Jump instruction
    .LBB94_11:
    mov	eax, dword ptr [rbp + 4]                       ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp + 4], eax                       ; Move 32-bit value
    jmp	.LBB94_13                                      ; Jump instruction
    .LBB94_12:                              #   in Loop: Header=BB94_8 Depth=1
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    jmp	.LBB94_8                                       ; Jump instruction
    .LBB94_13:
    jmp	.LBB94_14                                      ; Jump instruction
    .LBB94_14:
    cmp	dword ptr [rbp + 4], 0                         ; Compare values
    jne	.LBB94_18                                      ; Jump instruction
# %bb.15:
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	r8, qword ptr [rbp - 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 16]                      ; Move 64-bit value
    .Ltmp92:
    call	"?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z" ; Function call
    .Ltmp93:
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB94_16                                      ; Jump instruction
    .LBB94_16:
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, qword ptr [rbp - 8]                       ; Compare values
    je	.LBB94_18                                       ; Jump instruction
# %bb.17:
    mov	eax, dword ptr [rbp + 4]                       ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp + 4], eax                       ; Move 32-bit value
    .LBB94_18:
    cmp	dword ptr [rbp + 4], 0                         ; Compare values
    jne	.LBB94_30                                      ; Jump instruction
# %bb.19:
    jmp	.LBB94_20                                      ; Jump instruction
    .LBB94_20:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rbp - 16]                      ; Compare values
    jge	.LBB94_29                                      ; Jump instruction
# %bb.21:                               #   in Loop: Header=BB94_20 Depth=1
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	dl, al
    .Ltmp94:
    call	"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z" ; Function call
    .Ltmp95:
    mov	dword ptr [rbp - 68], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB94_26                                      ; Jump instruction
    .LBB94_24:                              # Block address taken
    $ehgcr_94_24:
    jmp	.LBB94_25                                      ; Jump instruction
    .LBB94_25:
    jmp	.LBB94_31                                      ; Jump instruction
    .LBB94_26:                              #   in Loop: Header=BB94_20 Depth=1
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rbp - 68]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB94_27                                      ; Jump instruction
    jmp	.LBB94_28                                      ; Jump instruction
    .LBB94_27:
    mov	eax, dword ptr [rbp + 4]                       ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp + 4], eax                       ; Move 32-bit value
    jmp	.LBB94_29                                      ; Jump instruction
    .LBB94_28:                              #   in Loop: Header=BB94_20 Depth=1
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    jmp	.LBB94_20                                      ; Jump instruction
    .LBB94_29:
    jmp	.LBB94_30                                      ; Jump instruction
    .LBB94_30:
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    xor	eax, eax
    mov	edx, eax
    call	"?width@ios_base@std@@QEAA_J_J@Z"             ; Function call
    jmp	.LBB94_25                                      ; Jump instruction
    .LBB94_31:
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp + 4]                       ; Move 32-bit value
    .Ltmp98:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp99:
    jmp	.LBB94_32                                      ; Jump instruction
    .LBB94_32:
    mov	rax, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 32]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 160
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z")@IMGREL
    .section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$22@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA":
    .seh_proc "?catch$22@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB94_22:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp96:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp97:
    jmp	.LBB94_23                                      ; Jump instruction
    .LBB94_23:
    lea	rax, [rip + .LBB94_24]
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z")@IMGREL
    .section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$33@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA":
    .seh_proc "?dtor$33@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA"
    .LBB94_33:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 32]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end5:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .p2align	2, 0x0
    "$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z":
    .long	429065506                       # MagicNumber
    .long	3                               # MaxState
    .long	("$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z")@IMGREL # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z")@IMGREL # IPToStateXData
    .long	152                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z":
    .long	-1                              # ToState
    .long	"?dtor$33@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	0                               # Action
    "$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$22@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z":
    .long	.Lfunc_begin5@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp90@IMGREL+1                # IP
    .long	1                               # ToState
    .long	.Ltmp98@IMGREL+1                # IP
    .long	0                               # ToState
    .long	.Ltmp99@IMGREL+1                # IP
    .long	-1                              # ToState
    .long	"?catch$22@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z
    .p2align	4, 0x90
    "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .Lfunc_begin6:
    .seh_proc "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 88], -2                       ; Move 64-bit value
    mov	dword ptr [rbp + 84], edx                      ; Move 32-bit value
    mov	qword ptr [rbp + 72], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx       # 8-byte Spill ; Move 64-bit value
    mov	dword ptr [rbp + 68], 0                        ; Move 32-bit value
    lea	rcx, [rbp + 48]
    call	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
    lea	rcx, [rbp + 48]
    call	"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB95_1                                       ; Jump instruction
    jmp	.LBB95_15                                      ; Jump instruction
    .LBB95_1:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    lea	rdx, [rbp + 24]
    mov	qword ptr [rbp - 40], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    .Ltmp100:
    call	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp101:
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB95_2                                       ; Jump instruction
    .LBB95_2:
    lea	rcx, [rbp + 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 3584
    mov	dword ptr [rbp + 20], eax                      ; Move 32-bit value
    cmp	dword ptr [rbp + 20], 1024                     ; Compare values
    je	.LBB95_4                                        ; Jump instruction
# %bb.3:
    cmp	dword ptr [rbp + 20], 2048                     ; Compare values
    jne	.LBB95_6                                       ; Jump instruction
    .LBB95_4:
    mov	eax, dword ptr [rbp + 84]                      ; Move 32-bit value
    mov	dword ptr [rbp + 16], eax                      ; Move 32-bit value
    jmp	.LBB95_7                                       ; Jump instruction
    .LBB95_6:
    mov	eax, dword ptr [rbp + 84]                      ; Move 32-bit value
    mov	dword ptr [rbp + 16], eax                      ; Move 32-bit value
    .LBB95_7:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	eax, dword ptr [rbp + 16]                      ; Move 32-bit value
    mov	dword ptr [rbp - 72], eax       # 4-byte Spill ; Move 32-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 65], al         # 1-byte Spill
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rdx, rax
    lea	rcx, [rbp - 16]
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z" ; Function call
    mov	r10d, dword ptr [rbp - 72]      # 4-byte Reload ; Move 32-bit value
    mov	dl, byte ptr [rbp - 65]         # 1-byte Reload
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    .Ltmp102:
    mov	rax, rsp
    mov	dword ptr [rax + 40], r10d                     ; Move 32-bit value
    mov	byte ptr [rax + 32], dl
    mov	rdx, rbp
    call	"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z" ; Function call
    .Ltmp103:
    jmp	.LBB95_12                                      ; Jump instruction
    .LBB95_10:                              # Block address taken
    $ehgcr_95_10:
    jmp	.LBB95_11                                      ; Jump instruction
    .LBB95_11:
    jmp	.LBB95_15                                      ; Jump instruction
    .LBB95_12:
    mov	rcx, rbp
    call	"?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB95_13                                      ; Jump instruction
    jmp	.LBB95_14                                      ; Jump instruction
    .LBB95_13:
    mov	eax, dword ptr [rbp + 68]                      ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp + 68], eax                      ; Move 32-bit value
    .LBB95_14:
    jmp	.LBB95_11                                      ; Jump instruction
    .LBB95_15:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp + 68]                      ; Move 32-bit value
    .Ltmp106:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp107:
    jmp	.LBB95_16                                      ; Jump instruction
    .LBB95_16:
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z")@IMGREL
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA":
    .seh_proc "?dtor$5@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"
    .LBB95_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$8@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA":
    .seh_proc "?catch$8@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB95_8:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp104:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp105:
    jmp	.LBB95_9                                       ; Jump instruction
    .LBB95_9:
    lea	rax, [rip + .LBB95_10]
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z")@IMGREL
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$17@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA":
    .seh_proc "?dtor$17@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"
    .LBB95_17:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end6:
    .seh_handlerdata
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .p2align	2, 0x0
    "$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z":
    .long	429065506                       # MagicNumber
    .long	4                               # MaxState
    .long	("$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z")@IMGREL # TryBlockMap
    .long	6                               # IPMapEntries
    .long	("$ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z")@IMGREL # IPToStateXData
    .long	216                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z":
    .long	-1                              # ToState
    .long	"?dtor$17@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	"?dtor$5@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"@IMGREL # Action
    "$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$8@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"@IMGREL # Handler
    .long	72                              # ParentFrameOffset
    "$ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z":
    .long	.Lfunc_begin6@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp100@IMGREL+1               # IP
    .long	3                               # ToState
    .long	.Ltmp102@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp106@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp107@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$8@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z"
.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
    .p2align	4, 0x90
    "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z"
    .seh_proc "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	qword ptr [rsp + 48]                          ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"
.globl	"??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z" # -- Begin function ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
    .p2align	4, 0x90
    "??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z": # @"??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"
    .seh_proc "??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rax, 0
    add	rcx, rax
    mov	edx, 10
    call	"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	dl, al
    call	"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ" ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
.globl	"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z" # -- Begin function ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z
    .p2align	4, 0x90
    "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z": # @"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .Lfunc_begin7:
    .seh_proc "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 88], -2                       ; Move 64-bit value
    movsd	qword ptr [rbp + 80], xmm1                   ; Load 64-bit double
    mov	qword ptr [rbp + 72], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx       # 8-byte Spill ; Move 64-bit value
    mov	dword ptr [rbp + 68], 0                        ; Move 32-bit value
    lea	rcx, [rbp + 48]
    call	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
    lea	rcx, [rbp + 48]
    call	"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB98_1                                       ; Jump instruction
    jmp	.LBB98_11                                      ; Jump instruction
    .LBB98_1:
    mov	rcx, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    lea	rdx, [rbp + 24]
    mov	qword ptr [rbp - 32], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    .Ltmp108:
    call	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp109:
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB98_2                                       ; Jump instruction
    .LBB98_2:
    lea	rcx, [rbp + 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 80]      # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 72], xmm0      # 8-byte Spill ; Load 64-bit double
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    mov	rcx, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 57], al         # 1-byte Spill
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rdx, rax
    lea	rcx, [rbp - 8]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z" ; Function call
    movsd	xmm0, qword ptr [rbp - 72]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    mov	dl, byte ptr [rbp - 57]         # 1-byte Reload
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 40]        # 8-byte Reload ; Move 64-bit value
    .Ltmp110:
    mov	rax, rsp
    movsd	qword ptr [rax + 40], xmm0                   ; Load 64-bit double
    mov	byte ptr [rax + 32], dl
    lea	rdx, [rbp + 8]
    call	"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z" ; Function call
    .Ltmp111:
    jmp	.LBB98_7                                       ; Jump instruction
    .LBB98_5:                               # Block address taken
    $ehgcr_98_5:
    jmp	.LBB98_6                                       ; Jump instruction
    .LBB98_6:
    jmp	.LBB98_11                                      ; Jump instruction
    .LBB98_7:
    lea	rcx, [rbp + 8]
    call	"?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB98_8                                       ; Jump instruction
    jmp	.LBB98_10                                      ; Jump instruction
    .LBB98_8:
    mov	eax, dword ptr [rbp + 68]                      ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp + 68], eax                      ; Move 32-bit value
    jmp	.LBB98_10                                      ; Jump instruction
    .LBB98_10:
    jmp	.LBB98_6                                       ; Jump instruction
    .LBB98_11:
    mov	rcx, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp + 68]                      ; Move 32-bit value
    .Ltmp114:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp115:
    jmp	.LBB98_12                                      ; Jump instruction
    .LBB98_12:
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z")@IMGREL
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$3@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA":
    .seh_proc "?catch$3@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB98_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp112:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp113:
    jmp	.LBB98_4                                       ; Jump instruction
    .LBB98_4:
    lea	rax, [rip + .LBB98_5]
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z")@IMGREL
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$9@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA":
    .seh_proc "?dtor$9@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"
    .LBB98_9:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA":
    .seh_proc "?dtor$13@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"
    .LBB98_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end7:
    .seh_handlerdata
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .p2align	2, 0x0
    "$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z":
    .long	429065506                       # MagicNumber
    .long	4                               # MaxState
    .long	("$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z")@IMGREL # TryBlockMap
    .long	6                               # IPMapEntries
    .long	("$ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z")@IMGREL # IPToStateXData
    .long	216                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	"?dtor$9@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"@IMGREL # Action
    "$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$3@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"@IMGREL # Handler
    .long	72                              # ParentFrameOffset
    "$ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z":
    .long	.Lfunc_begin7@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp108@IMGREL+1               # IP
    .long	3                               # ToState
    .long	.Ltmp110@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp114@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp115@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$3@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .section	.text,"xr",discard,"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ"
.globl	"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ" # -- Begin function ??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ": # @"??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ"
    .seh_proc "??1?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
.globl	"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ" # -- Begin function ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ": # @"??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ": # @"??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ": # @"??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$set@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
.globl	"??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
    .p2align	4, 0x90
    "??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
    .seh_proc "??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
    xor	eax, eax
    mov	edx, eax
    call	"??0id@locale@std@@QEAA@_K@Z"                 ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0id@locale@std@@QEAA@_K@Z"
.globl	"??0id@locale@std@@QEAA@_K@Z"   # -- Begin function ??0id@locale@std@@QEAA@_K@Z
    .p2align	4, 0x90
    "??0id@locale@std@@QEAA@_K@Z":          # @"??0id@locale@std@@QEAA@_K@Z"
    .seh_proc "??0id@locale@std@@QEAA@_K@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
.globl	"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
    .p2align	4, 0x90
    "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
    .seh_proc "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "?id@?$numpunct@D@std@@2V0locale@2@A"]
    xor	eax, eax
    mov	edx, eax
    call	"??0id@locale@std@@QEAA@_K@Z"                 ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
.globl	"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ" # -- Begin function ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
    .p2align	4, 0x90
    "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ": # @"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
    .seh_proc "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
    xor	eax, eax
    mov	edx, eax
    call	"??0id@locale@std@@QEAA@_K@Z"                 ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,cosl
.globl	cosl                            # -- Begin function cosl
    .p2align	4, 0x90
    cosl:                                   # @cosl
    .seh_proc cosl
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	cos                                           ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,sinl
.globl	sinl                            # -- Begin function sinl
    .p2align	4, 0x90
    sinl:                                   # @sinl
    .seh_proc sinl
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	sin                                           ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,sqrtl
.globl	sqrtl                           # -- Begin function sqrtl
    .p2align	4, 0x90
    sqrtl:                                  # @sqrtl
    .seh_proc sqrtl
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	sqrt                                          ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,acosl
.globl	acosl                           # -- Begin function acosl
    .p2align	4, 0x90
    acosl:                                  # @acosl
    .seh_proc acosl
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    movsd	qword ptr [rsp + 32], xmm0                   ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp + 32]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	acos                                          ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?setf@ios_base@std@@QEAAHHH@Z"
.globl	"?setf@ios_base@std@@QEAAHHH@Z" # -- Begin function ?setf@ios_base@std@@QEAAHHH@Z
    .p2align	4, 0x90
    "?setf@ios_base@std@@QEAAHHH@Z":        # @"?setf@ios_base@std@@QEAAHHH@Z"
    .seh_proc "?setf@ios_base@std@@QEAAHHH@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	dword ptr [rsp + 20], r8d                      ; Move 32-bit value
    mov	dword ptr [rsp + 16], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	ecx, dword ptr [rax + 24]                      ; Move 32-bit value
    mov	dword ptr [rsp + 4], ecx                       ; Move 32-bit value
    mov	ecx, dword ptr [rsp + 4]                       ; Move 32-bit value
    mov	edx, dword ptr [rsp + 20]                      ; Move 32-bit value
    xor	edx, -1
    and	ecx, edx
    mov	edx, dword ptr [rsp + 16]                      ; Move 32-bit value
    and	edx, dword ptr [rsp + 20]
    and	edx, 65535
    or	ecx, edx
    mov	dword ptr [rax + 24], ecx                      ; Move 32-bit value
    mov	eax, dword ptr [rsp + 4]                       ; Move 32-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?fail@ios_base@std@@QEBA_NXZ"
.globl	"?fail@ios_base@std@@QEBA_NXZ"  # -- Begin function ?fail@ios_base@std@@QEBA_NXZ
    .p2align	4, 0x90
    "?fail@ios_base@std@@QEBA_NXZ":         # @"?fail@ios_base@std@@QEBA_NXZ"
    .seh_proc "?fail@ios_base@std@@QEBA_NXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?rdstate@ios_base@std@@QEBAHXZ"              ; Function call
    and	eax, 6
    cmp	eax, 0                                         ; Compare values
    setne	al
    and	al, 1
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?rdstate@ios_base@std@@QEBAHXZ"
.globl	"?rdstate@ios_base@std@@QEBAHXZ" # -- Begin function ?rdstate@ios_base@std@@QEBAHXZ
    .p2align	4, 0x90
    "?rdstate@ios_base@std@@QEBAHXZ":       # @"?rdstate@ios_base@std@@QEBAHXZ"
    .seh_proc "?rdstate@ios_base@std@@QEBAHXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	eax, dword ptr [rax + 16]                      ; Move 32-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ": # @"??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
.globl	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" # -- Begin function ?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ": # @"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
    .seh_proc "?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
.globl	"??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" # -- Begin function ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z": # @"??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .seh_proc "??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	r8, qword ptr [rax + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
.globl	"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" # -- Begin function ?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ": # @"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .seh_proc "?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Orphan_all@_Container_base0@std@@QEAAXXZ"
.globl	"?_Orphan_all@_Container_base0@std@@QEAAXXZ" # -- Begin function ?_Orphan_all@_Container_base0@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Orphan_all@_Container_base0@std@@QEAAXXZ": # @"?_Orphan_all@_Container_base0@std@@QEAAXXZ"
    .seh_proc "?_Orphan_all@_Container_base0@std@@QEAAXXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z"
.globl	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z" # -- Begin function ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z
    .p2align	4, 0x90
    "??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z": # @"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z"
    .seh_proc "??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    .LBB119_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    setne	al
    xor	al, -1
    test	al, 1                                         ; Test values
    jne	.LBB119_2                                      ; Jump instruction
    jmp	.LBB119_3                                      ; Jump instruction
    .LBB119_2:                              #   in Loop: Header=BB119_1 Depth=1
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rax + 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    lea	rcx, [rsp + 64]
    call	"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z" ; Function call
    mov	rdx, rax
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z" ; Function call
    jmp	.LBB119_1                                      ; Jump instruction
    .LBB119_3:
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
.globl	"??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z" # -- Begin function ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z
    .p2align	4, 0x90
    "??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z": # @"??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
    .seh_proc "??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rcx, 8
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rcx, 16
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8d, 1
    call	"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
.globl	"??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z" # -- Begin function ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z
    .p2align	4, 0x90
    "??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z": # @"??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
    .seh_proc "??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rdx, 32
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z"
.globl	"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z" # -- Begin function ??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z
    .p2align	4, 0x90
    "??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z": # @"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z"
    .seh_proc "??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z"
.globl	"??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z" # -- Begin function ??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z
    .p2align	4, 0x90
    "??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z": # @"??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z"
    .seh_proc "??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z"
.globl	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" # -- Begin function ??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z": # @"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z"
    .seh_proc "??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
.globl	"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" # -- Begin function ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z": # @"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
    .seh_proc "?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rdx, 6
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
.globl	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z" # -- Begin function ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
    .p2align	4, 0x90
    "??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z": # @"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .Lfunc_begin8:
    .seh_proc "??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    cmp	qword ptr [rbp - 16], 4096                     ; Compare values
    jb	.LBB126_3                                       ; Jump instruction
# %bb.1:
    .Ltmp116:
    lea	rcx, [rbp - 24]
    lea	rdx, [rbp - 16]
    call	"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z" ; Function call
    .Ltmp117:
    jmp	.LBB126_2                                      ; Jump instruction
    .LBB126_2:
    jmp	.LBB126_3                                      ; Jump instruction
    .LBB126_3:
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    nop
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0???$_Deallocate@$0BA@@std@@YAXPEAX_K@Z@4HA":
    .seh_proc "?dtor$4@?0???$_Deallocate@$0BA@@std@@YAXPEAX_K@Z@4HA"
    .LBB126_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end8:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$4@?0???$_Deallocate@$0BA@@std@@YAXPEAX_K@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z":
    .long	.Lfunc_begin8@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp116@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp117@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .section	.text,"xr",discard,"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
.globl	"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z" # -- Begin function ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
    .p2align	4, 0x90
    "?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z": # @"?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
    .seh_proc "?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 39
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rax - 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], 8                        ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    sub	rax, qword ptr [rsp + 56]
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
# %bb.1:
    cmp	qword ptr [rsp + 40], 8                        ; Compare values
    jb	.LBB127_4                                       ; Jump instruction
# %bb.2:
    cmp	qword ptr [rsp + 40], 39                       ; Compare values
    ja	.LBB127_4                                       ; Jump instruction
# %bb.3:
    jmp	.LBB127_6                                      ; Jump instruction
    .LBB127_4:
    jmp	.LBB127_5                                      ; Jump instruction
    .LBB127_5:
    call	_invalid_parameter_noinfo_noreturn            ; Function call
    .LBB127_6:
    jmp	.LBB127_7                                      ; Jump instruction
    .LBB127_7:
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ": # @"??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
.globl	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" # -- Begin function ?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ": # @"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
    .seh_proc "?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
.globl	"??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" # -- Begin function ??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z": # @"??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .seh_proc "??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	r8, qword ptr [rax + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
.globl	"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" # -- Begin function ?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ": # @"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .seh_proc "?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z"
.globl	"??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z" # -- Begin function ??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z
    .p2align	4, 0x90
    "??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z": # @"??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z"
    .seh_proc "??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    .LBB133_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    setne	al
    xor	al, -1
    test	al, 1                                         ; Test values
    jne	.LBB133_2                                      ; Jump instruction
    jmp	.LBB133_3                                      ; Jump instruction
    .LBB133_2:                              #   in Loop: Header=BB133_1 Depth=1
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rax + 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    lea	rcx, [rsp + 64]
    call	"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z" ; Function call
    mov	rdx, rax
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z" ; Function call
    jmp	.LBB133_1                                      ; Jump instruction
    .LBB133_3:
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
.globl	"??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z" # -- Begin function ??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z
    .p2align	4, 0x90
    "??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z": # @"??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
    .seh_proc "??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rcx, 8
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rcx, 16
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8d, 1
    call	"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
.globl	"??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z" # -- Begin function ??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z
    .p2align	4, 0x90
    "??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z": # @"??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
    .seh_proc "??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rdx, 32
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z"
.globl	"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z" # -- Begin function ??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z
    .p2align	4, 0x90
    "??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z": # @"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z"
    .seh_proc "??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z"
.globl	"??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z" # -- Begin function ??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z
    .p2align	4, 0x90
    "??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z": # @"??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z"
    .seh_proc "??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z"
.globl	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" # -- Begin function ??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z": # @"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z"
    .seh_proc "??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
.globl	"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" # -- Begin function ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z": # @"?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
    .seh_proc "?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    imul	rdx, qword ptr [rsp + 48], 56
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z": # @"??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@UPoint@@@std@@QEAA@XZ"        ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z"
.globl	"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z" # -- Begin function ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
    .p2align	4, 0x90
    "?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z": # @"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z"
    .seh_proc "?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ": # @"??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ"
.globl	"?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ": # @"?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ"
    .seh_proc "?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB144_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    mov	r8d, 24
    cqo
    idiv	r8
    mov	r8, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    .LBB144_2:
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ"
.globl	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" # -- Begin function ?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ": # @"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ"
    .seh_proc "?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z"
.globl	"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z" # -- Begin function ??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z": # @"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .seh_proc "??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z"
.globl	"?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z" # -- Begin function ?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z": # @"?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z"
    .seh_proc "?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    imul	rdx, qword ptr [rsp + 48], 24
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
.globl	"??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z" # -- Begin function ??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z
    .p2align	4, 0x90
    "??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z": # @"??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
    .seh_proc "??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    je	.LBB149_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB149_3                                      ; Jump instruction
    .LBB149_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB149_3:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
.globl	"??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z" # -- Begin function ??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z
    .p2align	4, 0x90
    "??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z": # @"??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
    .seh_proc "??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 24
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
.globl	"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z" # -- Begin function ??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z
    .p2align	4, 0x90
    "??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z": # @"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .Lfunc_begin9:
    .seh_proc "??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 8], rax                       ; Move 64-bit value
    mov	qword ptr [rbp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    mov	r8d, 24
    cqo
    idiv	r8
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    mov	r8d, 24
    cqo
    idiv	r8
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jne	.LBB151_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ" ; Function call
    .LBB151_2:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z" ; Function call
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 48]
    call	"??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    imul	rcx, qword ptr [rbp - 24], 24
    add	rax, rcx
    add	rax, 24
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    imul	rax, qword ptr [rbp - 24], 24
    add	rcx, rax
    call	"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z" ; Function call
    mov	r8, qword ptr [rbp - 96]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    call	"??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    imul	rcx, qword ptr [rbp - 24], 24
    add	rax, rcx
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB151_5                                      ; Jump instruction
# %bb.3:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp122:
    call	"??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    .Ltmp123:
    jmp	.LBB151_4                                      ; Jump instruction
    .LBB151_4:
    jmp	.LBB151_9                                      ; Jump instruction
    .LBB151_5:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp118:
    call	"??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    .Ltmp119:
    jmp	.LBB151_6                                      ; Jump instruction
    .LBB151_6:
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    lea	rcx, [rcx + 2*rcx]
    lea	r8, [rax + 8*rcx + 24]
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 24]                      ; Move 64-bit value
    .Ltmp120:
    call	"??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    .Ltmp121:
    jmp	.LBB151_8                                      ; Jump instruction
    .LBB151_8:
    jmp	.LBB151_9                                      ; Jump instruction
    .LBB151_9:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    imul	rcx, qword ptr [rbp - 24], 24
    add	rax, rcx
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$7@?0???$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z@4HA":
    .seh_proc "?catch$7@?0???$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB151_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z" ; Function call
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .Lfunc_end9:
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z")@IMGREL # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z":
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    "$tryMap$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z":
    .long	0                               # TryLow
    .long	0                               # TryHigh
    .long	1                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$7@?0???$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z":
    .long	.Lfunc_begin9@IMGREL            # IP
    .long	-1                              # ToState
    .long	.Ltmp122@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp121@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$7@?0???$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z@4HA"@IMGREL # IP
    .long	1                               # ToState
    .section	.text,"xr",discard,"??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .section	.text,"xr",discard,"??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z"
.globl	"??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z" # -- Begin function ??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z": # @"??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z"
    .seh_proc "??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z"
.globl	"?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z" # -- Begin function ?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z
    .p2align	4, 0x90
    "?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z": # @"?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z"
    .seh_proc "?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
.globl	"?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ": # @"?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ"
.globl	"?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ
    .p2align	4, 0x90
    "?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ"
    .seh_proc "?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z"
.globl	"?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z" # -- Begin function ?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z
    .p2align	4, 0x90
    "?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z": # @"?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z"
    .seh_proc "?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    call	"?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    shr	rdx
    sub	rcx, rdx
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB156_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB156_5                                      ; Jump instruction
    .LBB156_2:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    shr	rcx
    add	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    jae	.LBB156_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB156_5                                      ; Jump instruction
    .LBB156_4:
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB156_5:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z"
.globl	"??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z" # -- Begin function ??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z": # @"??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z"
    .seh_proc "??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z"
.globl	"??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z" # -- Begin function ??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z
    .p2align	4, 0x90
    "??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z": # @"??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z"
    .seh_proc "??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z"
.globl	"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z" # -- Begin function ??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z
    .p2align	4, 0x90
    "??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z": # @"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z"
    .seh_proc "??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
.globl	"??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z" # -- Begin function ??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z": # @"??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .seh_proc "??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 88]
    call	"??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z" ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z" ; Function call
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    sub	rax, rcx
    mov	ecx, 24
    cqo
    idiv	rcx
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    imul	rcx, rcx, 24
    add	rax, rcx
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z"
.globl	"?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z" # -- Begin function ?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z
    .p2align	4, 0x90
    "?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z": # @"?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z"
    .seh_proc "?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB161_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    mov	r8d, 24
    cqo
    idiv	r8
    mov	r8, rax
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z" ; Function call
    .LBB161_2:
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    imul	rax, qword ptr [rsp + 104], 24
    add	rcx, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    imul	rax, qword ptr [rsp + 112], 24
    add	rcx, rax
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$min@_K@std@@YAAEB_KAEB_K0@Z"
.globl	"??$min@_K@std@@YAAEB_KAEB_K0@Z" # -- Begin function ??$min@_K@std@@YAAEB_KAEB_K0@Z
    .p2align	4, 0x90
    "??$min@_K@std@@YAAEB_KAEB_K0@Z":       # @"??$min@_K@std@@YAAEB_KAEB_K0@Z"
    .seh_proc "??$min@_K@std@@YAAEB_KAEB_K0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jae	.LBB162_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB162_3                                      ; Jump instruction
    .LBB162_2:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    .LBB162_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 768614336404564650
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ"
.globl	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ" # -- Begin function ?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ": # @"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ"
    .seh_proc "?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Max_limit@_J@std@@YA_JXZ"
.globl	"??$_Max_limit@_J@std@@YA_JXZ"  # -- Begin function ??$_Max_limit@_J@std@@YA_JXZ
    .p2align	4, 0x90
    "??$_Max_limit@_J@std@@YA_JXZ":         # @"??$_Max_limit@_J@std@@YA_JXZ"
    .seh_proc "??$_Max_limit@_J@std@@YA_JXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], -1                            ; Move 64-bit value
    movabs	rax, 9223372036854775807
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
.globl	"?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" # -- Begin function ?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ": # @"?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
    .seh_proc "?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    mov	ecx, 24
    cqo
    idiv	rcx
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z"
.globl	"?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z" # -- Begin function ?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z": # @"?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z"
    .seh_proc "?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z"       ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
.globl	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" # -- Begin function ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
    .p2align	4, 0x90
    "??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z": # @"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
    .seh_proc "??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    cmp	qword ptr [rsp + 40], 0                        ; Compare values
    jne	.LBB169_2                                      ; Jump instruction
# %bb.1:
    mov	qword ptr [rsp + 48], 0                        ; Move 64-bit value
    jmp	.LBB169_5                                      ; Jump instruction
    .LBB169_2:
    cmp	qword ptr [rsp + 40], 4096                     ; Compare values
    jb	.LBB169_4                                       ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    jmp	.LBB169_5                                      ; Jump instruction
    .LBB169_4:
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    .LBB169_5:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z": # @"??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	byte ptr [rsp + 47], 1
    movabs	rax, 768614336404564650
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    movabs	rax, 768614336404564650
    cmp	qword ptr [rsp + 48], rax                      ; Compare values
    jbe	.LBB170_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB170_2:
    imul	rax, qword ptr [rsp + 48], 24
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
.globl	"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" # -- Begin function ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
    .p2align	4, 0x90
    "??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z": # @"??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
    .seh_proc "??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 39
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 64]                      ; Compare values
    ja	.LBB171_2                                       ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB171_2:
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
# %bb.3:
    cmp	qword ptr [rsp + 48], 0                        ; Compare values
    je	.LBB171_5                                       ; Jump instruction
# %bb.4:
    jmp	.LBB171_7                                      ; Jump instruction
    .LBB171_5:
    jmp	.LBB171_6                                      ; Jump instruction
    .LBB171_6:
    call	_invalid_parameter_noinfo_noreturn            ; Function call
    .LBB171_7:
    jmp	.LBB171_8                                      ; Jump instruction
    .LBB171_8:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, 39
    and	rax, -32
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax - 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
.globl	"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z" # -- Begin function ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
    .p2align	4, 0x90
    "?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z": # @"?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
    .seh_proc "?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??2@YAPEAX_K@Z"                              ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Throw_bad_array_new_length@std@@YAXXZ"
.globl	"?_Throw_bad_array_new_length@std@@YAXXZ" # -- Begin function ?_Throw_bad_array_new_length@std@@YAXXZ
    .p2align	4, 0x90
    "?_Throw_bad_array_new_length@std@@YAXXZ": # @"?_Throw_bad_array_new_length@std@@YAXXZ"
    .seh_proc "?_Throw_bad_array_new_length@std@@YAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    lea	rcx, [rsp + 32]
    call	"??0bad_array_new_length@std@@QEAA@XZ"        ; Function call
    lea	rcx, [rsp + 32]
    lea	rdx, [rip + "_TI3?AVbad_array_new_length@std@@"]
    call	_CxxThrowException                            ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"??0bad_array_new_length@std@@QEAA@XZ"
.globl	"??0bad_array_new_length@std@@QEAA@XZ" # -- Begin function ??0bad_array_new_length@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0bad_array_new_length@std@@QEAA@XZ": # @"??0bad_array_new_length@std@@QEAA@XZ"
    .seh_proc "??0bad_array_new_length@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rip + "??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"]
    call	"??0bad_alloc@std@@AEAA@QEBD@Z"               ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7bad_array_new_length@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
.globl	"??0bad_array_new_length@std@@QEAA@AEBV01@@Z" # -- Begin function ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0bad_array_new_length@std@@QEAA@AEBV01@@Z": # @"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0bad_array_new_length@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0bad_alloc@std@@QEAA@AEBV01@@Z"            ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7bad_array_new_length@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0bad_alloc@std@@QEAA@AEBV01@@Z"
.globl	"??0bad_alloc@std@@QEAA@AEBV01@@Z" # -- Begin function ??0bad_alloc@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0bad_alloc@std@@QEAA@AEBV01@@Z":     # @"??0bad_alloc@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0bad_alloc@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0exception@std@@QEAA@AEBV01@@Z"            ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7bad_alloc@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
.globl	"??0exception@std@@QEAA@AEBV01@@Z" # -- Begin function ??0exception@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0exception@std@@QEAA@AEBV01@@Z":     # @"??0exception@std@@QEAA@AEBV01@@Z"
    .Lfunc_begin10:
    .seh_proc "??0exception@std@@QEAA@AEBV01@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rip + "??_7exception@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 8
    xorps	xmm0, xmm0
    movups	xmmword ptr [rax + 8], xmm0
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    add	rcx, 8
    .Ltmp124:
    call	__std_exception_copy                          ; Function call
    .Ltmp125:
    jmp	.LBB177_1                                      ; Jump instruction
    .LBB177_1:
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0exception@std@@QEAA@AEBV01@@Z")@IMGREL
    .section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA":
    .seh_proc "?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA"
    .LBB177_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end10:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0exception@std@@QEAA@AEBV01@@Z"
    .p2align	2, 0x0
    "$cppxdata$??0exception@std@@QEAA@AEBV01@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0exception@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0exception@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0exception@std@@QEAA@AEBV01@@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0exception@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
    "$ip2state$??0exception@std@@QEAA@AEBV01@@Z":
    .long	.Lfunc_begin10@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp124@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp125@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0exception@std@@QEAA@AEBV01@@Z"
    .section	.text,"xr",discard,"??1bad_array_new_length@std@@UEAA@XZ"
.globl	"??1bad_array_new_length@std@@UEAA@XZ" # -- Begin function ??1bad_array_new_length@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1bad_array_new_length@std@@UEAA@XZ": # @"??1bad_array_new_length@std@@UEAA@XZ"
    .seh_proc "??1bad_array_new_length@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1bad_alloc@std@@UEAA@XZ"                   ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0bad_alloc@std@@AEAA@QEBD@Z"
.globl	"??0bad_alloc@std@@AEAA@QEBD@Z" # -- Begin function ??0bad_alloc@std@@AEAA@QEBD@Z
    .p2align	4, 0x90
    "??0bad_alloc@std@@AEAA@QEBD@Z":        # @"??0bad_alloc@std@@AEAA@QEBD@Z"
    .seh_proc "??0bad_alloc@std@@AEAA@QEBD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8d, 1
    call	"??0exception@std@@QEAA@QEBDH@Z"              ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7bad_alloc@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
.globl	"??_Gbad_array_new_length@std@@UEAAPEAXI@Z" # -- Begin function ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gbad_array_new_length@std@@UEAAPEAXI@Z": # @"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1bad_array_new_length@std@@UEAA@XZ"        ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB180_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 24
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB180_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?what@exception@std@@UEBAPEBDXZ"
.globl	"?what@exception@std@@UEBAPEBDXZ" # -- Begin function ?what@exception@std@@UEBAPEBDXZ
    .p2align	4, 0x90
    "?what@exception@std@@UEBAPEBDXZ":      # @"?what@exception@std@@UEBAPEBDXZ"
    .seh_proc "?what@exception@std@@UEBAPEBDXZ"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax        # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB181_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB181_3                                      ; Jump instruction
    .LBB181_2:
    lea	rax, [rip + "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"]
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB181_3                                      ; Jump instruction
    .LBB181_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0exception@std@@QEAA@QEBDH@Z"
.globl	"??0exception@std@@QEAA@QEBDH@Z" # -- Begin function ??0exception@std@@QEAA@QEBDH@Z
    .p2align	4, 0x90
    "??0exception@std@@QEAA@QEBDH@Z":       # @"??0exception@std@@QEAA@QEBDH@Z"
    .seh_proc "??0exception@std@@QEAA@QEBDH@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 68], r8d                      ; Move 32-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rax, [rip + "??_7exception@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    add	rcx, 8
    xor	edx, edx
    mov	r8d, 16
    call	memset                                        ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gbad_alloc@std@@UEAAPEAXI@Z"
.globl	"??_Gbad_alloc@std@@UEAAPEAXI@Z" # -- Begin function ??_Gbad_alloc@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gbad_alloc@std@@UEAAPEAXI@Z":       # @"??_Gbad_alloc@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gbad_alloc@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1bad_alloc@std@@UEAA@XZ"                   ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB183_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 24
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB183_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gexception@std@@UEAAPEAXI@Z"
.globl	"??_Gexception@std@@UEAAPEAXI@Z" # -- Begin function ??_Gexception@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gexception@std@@UEAAPEAXI@Z":       # @"??_Gexception@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gexception@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1exception@std@@UEAA@XZ"                   ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB184_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 24
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB184_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
.globl	"??1exception@std@@UEAA@XZ"     # -- Begin function ??1exception@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1exception@std@@UEAA@XZ":            # @"??1exception@std@@UEAA@XZ"
    .Lfunc_begin11:
    .seh_proc "??1exception@std@@UEAA@XZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rsp + 48]
    .seh_setframe rbp, 48
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    lea	rax, [rip + "??_7exception@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    add	rcx, 8
    .Ltmp126:
    call	__std_exception_destroy                       ; Function call
    .Ltmp127:
    jmp	.LBB185_1                                      ; Jump instruction
    .LBB185_1:
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??1exception@std@@UEAA@XZ")@IMGREL
    .section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???1exception@std@@UEAA@XZ@4HA":
    .seh_proc "?dtor$2@?0???1exception@std@@UEAA@XZ@4HA"
    .LBB185_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 48]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end11:
    .seh_handlerdata
    .section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"??1exception@std@@UEAA@XZ"
    .p2align	2, 0x0
    "$cppxdata$??1exception@std@@UEAA@XZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??1exception@std@@UEAA@XZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??1exception@std@@UEAA@XZ")@IMGREL # IPToStateXData
    .long	40                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??1exception@std@@UEAA@XZ":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???1exception@std@@UEAA@XZ@4HA"@IMGREL # Action
    "$ip2state$??1exception@std@@UEAA@XZ":
    .long	.Lfunc_begin11@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp126@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp127@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??1exception@std@@UEAA@XZ"
    .section	.text,"xr",discard,"??1bad_alloc@std@@UEAA@XZ"
.globl	"??1bad_alloc@std@@UEAA@XZ"     # -- Begin function ??1bad_alloc@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1bad_alloc@std@@UEAA@XZ":            # @"??1bad_alloc@std@@UEAA@XZ"
    .seh_proc "??1bad_alloc@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1exception@std@@UEAA@XZ"                   ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z"
.globl	"??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z" # -- Begin function ??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z": # @"??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z"
    .seh_proc "??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z"
.globl	"??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z" # -- Begin function ??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z
    .p2align	4, 0x90
    "??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z": # @"??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z"
    .seh_proc "??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 104]
    call	"??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    call	memmove                                       ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 40]
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z"
.globl	"??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z" # -- Begin function ??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z
    .p2align	4, 0x90
    "??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z": # @"??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z"
    .seh_proc "??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z"
.globl	"??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z" # -- Begin function ??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z
    .p2align	4, 0x90
    "??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z": # @"??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z"
    .seh_proc "??$?0AEBV?$allocator@U?$pair@OO@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$pair@OO@std@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
.globl	"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z" # -- Begin function ??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z
    .p2align	4, 0x90
    "??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z": # @"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .Lfunc_begin12:
    .seh_proc "??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r9                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rbp - 56], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 64]                       ; Move 64-bit value
    lea	rcx, [rbp - 65]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rbp - 32], 0                        ; Compare values
    je	.LBB191_4                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp128:
    call	"??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp129:
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB191_2                                      ; Jump instruction
    .LBB191_2:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp - 80], 0                        ; Move 64-bit value
    lea	rcx, [rbp - 80]
    call	"??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB191_4                                      ; Jump instruction
    .LBB191_4:
    lea	rcx, [rbp - 65]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0???$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z@4HA":
    .seh_proc "?dtor$3@?0???$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z@4HA"
    .LBB191_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 80]
    call	"??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end12:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0???$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z":
    .long	.Lfunc_begin12@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp128@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp129@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .section	.text,"xr",discard,"?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
.globl	"?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ" # -- Begin function ?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ
    .p2align	4, 0x90
    "?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ": # @"?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
    .seh_proc "?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
.globl	"?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ" # -- Begin function ?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ
    .p2align	4, 0x90
    "?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ": # @"?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
    .seh_proc "?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Convert_size@_K_K@std@@YA_K_K@Z"
.globl	"??$_Convert_size@_K_K@std@@YA_K_K@Z" # -- Begin function ??$_Convert_size@_K_K@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Convert_size@_K_K@std@@YA_K_K@Z":  # @"??$_Convert_size@_K_K@std@@YA_K_K@Z"
    .seh_proc "??$_Convert_size@_K_K@std@@YA_K_K@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ"
.globl	"?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ" # -- Begin function ?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ": # @"?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ"
    .seh_proc "?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ"
.globl	"??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ": # @"??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
.globl	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" # -- Begin function ?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ": # @"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
    .seh_proc "?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z"
.globl	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" # -- Begin function ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
    .p2align	4, 0x90
    "??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z": # @"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z"
    .seh_proc "??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
.globl	"?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z": # @"?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB199_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ" ; Function call
    .LBB199_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
.globl	"??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" # -- Begin function ??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z": # @"??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .seh_proc "??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 128], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 112], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    lea	rcx, [rsp + 104]
    call	"??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	byte ptr [rsp + 87], 1
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    call	"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 88]
    call	"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    shl	rax, 4
    add	rax, qword ptr [rsp + 120]
    mov	qword ptr [rsp + 120], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ": # @"??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tidy_guard@V?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB201_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ" ; Function call
    .LBB201_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ"
.globl	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" # -- Begin function ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ": # @"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ"
    .seh_proc "?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
.globl	"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ": # @"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ"
.globl	"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ
    .p2align	4, 0x90
    "?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ": # @"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ"
    .seh_proc "?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
.globl	"?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z": # @"?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, rax
    lea	rdx, [rsp + 80]
    call	"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 1152921504606846975
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
.globl	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ" # -- Begin function ?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ": # @"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
    .seh_proc "?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z"
.globl	"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z" # -- Begin function ??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z": # @"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z"
    .seh_proc "??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z"
.globl	"?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z" # -- Begin function ?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z": # @"?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z"
    .seh_proc "?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"       ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z": # @"??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	byte ptr [rsp + 47], 1
    movabs	rax, 1152921504606846975
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    movabs	rax, 1152921504606846975
    cmp	qword ptr [rsp + 48], rax                      ; Compare values
    jbe	.LBB212_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB212_2:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rax, 4
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z"
.globl	"??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z" # -- Begin function ??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z": # @"??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z"
    .seh_proc "??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z"
.globl	"??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z" # -- Begin function ??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z
    .p2align	4, 0x90
    "??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z": # @"??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z"
    .seh_proc "??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 104]
    call	"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    call	memmove                                       ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 40]
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
.globl	"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" # -- Begin function ??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z
    .p2align	4, 0x90
    "??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z": # @"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .seh_proc "??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z"
.globl	"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z" # -- Begin function ??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z
    .p2align	4, 0x90
    "??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z": # @"??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z"
    .seh_proc "??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z"
.globl	"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z" # -- Begin function ??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z
    .p2align	4, 0x90
    "??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z": # @"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z"
    .seh_proc "??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ"
.globl	"?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ": # @"?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ"
    .seh_proc "?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB218_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    sub	r8, rax
    sar	r8, 4
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    .LBB218_2:
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
.globl	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" # -- Begin function ??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z": # @"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .seh_proc "??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z"
.globl	"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z" # -- Begin function ?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z": # @"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z"
    .seh_proc "?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rdx, 4
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z": # @"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0$$V@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@U?$pair@OO@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z": # @"??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@O@std@@QEAA@XZ"               ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ"
.globl	"??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ": # @"??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ"
.globl	"?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ": # @"?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ"
    .seh_proc "?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB224_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    sub	r8, rax
    sar	r8, 3
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    .LBB224_2:
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ"
.globl	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" # -- Begin function ?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ": # @"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ"
    .seh_proc "?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z"
.globl	"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z" # -- Begin function ??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z": # @"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z"
    .seh_proc "??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z"
.globl	"?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z" # -- Begin function ?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z": # @"?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z"
    .seh_proc "?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rdx, 3
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
.globl	"??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z" # -- Begin function ??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z
    .p2align	4, 0x90
    "??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z": # @"??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
    .seh_proc "??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    je	.LBB229_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB229_3                                      ; Jump instruction
    .LBB229_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB229_3:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
.globl	"??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z" # -- Begin function ??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z
    .p2align	4, 0x90
    "??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z": # @"??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
    .seh_proc "??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 8
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
.globl	"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z" # -- Begin function ??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z
    .p2align	4, 0x90
    "??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z": # @"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .Lfunc_begin13:
    .seh_proc "??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 8], rax                       ; Move 64-bit value
    mov	qword ptr [rbp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 3
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 3
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jne	.LBB231_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ" ; Function call
    .LBB231_2:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z" ; Function call
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 48]
    call	"??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z" ; Function call
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 3
    add	rax, rcx
    add	rax, 8
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rax, 3
    add	rcx, rax
    call	"??$_Unfancy@O@std@@YAPEAOPEAO@Z"             ; Function call
    mov	r8, qword ptr [rbp - 96]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    call	"??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 3
    add	rax, rcx
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB231_5                                      ; Jump instruction
# %bb.3:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp134:
    call	"??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z" ; Function call
    .Ltmp135:
    jmp	.LBB231_4                                      ; Jump instruction
    .LBB231_4:
    jmp	.LBB231_9                                      ; Jump instruction
    .LBB231_5:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp130:
    call	"??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z" ; Function call
    .Ltmp131:
    jmp	.LBB231_6                                      ; Jump instruction
    .LBB231_6:
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    lea	r8, [rax + 8*rcx + 8]
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 24]                      ; Move 64-bit value
    .Ltmp132:
    call	"??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z" ; Function call
    .Ltmp133:
    jmp	.LBB231_8                                      ; Jump instruction
    .LBB231_8:
    jmp	.LBB231_9                                      ; Jump instruction
    .LBB231_9:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 3
    add	rax, rcx
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$7@?0???$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z@4HA":
    .seh_proc "?catch$7@?0???$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB231_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z" ; Function call
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .Lfunc_end13:
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z")@IMGREL # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z":
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    "$tryMap$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z":
    .long	0                               # TryLow
    .long	0                               # TryHigh
    .long	1                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$7@?0???$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z":
    .long	.Lfunc_begin13@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp134@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp133@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$7@?0???$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z@4HA"@IMGREL # IP
    .long	1                               # ToState
    .section	.text,"xr",discard,"??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .section	.text,"xr",discard,"??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z"
.globl	"??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z" # -- Begin function ??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z": # @"??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z"
    .seh_proc "??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z"
.globl	"?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z" # -- Begin function ?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z
    .p2align	4, 0x90
    "?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z": # @"?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z"
    .seh_proc "?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
.globl	"?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ": # @"?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ"
.globl	"?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ
    .p2align	4, 0x90
    "?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ"
    .seh_proc "?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z"
.globl	"?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z" # -- Begin function ?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z
    .p2align	4, 0x90
    "?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z": # @"?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z"
    .seh_proc "?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    call	"?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    shr	rdx
    sub	rcx, rdx
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB236_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB236_5                                      ; Jump instruction
    .LBB236_2:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    shr	rcx
    add	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    jae	.LBB236_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB236_5                                      ; Jump instruction
    .LBB236_4:
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB236_5:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z"
.globl	"??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z" # -- Begin function ??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z": # @"??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z"
    .seh_proc "??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?allocate@?$allocator@O@std@@QEAAPEAO_K@Z"   ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z"
.globl	"??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z" # -- Begin function ??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z
    .p2align	4, 0x90
    "??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z": # @"??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z"
    .seh_proc "??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy@O@std@@YAPEAOPEAO@Z"
.globl	"??$_Unfancy@O@std@@YAPEAOPEAO@Z" # -- Begin function ??$_Unfancy@O@std@@YAPEAOPEAO@Z
    .p2align	4, 0x90
    "??$_Unfancy@O@std@@YAPEAOPEAO@Z":      # @"??$_Unfancy@O@std@@YAPEAOPEAO@Z"
    .seh_proc "??$_Unfancy@O@std@@YAPEAOPEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z"
.globl	"??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z" # -- Begin function ??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z": # @"??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z"
    .seh_proc "??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 96], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 72]
    call	"??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 80]
    call	"??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$_Unfancy@O@std@@YAPEAOPEAO@Z"             ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rcx, rdx
    sar	rcx, 3
    shl	rcx, 3
    add	rax, rcx
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z"
.globl	"?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z" # -- Begin function ?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z
    .p2align	4, 0x90
    "?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z": # @"?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z"
    .seh_proc "?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB241_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    sub	r8, rax
    sar	r8, 3
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z" ; Function call
    .LBB241_2:
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    shl	rax, 3
    add	rcx, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    shl	rax, 3
    add	rcx, rax
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 2305843009213693951
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ"
.globl	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ" # -- Begin function ?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ": # @"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ"
    .seh_proc "?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
.globl	"?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" # -- Begin function ?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ": # @"?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
    .seh_proc "?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@O@std@@QEAAPEAO_K@Z"
.globl	"?allocate@?$allocator@O@std@@QEAAPEAO_K@Z" # -- Begin function ?allocate@?$allocator@O@std@@QEAAPEAO_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@O@std@@QEAAPEAO_K@Z": # @"?allocate@?$allocator@O@std@@QEAAPEAO_K@Z"
    .seh_proc "?allocate@?$allocator@O@std@@QEAAPEAO_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$07@std@@YA_K_K@Z"         ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$07@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$07@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$07@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$07@std@@YA_K_K@Z":  # @"??$_Get_size_of_n@$07@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$07@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	byte ptr [rsp + 47], 1
    movabs	rax, 2305843009213693951
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    movabs	rax, 2305843009213693951
    cmp	qword ptr [rsp + 48], rax                      ; Compare values
    jbe	.LBB247_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB247_2:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rax, 3
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z"
.globl	"??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z" # -- Begin function ??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z": # @"??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z"
    .seh_proc "??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
.globl	"??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z" # -- Begin function ??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z
    .p2align	4, 0x90
    "??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z": # @"??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .seh_proc "??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 104]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    call	memmove                                       ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 40]
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z"
.globl	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" # -- Begin function ??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z
    .p2align	4, 0x90
    "??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z": # @"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z"
    .seh_proc "??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z
    "??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z": # @"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z"
    .seh_proc "??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    call	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z"
.globl	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z" # -- Begin function ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z
    .p2align	4, 0x90
    "??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z": # @"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z"
    .seh_proc "??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAA@PEAOPEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"    ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"
.globl	"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z" # -- Begin function ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z
    .p2align	4, 0x90
    "?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z": # @"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"
    .seh_proc "?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z"
.globl	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z" # -- Begin function ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z": # @"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z"
    .seh_proc "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	byte ptr [rsp + 71], r8b
    lea	rcx, [rsp + 80]
    lea	rdx, [rsp + 72]
    call	"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z" ; Function call
    lea	rcx, [rsp + 80]
    call	"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 72]
    call	"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	r8, rax
    sar	r8, 3
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]
    call	"??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
.globl	"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z" # -- Begin function ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z": # @"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
    .seh_proc "??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
.globl	"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z" # -- Begin function ??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z": # @"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z"
.globl	"??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z" # -- Begin function ??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z": # @"??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z"
    .seh_proc "??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r9b
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    .LBB257_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    cmp	rax, 32                                        ; Compare values
    jg	.LBB257_3                                       ; Jump instruction
# %bb.2:
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 71]
    call	"??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z" ; Function call
    jmp	.LBB257_9                                      ; Jump instruction
    .LBB257_3:                              #   in Loop: Header=BB257_1 Depth=1
    cmp	qword ptr [rsp + 88], 0                        ; Compare values
    jg	.LBB257_5                                       ; Jump instruction
# %bb.4:
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 70]
    call	"??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 69]
    call	"??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z" ; Function call
    jmp	.LBB257_9                                      ; Jump instruction
    .LBB257_5:                              #   in Loop: Header=BB257_1 Depth=1
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]
    lea	rcx, [rsp + 48]
    call	"??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    sar	rax
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    sar	rcx, 2
    add	rax, rcx
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rcx, rdx
    sar	rcx, 3
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB257_7                                      ; Jump instruction
# %bb.6:                                #   in Loop: Header=BB257_1 Depth=1
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 46]
    call	"??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    jmp	.LBB257_8                                      ; Jump instruction
    .LBB257_7:                              #   in Loop: Header=BB257_1 Depth=1
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 45]
    call	"??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB257_8:                              #   in Loop: Header=BB257_1 Depth=1
    jmp	.LBB257_1                                      ; Jump instruction
    .LBB257_9:
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z"
.globl	"??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z" # -- Begin function ??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z": # @"??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z"
    .seh_proc "??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rsp + 7], 1
    mov	al, byte ptr [rsp + 23]
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ"
.globl	"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ" # -- Begin function ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ
    .p2align	4, 0x90
    "?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ": # @"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ"
    .seh_proc "?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z"  ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z"
.globl	"??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z" # -- Begin function ??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z
    .p2align	4, 0x90
    "??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z": # @"??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z"
    .seh_proc "??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z"
.globl	"??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z" # -- Begin function ??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z": # @"??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z"
    .seh_proc "??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	byte ptr [rsp + 87], r8b
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    je	.LBB261_12                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    .LBB261_2:                              # =>This Loop Header: Depth=1
#     Child Loop BB261_6 Depth 2
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    je	.LBB261_11                                      ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB261_2 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rsp + 40], xmm0                   ; Load 64-bit double
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    lea	rcx, [rsp + 87]
    lea	rdx, [rsp + 40]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB261_4                                      ; Jump instruction
    jmp	.LBB261_5                                      ; Jump instruction
    .LBB261_4:                              #   in Loop: Header=BB261_2 Depth=1
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    add	r8, 8
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z" ; Function call
    movsd	xmm0, qword ptr [rsp + 40]      # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    jmp	.LBB261_10                                     ; Jump instruction
    .LBB261_5:                              #   in Loop: Header=BB261_2 Depth=1
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    .LBB261_6:                              #   Parent Loop BB261_2 Depth=1
# =>  This Inner Loop Header: Depth=2
    mov	r8, qword ptr [rsp + 32]                       ; Move 64-bit value
    add	r8, -8
    mov	qword ptr [rsp + 32], r8                       ; Move 64-bit value
    lea	rcx, [rsp + 87]
    lea	rdx, [rsp + 40]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB261_7                                      ; Jump instruction
    jmp	.LBB261_9                                      ; Jump instruction
    .LBB261_7:                              #   in Loop: Header=BB261_6 Depth=2
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
# %bb.8:                                #   in Loop: Header=BB261_6 Depth=2
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    jmp	.LBB261_6                                      ; Jump instruction
    .LBB261_9:                              #   in Loop: Header=BB261_2 Depth=1
    movsd	xmm0, qword ptr [rsp + 40]      # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    .LBB261_10:                             #   in Loop: Header=BB261_2 Depth=1
    jmp	.LBB261_2                                      ; Jump instruction
    .LBB261_11:
    jmp	.LBB261_12                                     ; Jump instruction
    .LBB261_12:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
.globl	"??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z" # -- Begin function ??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z": # @"??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
    .seh_proc "??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r8b
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    sar	rax
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    .LBB262_1:                              # =>This Inner Loop Header: Depth=1
    cmp	qword ptr [rsp + 64], 0                        ; Compare values
    jle	.LBB262_3                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB262_1 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8*rcx]   # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rsp + 56], xmm0                   ; Load 64-bit double
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 55]
    lea	r9, [rsp + 56]
    mov	byte ptr [rsp + 32], al
    call	"??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z" ; Function call
    jmp	.LBB262_1                                      ; Jump instruction
    .LBB262_3:
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
.globl	"??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z" # -- Begin function ??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z": # @"??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
    .seh_proc "??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r8b
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    .LBB263_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    cmp	rax, 2                                         ; Compare values
    jl	.LBB263_4                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB263_1 Depth=1
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 47]
    call	"??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z" ; Function call
# %bb.3:                                #   in Loop: Header=BB263_1 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    jmp	.LBB263_1                                      ; Jump instruction
    .LBB263_4:
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z"
.globl	"??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z" # -- Begin function ??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z": # @"??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z"
    .seh_proc "??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 168
    .seh_stackalloc 168
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 160], rcx                     ; Move 64-bit value
    mov	byte ptr [rsp + 159], r9b
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rdx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 136]                     ; Move 64-bit value
    sub	rcx, rdx
    sar	rcx, 3
    sar	rcx
    shl	rcx, 3
    add	rax, rcx
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    call	"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"        ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 127]
    call	"??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z"        ; Function call
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    .LBB264_1:                              # =>This Inner Loop Header: Depth=1
    mov	rcx, qword ptr [rsp + 136]                     ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	rcx, qword ptr [rsp + 112]                     ; Compare values
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    jae	.LBB264_4                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB264_1 Depth=1
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"        ; Function call
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    mov	cl, al
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    jne	.LBB264_4                                      ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB264_1 Depth=1
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"        ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    xor	al, -1
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    .LBB264_4:                              #   in Loop: Header=BB264_1 Depth=1
    mov	al, byte ptr [rsp + 63]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB264_5                                      ; Jump instruction
    jmp	.LBB264_6                                      ; Jump instruction
    .LBB264_5:                              #   in Loop: Header=BB264_1 Depth=1
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    jmp	.LBB264_1                                      ; Jump instruction
    .LBB264_6:
    jmp	.LBB264_7                                      ; Jump instruction
    .LBB264_7:                              # =>This Inner Loop Header: Depth=1
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	rcx, qword ptr [rsp + 144]                     ; Compare values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    jae	.LBB264_10                                     ; Jump instruction
# %bb.8:                                #   in Loop: Header=BB264_7 Depth=1
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    mov	cl, al
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    jne	.LBB264_10                                     ; Jump instruction
# %bb.9:                                #   in Loop: Header=BB264_7 Depth=1
    mov	r8, qword ptr [rsp + 104]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    xor	al, -1
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    .LBB264_10:                             #   in Loop: Header=BB264_7 Depth=1
    mov	al, byte ptr [rsp + 47]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB264_11                                     ; Jump instruction
    jmp	.LBB264_12                                     ; Jump instruction
    .LBB264_11:                             #   in Loop: Header=BB264_7 Depth=1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    jmp	.LBB264_7                                      ; Jump instruction
    .LBB264_12:
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    .LBB264_13:                             # =>This Loop Header: Depth=1
#     Child Loop BB264_14 Depth 2
#     Child Loop BB264_27 Depth 2
    jmp	.LBB264_14                                     ; Jump instruction
    .LBB264_14:                             #   Parent Loop BB264_13 Depth=1
# =>  This Inner Loop Header: Depth=2
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jae	.LBB264_26                                     ; Jump instruction
# %bb.15:                               #   in Loop: Header=BB264_14 Depth=2
    mov	r8, qword ptr [rsp + 96]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB264_16                                     ; Jump instruction
    jmp	.LBB264_17                                     ; Jump instruction
    .LBB264_16:                             #   in Loop: Header=BB264_14 Depth=2
    jmp	.LBB264_25                                     ; Jump instruction
    .LBB264_17:                             #   in Loop: Header=BB264_14 Depth=2
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB264_18                                     ; Jump instruction
    jmp	.LBB264_19                                     ; Jump instruction
    .LBB264_18:                             #   in Loop: Header=BB264_13 Depth=1
    jmp	.LBB264_26                                     ; Jump instruction
    .LBB264_19:                             #   in Loop: Header=BB264_14 Depth=2
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 96]                      ; Compare values
    je	.LBB264_21                                      ; Jump instruction
# %bb.20:                               #   in Loop: Header=BB264_14 Depth=2
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    jmp	.LBB264_22                                     ; Jump instruction
    .LBB264_21:                             #   in Loop: Header=BB264_14 Depth=2
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    .LBB264_22:                             #   in Loop: Header=BB264_14 Depth=2
    jmp	.LBB264_23                                     ; Jump instruction
    .LBB264_23:                             #   in Loop: Header=BB264_14 Depth=2
    jmp	.LBB264_24                                     ; Jump instruction
    .LBB264_24:                             #   in Loop: Header=BB264_14 Depth=2
    jmp	.LBB264_25                                     ; Jump instruction
    .LBB264_25:                             #   in Loop: Header=BB264_14 Depth=2
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    jmp	.LBB264_14                                     ; Jump instruction
    .LBB264_26:                             #   in Loop: Header=BB264_13 Depth=1
    jmp	.LBB264_27                                     ; Jump instruction
    .LBB264_27:                             #   Parent Loop BB264_13 Depth=1
# =>  This Inner Loop Header: Depth=2
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 88]                      ; Compare values
    jae	.LBB264_38                                     ; Jump instruction
# %bb.28:                               #   in Loop: Header=BB264_27 Depth=2
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"        ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB264_29                                     ; Jump instruction
    jmp	.LBB264_30                                     ; Jump instruction
    .LBB264_29:                             #   in Loop: Header=BB264_27 Depth=2
    jmp	.LBB264_37                                     ; Jump instruction
    .LBB264_30:                             #   in Loop: Header=BB264_27 Depth=2
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB264_31                                     ; Jump instruction
    jmp	.LBB264_32                                     ; Jump instruction
    .LBB264_31:                             #   in Loop: Header=BB264_13 Depth=1
    jmp	.LBB264_38                                     ; Jump instruction
    .LBB264_32:                             #   in Loop: Header=BB264_27 Depth=2
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 80]                      ; Compare values
    je	.LBB264_34                                      ; Jump instruction
# %bb.33:                               #   in Loop: Header=BB264_27 Depth=2
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    .LBB264_34:                             #   in Loop: Header=BB264_27 Depth=2
    jmp	.LBB264_35                                     ; Jump instruction
    .LBB264_35:                             #   in Loop: Header=BB264_27 Depth=2
    jmp	.LBB264_36                                     ; Jump instruction
    .LBB264_36:                             #   in Loop: Header=BB264_27 Depth=2
    jmp	.LBB264_37                                     ; Jump instruction
    .LBB264_37:                             #   in Loop: Header=BB264_27 Depth=2
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB264_27                                     ; Jump instruction
    .LBB264_38:                             #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 136]                     ; Compare values
    jne	.LBB264_41                                     ; Jump instruction
# %bb.39:                               #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jne	.LBB264_41                                     ; Jump instruction
# %bb.40:
    mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rsp + 112]
    lea	r8, [rsp + 104]
    call	"??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 168
    ret                                                ; Return from function
    .LBB264_41:                             #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 136]                     ; Compare values
    jne	.LBB264_45                                     ; Jump instruction
# %bb.42:                               #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 96]                      ; Compare values
    je	.LBB264_44                                      ; Jump instruction
# %bb.43:                               #   in Loop: Header=BB264_13 Depth=1
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    .LBB264_44:                             #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    jmp	.LBB264_51                                     ; Jump instruction
    .LBB264_45:                             #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jne	.LBB264_49                                     ; Jump instruction
# %bb.46:                               #   in Loop: Header=BB264_13 Depth=1
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rcx, -8
    mov	qword ptr [rsp + 112], rcx                     ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    je	.LBB264_48                                      ; Jump instruction
# %bb.47:                               #   in Loop: Header=BB264_13 Depth=1
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    .LBB264_48:                             #   in Loop: Header=BB264_13 Depth=1
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rdx, -8
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    jmp	.LBB264_50                                     ; Jump instruction
    .LBB264_49:                             #   in Loop: Header=BB264_13 Depth=1
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rdx, -8
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    .LBB264_50:                             #   in Loop: Header=BB264_13 Depth=1
    jmp	.LBB264_51                                     ; Jump instruction
    .LBB264_51:                             #   in Loop: Header=BB264_13 Depth=1
    jmp	.LBB264_13                                     ; Jump instruction
    .seh_endproc
    .section	.text,"xr",discard,"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"
.globl	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z" # -- Begin function ??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z
    .p2align	4, 0x90
    "??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z": # @"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"
    .seh_proc "??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    ucomisd	xmm0, xmm1
    seta	al
    and	al, 1
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
.globl	"??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z" # -- Begin function ??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z
    .p2align	4, 0x90
    "??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z": # @"??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .seh_proc "??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
.globl	"??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z" # -- Begin function ??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z
    .p2align	4, 0x90
    "??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z": # @"??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .seh_proc "??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 128], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rcx                     ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    lea	rcx, [rsp + 120]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 128]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    add	rcx, rax
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    call	memmove                                       ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
.globl	"??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z" # -- Begin function ??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z": # @"??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
    .seh_proc "??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	al, byte ptr [rsp + 160]
    mov	byte ptr [rsp + 119], al
    mov	qword ptr [rsp + 104], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, 1
    sar	rax
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    .LBB268_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    jge	.LBB268_5                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB268_1 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    shl	rax
    add	rax, 2
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, 1
    shl	rax, 3
    add	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    shl	rax, 3
    add	rdx, rax
    lea	rcx, [rsp + 119]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB268_3                                      ; Jump instruction
    jmp	.LBB268_4                                      ; Jump instruction
    .LBB268_3:                              #   in Loop: Header=BB268_1 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    .LBB268_4:                              #   in Loop: Header=BB268_1 Depth=1
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8*rcx]   # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    movsd	qword ptr [rax + 8*rcx], xmm0                ; Load 64-bit double
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB268_1                                      ; Jump instruction
    .LBB268_5:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    jne	.LBB268_8                                      ; Jump instruction
# %bb.6:
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	ecx, 2
    cqo
    idiv	rcx
    cmp	rdx, 0                                         ; Compare values
    jne	.LBB268_8                                      ; Jump instruction
# %bb.7:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rcx, 1
    movsd	xmm0, qword ptr [rax + 8*rcx]   # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    movsd	qword ptr [rax + 8*rcx], xmm0                ; Load 64-bit double
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, 1
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    .LBB268_8:
    mov	r9, qword ptr [rsp + 104]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 55]
    mov	byte ptr [rsp + 32], al
    call	"??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
.globl	"??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z" # -- Begin function ??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z": # @"??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
    .seh_proc "??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	al, byte ptr [rsp + 128]
    mov	byte ptr [rsp + 87], al
    mov	qword ptr [rsp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rax, 1
    sar	rax
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    .LBB269_1:                              # =>This Inner Loop Header: Depth=1
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	rcx, qword ptr [rsp + 56]                      ; Compare values
    mov	byte ptr [rsp + 39], al         # 1-byte Spill
    jge	.LBB269_3                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB269_1 Depth=1
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    shl	rax, 3
    add	rdx, rax
    lea	rcx, [rsp + 87]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    mov	byte ptr [rsp + 39], al         # 1-byte Spill
    .LBB269_3:                              #   in Loop: Header=BB269_1 Depth=1
    mov	al, byte ptr [rsp + 39]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB269_4                                      ; Jump instruction
    jmp	.LBB269_6                                      ; Jump instruction
    .LBB269_4:                              #   in Loop: Header=BB269_1 Depth=1
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8*rcx]   # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsd	qword ptr [rax + 8*rcx], xmm0                ; Load 64-bit double
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
# %bb.5:                                #   in Loop: Header=BB269_1 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rax, 1
    sar	rax
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    jmp	.LBB269_1                                      ; Jump instruction
    .LBB269_6:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsd	qword ptr [rax + 8*rcx], xmm0                ; Load 64-bit double
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
.globl	"??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z" # -- Begin function ??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z": # @"??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
    .seh_proc "??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	byte ptr [rsp + 87], r8b
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rcx, rax
    sar	rcx, 3
    mov	eax, 2
    cmp	rax, rcx                                       ; Compare values
    jg	.LBB270_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rsp + 56], xmm0                   ; Load 64-bit double
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 55]
    lea	r9, [rsp + 56]
    mov	byte ptr [rsp + 32], al
    call	"??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z" ; Function call
    .LBB270_2:
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z"
.globl	"??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z" # -- Begin function ??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z": # @"??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z"
    .seh_proc "??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	al, byte ptr [rsp + 128]
    mov	byte ptr [rsp + 87], al
    mov	qword ptr [rsp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	r9, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	r8, rax
    sar	r8, 3
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 47]
    xor	edx, edx
# kill: def $rdx killed $edx
    mov	byte ptr [rsp + 32], al
    call	"??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
.globl	"??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" # -- Begin function ??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z": # @"??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
    .seh_proc "??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r9b
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	eax, 40
    cmp	rax, qword ptr [rsp + 64]                      ; Compare values
    jge	.LBB272_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 1
    sar	rax, 3
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rax, 3
    add	r8, rax
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 3
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]
    call	"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 3
    add	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    shl	rax, 3
    add	rcx, rax
    mov	r9b, byte ptr [rsp + 46]
    call	"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    shl	rax, 3
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 48]
    shl	rax, 3
    add	rcx, rax
    mov	r9b, byte ptr [rsp + 45]
    call	"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    shl	rax, 3
    add	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 3
    add	rcx, rax
    mov	r9b, byte ptr [rsp + 44]
    call	"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" ; Function call
    jmp	.LBB272_3                                      ; Jump instruction
    .LBB272_2:
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 43]
    call	"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" ; Function call
    .LBB272_3:
    nop
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"
.globl	"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z" # -- Begin function ??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z
    .p2align	4, 0x90
    "??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z": # @"??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"
    .seh_proc "??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rax, -8
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z"
.globl	"??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z" # -- Begin function ??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z
    .p2align	4, 0x90
    "??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z": # @"??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z"
    .seh_proc "??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$swap@O$0A@@std@@YAXAEAO0@Z"
.globl	"??$swap@O$0A@@std@@YAXAEAO0@Z" # -- Begin function ??$swap@O$0A@@std@@YAXAEAO0@Z
    .p2align	4, 0x90
    "??$swap@O$0A@@std@@YAXAEAO0@Z":        # @"??$swap@O$0A@@std@@YAXAEAO0@Z"
    .seh_proc "??$swap@O$0A@@std@@YAXAEAO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rsp], xmm0                        ; Load 64-bit double
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z"
.globl	"??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z" # -- Begin function ??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z
    .p2align	4, 0x90
    "??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z": # @"??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z"
    .seh_proc "??$?0AEAPEAOAEAPEAO$0A@@?$pair@PEAOPEAO@std@@QEAA@AEAPEAO0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
.globl	"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z" # -- Begin function ??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z": # @"??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
    .seh_proc "??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r9b
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB277_1                                      ; Jump instruction
    jmp	.LBB277_2                                      ; Jump instruction
    .LBB277_1:
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    .LBB277_2:
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB277_3                                      ; Jump instruction
    jmp	.LBB277_6                                      ; Jump instruction
    .LBB277_3:
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"   ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB277_4                                      ; Jump instruction
    jmp	.LBB277_5                                      ; Jump instruction
    .LBB277_4:
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    .LBB277_5:
    jmp	.LBB277_6                                      ; Jump instruction
    .LBB277_6:
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
.globl	"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z" # -- Begin function ??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z": # @"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z
    "??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z": # @"??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z"
    .seh_proc "??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    movsd	qword ptr [rsp + 48], xmm2                   ; Load 64-bit double
    movsd	qword ptr [rsp + 40], xmm1                   ; Load 64-bit double
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rsp + 40]      # xmm0 = mem[0],zero ; Load 64-bit double
    subsd	xmm0, qword ptr [rsp + 48]                   ; Subtract two doubles
    call	"?abs@@YAOO@Z"                                ; Function call
    movaps	xmm1, xmm0
    movsd	xmm0, qword ptr [rip + __real@3e112e0be826d695] # xmm0 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    seta	al
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z"
.globl	"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z" # -- Begin function ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z
    .p2align	4, 0x90
    "??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z": # @"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z"
    .seh_proc "??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z"
.globl	"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z" # -- Begin function ??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z
    .p2align	4, 0x90
    "??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z": # @"??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z"
    .seh_proc "??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z"
.globl	"?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z" # -- Begin function ?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z
    .p2align	4, 0x90
    "?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z": # @"?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z"
    .seh_proc "?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z"
.globl	"??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z" # -- Begin function ??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z
    .p2align	4, 0x90
    "??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z": # @"??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z"
    .seh_proc "??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
.globl	"??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z" # -- Begin function ??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z
    .p2align	4, 0x90
    "??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z": # @"??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .seh_proc "??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
.globl	"??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z" # -- Begin function ??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z
    .p2align	4, 0x90
    "??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z": # @"??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
    .seh_proc "??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    je	.LBB285_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB285_3                                      ; Jump instruction
    .LBB285_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB285_3:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
.globl	"??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z" # -- Begin function ??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z
    .p2align	4, 0x90
    "??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z": # @"??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
    .seh_proc "??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 16
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
.globl	"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z" # -- Begin function ??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z
    .p2align	4, 0x90
    "??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z": # @"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .Lfunc_begin14:
    .seh_proc "??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 8], rax                       ; Move 64-bit value
    mov	qword ptr [rbp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 4
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 4
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jne	.LBB287_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ" ; Function call
    .LBB287_2:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z" ; Function call
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 48]
    call	"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    add	rax, 16
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, qword ptr [rbp - 96]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    call	"??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB287_5                                      ; Jump instruction
# %bb.3:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp140:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp141:
    jmp	.LBB287_4                                      ; Jump instruction
    .LBB287_4:
    jmp	.LBB287_9                                      ; Jump instruction
    .LBB287_5:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp136:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp137:
    jmp	.LBB287_6                                      ; Jump instruction
    .LBB287_6:
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    lea	r8, [rax + rcx + 16]
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 24]                      ; Move 64-bit value
    .Ltmp138:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp139:
    jmp	.LBB287_8                                      ; Jump instruction
    .LBB287_8:
    jmp	.LBB287_9                                      ; Jump instruction
    .LBB287_9:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$7@?0???$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z@4HA":
    .seh_proc "?catch$7@?0???$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB287_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z" ; Function call
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .Lfunc_end14:
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z")@IMGREL # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z":
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    "$tryMap$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z":
    .long	0                               # TryLow
    .long	0                               # TryHigh
    .long	1                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$7@?0???$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z":
    .long	.Lfunc_begin14@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp140@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp139@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$7@?0???$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z@4HA"@IMGREL # IP
    .long	1                               # ToState
    .section	.text,"xr",discard,"??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .section	.text,"xr",discard,"??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z"
.globl	"??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z" # -- Begin function ??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z": # @"??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z"
    .seh_proc "??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z"
.globl	"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z" # -- Begin function ?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z
    .p2align	4, 0x90
    "?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z": # @"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z"
    .seh_proc "?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z"
.globl	"?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z" # -- Begin function ?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z
    .p2align	4, 0x90
    "?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z": # @"?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z"
    .seh_proc "?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    call	"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    shr	rdx
    sub	rcx, rdx
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB290_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB290_5                                      ; Jump instruction
    .LBB290_2:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    shr	rcx
    add	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    jae	.LBB290_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB290_5                                      ; Jump instruction
    .LBB290_4:
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB290_5:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z"
.globl	"??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z" # -- Begin function ??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z
    .p2align	4, 0x90
    "??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z": # @"??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z"
    .seh_proc "??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
.globl	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" # -- Begin function ??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z": # @"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .seh_proc "??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 96], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 72]
    call	"??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 80]
    call	"??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rcx, rdx
    sar	rcx, 4
    shl	rcx, 4
    add	rax, rcx
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z"
.globl	"?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z" # -- Begin function ?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z
    .p2align	4, 0x90
    "?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z": # @"?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z"
    .seh_proc "?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB293_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    sub	r8, rax
    sar	r8, 4
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z" ; Function call
    .LBB293_2:
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
.globl	"?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" # -- Begin function ?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ": # @"?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
    .seh_proc "?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z"
.globl	"??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z" # -- Begin function ??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z": # @"??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
.globl	"??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" # -- Begin function ??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z
    .p2align	4, 0x90
    "??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z": # @"??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
    .seh_proc "??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 104]
    call	"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    call	memmove                                       ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 40]
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z
    "??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z": # @"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z"
    .seh_proc "??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    call	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z"
.globl	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z" # -- Begin function ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z
    .p2align	4, 0x90
    "??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z": # @"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z"
    .seh_proc "??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"    ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z"
.globl	"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z" # -- Begin function ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z": # @"??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z"
    .seh_proc "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	byte ptr [rsp + 71], r8b
    lea	rcx, [rsp + 80]
    lea	rdx, [rsp + 72]
    call	"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z" ; Function call
    lea	rcx, [rsp + 80]
    call	"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 72]
    call	"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	r8, rax
    sar	r8, 4
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]
    call	"??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
.globl	"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z" # -- Begin function ??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z": # @"??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
    .seh_proc "??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
.globl	"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z" # -- Begin function ??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z": # @"??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z"
.globl	"??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z" # -- Begin function ??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z": # @"??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z"
    .seh_proc "??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r9b
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    .LBB302_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    cmp	rax, 32                                        ; Compare values
    jg	.LBB302_3                                       ; Jump instruction
# %bb.2:
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 71]
    call	"??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z" ; Function call
    jmp	.LBB302_9                                      ; Jump instruction
    .LBB302_3:                              #   in Loop: Header=BB302_1 Depth=1
    cmp	qword ptr [rsp + 88], 0                        ; Compare values
    jg	.LBB302_5                                       ; Jump instruction
# %bb.4:
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 70]
    call	"??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 69]
    call	"??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z" ; Function call
    jmp	.LBB302_9                                      ; Jump instruction
    .LBB302_5:                              #   in Loop: Header=BB302_1 Depth=1
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]
    lea	rcx, [rsp + 48]
    call	"??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    sar	rax
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    sar	rcx, 2
    add	rax, rcx
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rcx, rdx
    sar	rcx, 4
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB302_7                                      ; Jump instruction
# %bb.6:                                #   in Loop: Header=BB302_1 Depth=1
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 46]
    call	"??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    jmp	.LBB302_8                                      ; Jump instruction
    .LBB302_7:                              #   in Loop: Header=BB302_1 Depth=1
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 45]
    call	"??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB302_8:                              #   in Loop: Header=BB302_1 Depth=1
    jmp	.LBB302_1                                      ; Jump instruction
    .LBB302_9:
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ"
.globl	"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ" # -- Begin function ?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ
    .p2align	4, 0x90
    "?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ": # @"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ"
    .seh_proc "?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
.globl	"??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" # -- Begin function ??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z
    .p2align	4, 0x90
    "??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z": # @"??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .seh_proc "??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z"
.globl	"??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z" # -- Begin function ??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z": # @"??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z"
    .seh_proc "??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r8b
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 88]                      ; Compare values
    je	.LBB305_12                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    .LBB305_2:                              # =>This Loop Header: Depth=1
#     Child Loop BB305_6 Depth 2
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 88]                      ; Compare values
    je	.LBB305_11                                      ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB305_2 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    lea	rcx, [rsp + 103]
    lea	rdx, [rsp + 48]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB305_4                                      ; Jump instruction
    jmp	.LBB305_5                                      ; Jump instruction
    .LBB305_4:                              #   in Loop: Header=BB305_2 Depth=1
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    add	r8, 16
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" ; Function call
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    lea	rdx, [rsp + 48]
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    jmp	.LBB305_10                                     ; Jump instruction
    .LBB305_5:                              #   in Loop: Header=BB305_2 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    .LBB305_6:                              #   Parent Loop BB305_2 Depth=1
# =>  This Inner Loop Header: Depth=2
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    add	r8, -16
    mov	qword ptr [rsp + 40], r8                       ; Move 64-bit value
    lea	rcx, [rsp + 103]
    lea	rdx, [rsp + 48]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB305_7                                      ; Jump instruction
    jmp	.LBB305_9                                      ; Jump instruction
    .LBB305_7:                              #   in Loop: Header=BB305_6 Depth=2
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
# %bb.8:                                #   in Loop: Header=BB305_6 Depth=2
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    jmp	.LBB305_6                                      ; Jump instruction
    .LBB305_9:                              #   in Loop: Header=BB305_2 Depth=1
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    lea	rdx, [rsp + 48]
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    .LBB305_10:                             #   in Loop: Header=BB305_2 Depth=1
    jmp	.LBB305_2                                      ; Jump instruction
    .LBB305_11:
    jmp	.LBB305_12                                     ; Jump instruction
    .LBB305_12:
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
.globl	"??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z" # -- Begin function ??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z": # @"??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .seh_proc "??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r8b
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    sar	rax
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    .LBB306_1:                              # =>This Inner Loop Header: Depth=1
    cmp	qword ptr [rsp + 64], 0                        ; Compare values
    jle	.LBB306_3                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB306_1 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 47]
    lea	r9, [rsp + 48]
    mov	byte ptr [rsp + 32], al
    call	"??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z" ; Function call
    jmp	.LBB306_1                                      ; Jump instruction
    .LBB306_3:
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
.globl	"??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z" # -- Begin function ??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z": # @"??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .seh_proc "??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r8b
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    .LBB307_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    cmp	rax, 2                                         ; Compare values
    jl	.LBB307_4                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB307_1 Depth=1
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 47]
    call	"??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z" ; Function call
# %bb.3:                                #   in Loop: Header=BB307_1 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    jmp	.LBB307_1                                      ; Jump instruction
    .LBB307_4:
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z"
.globl	"??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z" # -- Begin function ??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z": # @"??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .seh_proc "??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 168
    .seh_stackalloc 168
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 160], rcx                     ; Move 64-bit value
    mov	byte ptr [rsp + 159], r9b
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rdx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 136]                     ; Move 64-bit value
    sub	rcx, rdx
    sar	rcx, 4
    sar	rcx
    shl	rcx, 4
    add	rax, rcx
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    call	"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 127]
    call	"??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    .LBB308_1:                              # =>This Inner Loop Header: Depth=1
    mov	rcx, qword ptr [rsp + 136]                     ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	rcx, qword ptr [rsp + 112]                     ; Compare values
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    jae	.LBB308_4                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB308_1 Depth=1
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    mov	cl, al
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    jne	.LBB308_4                                      ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB308_1 Depth=1
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    xor	al, -1
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    .LBB308_4:                              #   in Loop: Header=BB308_1 Depth=1
    mov	al, byte ptr [rsp + 63]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB308_5                                      ; Jump instruction
    jmp	.LBB308_6                                      ; Jump instruction
    .LBB308_5:                              #   in Loop: Header=BB308_1 Depth=1
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    jmp	.LBB308_1                                      ; Jump instruction
    .LBB308_6:
    jmp	.LBB308_7                                      ; Jump instruction
    .LBB308_7:                              # =>This Inner Loop Header: Depth=1
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	rcx, qword ptr [rsp + 144]                     ; Compare values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    jae	.LBB308_10                                     ; Jump instruction
# %bb.8:                                #   in Loop: Header=BB308_7 Depth=1
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    mov	cl, al
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    jne	.LBB308_10                                     ; Jump instruction
# %bb.9:                                #   in Loop: Header=BB308_7 Depth=1
    mov	r8, qword ptr [rsp + 104]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    xor	al, -1
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    .LBB308_10:                             #   in Loop: Header=BB308_7 Depth=1
    mov	al, byte ptr [rsp + 47]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB308_11                                     ; Jump instruction
    jmp	.LBB308_12                                     ; Jump instruction
    .LBB308_11:                             #   in Loop: Header=BB308_7 Depth=1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    jmp	.LBB308_7                                      ; Jump instruction
    .LBB308_12:
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    .LBB308_13:                             # =>This Loop Header: Depth=1
#     Child Loop BB308_14 Depth 2
#     Child Loop BB308_27 Depth 2
    jmp	.LBB308_14                                     ; Jump instruction
    .LBB308_14:                             #   Parent Loop BB308_13 Depth=1
# =>  This Inner Loop Header: Depth=2
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jae	.LBB308_26                                     ; Jump instruction
# %bb.15:                               #   in Loop: Header=BB308_14 Depth=2
    mov	r8, qword ptr [rsp + 96]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB308_16                                     ; Jump instruction
    jmp	.LBB308_17                                     ; Jump instruction
    .LBB308_16:                             #   in Loop: Header=BB308_14 Depth=2
    jmp	.LBB308_25                                     ; Jump instruction
    .LBB308_17:                             #   in Loop: Header=BB308_14 Depth=2
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB308_18                                     ; Jump instruction
    jmp	.LBB308_19                                     ; Jump instruction
    .LBB308_18:                             #   in Loop: Header=BB308_13 Depth=1
    jmp	.LBB308_26                                     ; Jump instruction
    .LBB308_19:                             #   in Loop: Header=BB308_14 Depth=2
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 96]                      ; Compare values
    je	.LBB308_21                                      ; Jump instruction
# %bb.20:                               #   in Loop: Header=BB308_14 Depth=2
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    jmp	.LBB308_22                                     ; Jump instruction
    .LBB308_21:                             #   in Loop: Header=BB308_14 Depth=2
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    .LBB308_22:                             #   in Loop: Header=BB308_14 Depth=2
    jmp	.LBB308_23                                     ; Jump instruction
    .LBB308_23:                             #   in Loop: Header=BB308_14 Depth=2
    jmp	.LBB308_24                                     ; Jump instruction
    .LBB308_24:                             #   in Loop: Header=BB308_14 Depth=2
    jmp	.LBB308_25                                     ; Jump instruction
    .LBB308_25:                             #   in Loop: Header=BB308_14 Depth=2
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    jmp	.LBB308_14                                     ; Jump instruction
    .LBB308_26:                             #   in Loop: Header=BB308_13 Depth=1
    jmp	.LBB308_27                                     ; Jump instruction
    .LBB308_27:                             #   Parent Loop BB308_13 Depth=1
# =>  This Inner Loop Header: Depth=2
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 88]                      ; Compare values
    jae	.LBB308_38                                     ; Jump instruction
# %bb.28:                               #   in Loop: Header=BB308_27 Depth=2
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB308_29                                     ; Jump instruction
    jmp	.LBB308_30                                     ; Jump instruction
    .LBB308_29:                             #   in Loop: Header=BB308_27 Depth=2
    jmp	.LBB308_37                                     ; Jump instruction
    .LBB308_30:                             #   in Loop: Header=BB308_27 Depth=2
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rcx, [rsp + 159]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB308_31                                     ; Jump instruction
    jmp	.LBB308_32                                     ; Jump instruction
    .LBB308_31:                             #   in Loop: Header=BB308_13 Depth=1
    jmp	.LBB308_38                                     ; Jump instruction
    .LBB308_32:                             #   in Loop: Header=BB308_27 Depth=2
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 80]                      ; Compare values
    je	.LBB308_34                                      ; Jump instruction
# %bb.33:                               #   in Loop: Header=BB308_27 Depth=2
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    .LBB308_34:                             #   in Loop: Header=BB308_27 Depth=2
    jmp	.LBB308_35                                     ; Jump instruction
    .LBB308_35:                             #   in Loop: Header=BB308_27 Depth=2
    jmp	.LBB308_36                                     ; Jump instruction
    .LBB308_36:                             #   in Loop: Header=BB308_27 Depth=2
    jmp	.LBB308_37                                     ; Jump instruction
    .LBB308_37:                             #   in Loop: Header=BB308_27 Depth=2
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB308_27                                     ; Jump instruction
    .LBB308_38:                             #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 136]                     ; Compare values
    jne	.LBB308_41                                     ; Jump instruction
# %bb.39:                               #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jne	.LBB308_41                                     ; Jump instruction
# %bb.40:
    mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rsp + 112]
    lea	r8, [rsp + 104]
    call	"??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 168
    ret                                                ; Return from function
    .LBB308_41:                             #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 136]                     ; Compare values
    jne	.LBB308_45                                     ; Jump instruction
# %bb.42:                               #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 96]                      ; Compare values
    je	.LBB308_44                                      ; Jump instruction
# %bb.43:                               #   in Loop: Header=BB308_13 Depth=1
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    .LBB308_44:                             #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    jmp	.LBB308_51                                     ; Jump instruction
    .LBB308_45:                             #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jne	.LBB308_49                                     ; Jump instruction
# %bb.46:                               #   in Loop: Header=BB308_13 Depth=1
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rcx, -16
    mov	qword ptr [rsp + 112], rcx                     ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    je	.LBB308_48                                      ; Jump instruction
# %bb.47:                               #   in Loop: Header=BB308_13 Depth=1
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    .LBB308_48:                             #   in Loop: Header=BB308_13 Depth=1
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    add	rdx, -16
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    jmp	.LBB308_50                                     ; Jump instruction
    .LBB308_49:                             #   in Loop: Header=BB308_13 Depth=1
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rdx, -16
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    .LBB308_50:                             #   in Loop: Header=BB308_13 Depth=1
    jmp	.LBB308_51                                     ; Jump instruction
    .LBB308_51:                             #   in Loop: Header=BB308_13 Depth=1
    jmp	.LBB308_13                                     ; Jump instruction
    .seh_endproc
    .section	.text,"xr",discard,"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z"
.globl	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" # -- Begin function ??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z
    .p2align	4, 0x90
    "??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z": # @"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z"
    .seh_proc "??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z"      ; Function call
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
.globl	"??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" # -- Begin function ??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z
    .p2align	4, 0x90
    "??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z": # @"??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
    .seh_proc "??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    .LBB310_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 40]                      ; Compare values
    je	.LBB310_3                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB310_1 Depth=1
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rdx, -16
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rcx, -16
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    jmp	.LBB310_1                                      ; Jump instruction
    .LBB310_3:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z"
.globl	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" # -- Begin function ??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z
    .p2align	4, 0x90
    "??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z": # @"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z"
    .seh_proc "??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax + 8], xmm0                    ; Load 64-bit double
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z"
.globl	"??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z" # -- Begin function ??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z
    .p2align	4, 0x90
    "??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z": # @"??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z"
    .seh_proc "??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	al, 1
    ucomisd	xmm0, xmm1
    mov	byte ptr [rsp + 7], al          # 1-byte Spill
    ja	.LBB312_4                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    xor	eax, eax
# kill: def $al killed $al killed $eax
    ucomisd	xmm0, xmm1
    mov	byte ptr [rsp + 6], al          # 1-byte Spill
    ja	.LBB312_3                                       ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsd	xmm1, qword ptr [rax + 8]       # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    ucomisd	xmm0, xmm1
    seta	al
    mov	byte ptr [rsp + 6], al          # 1-byte Spill
    .LBB312_3:
    mov	al, byte ptr [rsp + 6]          # 1-byte Reload
    mov	byte ptr [rsp + 7], al          # 1-byte Spill
    .LBB312_4:
    mov	al, byte ptr [rsp + 7]          # 1-byte Reload
    and	al, 1
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
.globl	"??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z" # -- Begin function ??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z": # @"??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
    .seh_proc "??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	al, byte ptr [rsp + 160]
    mov	byte ptr [rsp + 119], al
    mov	qword ptr [rsp + 104], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, 1
    sar	rax
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    .LBB313_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    jge	.LBB313_5                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB313_1 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    shl	rax
    add	rax, 2
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, 1
    shl	rax, 4
    add	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    lea	rcx, [rsp + 119]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB313_3                                      ; Jump instruction
    jmp	.LBB313_4                                      ; Jump instruction
    .LBB313_3:                              #   in Loop: Header=BB313_1 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    .LBB313_4:                              #   in Loop: Header=BB313_1 Depth=1
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB313_1                                      ; Jump instruction
    .LBB313_5:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    jne	.LBB313_8                                      ; Jump instruction
# %bb.6:
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	ecx, 2
    cqo
    idiv	rcx
    cmp	rdx, 0                                         ; Compare values
    jne	.LBB313_8                                      ; Jump instruction
# %bb.7:
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, 1
    shl	rax, 4
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, 1
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    .LBB313_8:
    mov	r9, qword ptr [rsp + 104]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 55]
    mov	byte ptr [rsp + 32], al
    call	"??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
.globl	"??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z" # -- Begin function ??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z": # @"??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
    .seh_proc "??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	al, byte ptr [rsp + 128]
    mov	byte ptr [rsp + 87], al
    mov	qword ptr [rsp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rax, 1
    sar	rax
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    .LBB314_1:                              # =>This Inner Loop Header: Depth=1
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	rcx, qword ptr [rsp + 56]                      ; Compare values
    mov	byte ptr [rsp + 39], al         # 1-byte Spill
    jge	.LBB314_3                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB314_1 Depth=1
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    lea	rcx, [rsp + 87]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    mov	byte ptr [rsp + 39], al         # 1-byte Spill
    .LBB314_3:                              #   in Loop: Header=BB314_1 Depth=1
    mov	al, byte ptr [rsp + 39]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB314_4                                      ; Jump instruction
    jmp	.LBB314_6                                      ; Jump instruction
    .LBB314_4:                              #   in Loop: Header=BB314_1 Depth=1
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
# %bb.5:                                #   in Loop: Header=BB314_1 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rax, 1
    sar	rax
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    jmp	.LBB314_1                                      ; Jump instruction
    .LBB314_6:
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
.globl	"??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z" # -- Begin function ??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z": # @"??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .seh_proc "??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	byte ptr [rsp + 87], r8b
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rcx, rax
    sar	rcx, 4
    mov	eax, 2
    cmp	rax, rcx                                       ; Compare values
    jg	.LBB315_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 47]
    lea	r9, [rsp + 48]
    mov	byte ptr [rsp + 32], al
    call	"??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z" ; Function call
    .LBB315_2:
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z"
.globl	"??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z" # -- Begin function ??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z": # @"??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z"
    .seh_proc "??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	al, byte ptr [rsp + 128]
    mov	byte ptr [rsp + 87], al
    mov	qword ptr [rsp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
    mov	r9, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	r8, rax
    sar	r8, 4
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 47]
    xor	edx, edx
# kill: def $rdx killed $edx
    mov	byte ptr [rsp + 32], al
    call	"??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z" ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
.globl	"??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" # -- Begin function ??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z": # @"??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
    .seh_proc "??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 103], r9b
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	eax, 40
    cmp	rax, qword ptr [rsp + 64]                      ; Compare values
    jge	.LBB317_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 1
    sar	rax, 3
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rax, 4
    add	r8, rax
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]
    call	"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 4
    add	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    shl	rax, 4
    add	rcx, rax
    mov	r9b, byte ptr [rsp + 46]
    call	"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    shl	rax, 4
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 48]
    shl	rax, 4
    add	rcx, rax
    mov	r9b, byte ptr [rsp + 45]
    call	"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" ; Function call
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rsp + 56]
    shl	rax, 4
    add	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    mov	r9b, byte ptr [rsp + 44]
    call	"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" ; Function call
    jmp	.LBB317_3                                      ; Jump instruction
    .LBB317_2:
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 43]
    call	"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" ; Function call
    .LBB317_3:
    nop
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
.globl	"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" # -- Begin function ??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z
    .p2align	4, 0x90
    "??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z": # @"??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .seh_proc "??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rax, -16
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
.globl	"??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" # -- Begin function ??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z
    .p2align	4, 0x90
    "??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z": # @"??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .seh_proc "??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"
.globl	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z" # -- Begin function ??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z
    .p2align	4, 0x90
    "??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z": # @"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"
    .seh_proc "??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?swap@?$pair@OO@std@@QEAAXAEAU12@@Z"         ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z"
.globl	"??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z" # -- Begin function ??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z
    .p2align	4, 0x90
    "??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z": # @"??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z"
    .seh_proc "??$?0AEAPEAU?$pair@OO@std@@AEAPEAU01@$0A@@?$pair@PEAU?$pair@OO@std@@PEAU12@@std@@QEAA@AEAPEAU?$pair@OO@1@0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
.globl	"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z" # -- Begin function ??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z
    .p2align	4, 0x90
    "??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z": # @"??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
    .seh_proc "??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r9b
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB322_1                                      ; Jump instruction
    jmp	.LBB322_2                                      ; Jump instruction
    .LBB322_1:
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    .LBB322_2:
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB322_3                                      ; Jump instruction
    jmp	.LBB322_6                                      ; Jump instruction
    .LBB322_3:
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB322_4                                      ; Jump instruction
    jmp	.LBB322_5                                      ; Jump instruction
    .LBB322_4:
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"  ; Function call
    .LBB322_5:
    jmp	.LBB322_6                                      ; Jump instruction
    .LBB322_6:
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?swap@?$pair@OO@std@@QEAAXAEAU12@@Z"
.globl	"?swap@?$pair@OO@std@@QEAAXAEAU12@@Z" # -- Begin function ?swap@?$pair@OO@std@@QEAAXAEAU12@@Z
    .p2align	4, 0x90
    "?swap@?$pair@OO@std@@QEAAXAEAU12@@Z":  # @"?swap@?$pair@OO@std@@QEAAXAEAU12@@Z"
    .seh_proc "?swap@?$pair@OO@std@@QEAAXAEAU12@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rdx, 8
    add	rcx, 8
    call	"??$swap@O$0A@@std@@YAXAEAO0@Z"               ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
.globl	"??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z" # -- Begin function ??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z
    .p2align	4, 0x90
    "??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z": # @"??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
    .seh_proc "??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    je	.LBB324_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB324_3                                      ; Jump instruction
    .LBB324_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB324_3:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
.globl	"??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z" # -- Begin function ??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z
    .p2align	4, 0x90
    "??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z": # @"??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
    .seh_proc "??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 16
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
.globl	"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z" # -- Begin function ??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z
    .p2align	4, 0x90
    "??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z": # @"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .Lfunc_begin15:
    .seh_proc "??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 8], rax                       ; Move 64-bit value
    mov	qword ptr [rbp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 4
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 4
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jne	.LBB326_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ" ; Function call
    .LBB326_2:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    call	"?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z" ; Function call
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 48]
    call	"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    add	rax, 16
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, qword ptr [rbp - 96]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    call	"??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB326_5                                      ; Jump instruction
# %bb.3:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp146:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp147:
    jmp	.LBB326_4                                      ; Jump instruction
    .LBB326_4:
    jmp	.LBB326_9                                      ; Jump instruction
    .LBB326_5:
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp142:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp143:
    jmp	.LBB326_6                                      ; Jump instruction
    .LBB326_6:
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    lea	r8, [rax + rcx + 16]
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 24]                      ; Move 64-bit value
    .Ltmp144:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp145:
    jmp	.LBB326_8                                      ; Jump instruction
    .LBB326_8:
    jmp	.LBB326_9                                      ; Jump instruction
    .LBB326_9:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z" ; Function call
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$7@?0???$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z@4HA":
    .seh_proc "?catch$7@?0???$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB326_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z" ; Function call
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .Lfunc_end15:
    .seh_handlerdata
    .long	("$cppxdata$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z")@IMGREL # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z":
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    "$tryMap$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z":
    .long	0                               # TryLow
    .long	0                               # TryHigh
    .long	1                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$7@?0???$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z":
    .long	.Lfunc_begin15@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp146@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp145@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$7@?0???$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z@4HA"@IMGREL # IP
    .long	1                               # ToState
    .section	.text,"xr",discard,"??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .section	.text,"xr",discard,"??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z"
.globl	"??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z" # -- Begin function ??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z": # @"??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z"
    .seh_proc "??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z"
.globl	"??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z" # -- Begin function ??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z
    .p2align	4, 0x90
    "??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z": # @"??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z"
    .seh_proc "??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z"
.globl	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z" # -- Begin function ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z
    .p2align	4, 0x90
    "??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z": # @"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z"
    .seh_proc "??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"    ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
.globl	"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" # -- Begin function ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z": # @"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    sete	al
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
.globl	"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z" # -- Begin function ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z
    .p2align	4, 0x90
    "?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z": # @"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
    .seh_proc "?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
.globl	"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z" # -- Begin function ??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z": # @"??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z"
.globl	"??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z" # -- Begin function ??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z
    .p2align	4, 0x90
    "??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z": # @"??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z"
    .seh_proc "??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
.globl	"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z" # -- Begin function ??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z
    .p2align	4, 0x90
    "??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z": # @"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .Lfunc_begin16:
    .seh_proc "??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 88], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rbp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 56]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rbp + 80]                      ; Move 64-bit value
    mov	qword ptr [rbp + 48], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 40], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp + 24], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp + 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	qword ptr [rbp], rax                           ; Move 64-bit value
    cmp	qword ptr [rbp + 72], 0                        ; Compare values
    jne	.LBB334_2                                      ; Jump instruction
# %bb.1:
    jmp	.LBB334_28                                     ; Jump instruction
    .LBB334_2:
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp]                           ; Compare values
    jbe	.LBB334_15                                     ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 16]                      ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 4
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    sub	rcx, qword ptr [rbp - 8]
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB334_5                                      ; Jump instruction
# %bb.4:
    call	"?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ" ; Function call
    .LBB334_5:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    add	rax, rdx
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z" ; Function call
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 40]                      ; Move 64-bit value
    lea	rdx, [rbp - 24]
    call	"??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	rcx, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    shl	rax, 4
    add	r8, rax
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]                      ; Move 64-bit value
    .Ltmp156:
    call	"??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp157:
    jmp	.LBB334_6                                      ; Jump instruction
    .LBB334_6:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp + 72], 1                        ; Compare values
    jne	.LBB334_10                                     ; Jump instruction
# %bb.7:
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 8]                       ; Compare values
    jne	.LBB334_10                                     ; Jump instruction
# %bb.8:
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    .Ltmp162:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp163:
    jmp	.LBB334_9                                      ; Jump instruction
    .LBB334_9:
    jmp	.LBB334_14                                     ; Jump instruction
    .LBB334_10:
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    .Ltmp158:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp159:
    jmp	.LBB334_11                                     ; Jump instruction
    .LBB334_11:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    shl	rax, 4
    add	r8, rax
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax, 4
    add	r8, rax
    mov	rdx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    .Ltmp160:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp161:
    jmp	.LBB334_13                                     ; Jump instruction
    .LBB334_13:
    jmp	.LBB334_14                                     ; Jump instruction
    .LBB334_14:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 24]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    call	"?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z" ; Function call
    jmp	.LBB334_27                                     ; Jump instruction
    .LBB334_15:
    mov	rax, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 4
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp - 64]                      ; Compare values
    jae	.LBB334_21                                     ; Jump instruction
# %bb.16:
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax, 4
    mov	rcx, r8
    sub	rcx, rax
    mov	rdx, r8
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax, 4
    mov	rdx, r8
    sub	rdx, rax
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    call	"??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" ; Function call
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax, 4
    mov	rdx, rcx
    add	rdx, rax
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]                      ; Move 64-bit value
    .Ltmp152:
    call	"??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp153:
    jmp	.LBB334_20                                     ; Jump instruction
    .LBB334_20:
    jmp	.LBB334_26                                     ; Jump instruction
    .LBB334_21:
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rcx, 4
    add	rax, rcx
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 72]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]                      ; Move 64-bit value
    .Ltmp148:
    call	"??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp149:
    jmp	.LBB334_25                                     ; Jump instruction
    .LBB334_25:
    jmp	.LBB334_26                                     ; Jump instruction
    .LBB334_26:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    call	"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z" ; Function call
    .LBB334_27:
    jmp	.LBB334_28                                     ; Jump instruction
    .LBB334_28:
    add	rsp, 224
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$12@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA":
    .seh_proc "?catch$12@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB334_12:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 24]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    call	"?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z" ; Function call
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .seh_handlerdata
    .long	("$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$17@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA":
    .seh_proc "?catch$17@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB334_17:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	rcx, rax
    shl	rcx, 5
    mov	rdx, r8
    add	rdx, rcx
    shl	rax, 4
    mov	rcx, r8
    add	rcx, rax
    .Ltmp154:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp155:
    jmp	.LBB334_19                                     ; Jump instruction
    .LBB334_19:
    mov	r8, qword ptr [rbp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax, 4
    add	r8, rax
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax
    shl	rax, 4
    add	rcx, rax
    call	"??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" ; Function call
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .seh_handlerdata
    .long	("$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$18@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA":
    .seh_proc "?catch$18@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB334_18:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    call	"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z" ; Function call
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 72]                      ; Move 64-bit value
    shl	rax, 4
    add	rcx, rax
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .seh_handlerdata
    .long	("$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$22@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA":
    .seh_proc "?catch$22@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB334_22:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	r9, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp + 48]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    .Ltmp150:
    call	"??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    .Ltmp151:
    jmp	.LBB334_24                                     ; Jump instruction
    .LBB334_24:
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .seh_handlerdata
    .long	("$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$23@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA":
    .seh_proc "?catch$23@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB334_23:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 8]                        ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    call	"?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z" ; Function call
    mov	r8, qword ptr [rbp + 40]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 72]                      ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    int3
    .Lfunc_end16:
    .seh_handlerdata
    .long	("$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	429065506                       # MagicNumber
    .long	10                              # MaxState
    .long	("$stateUnwindMap$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # UnwindMap
    .long	5                               # NumTryBlocks
    .long	("$tryMap$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # TryBlockMap
    .long	16                              # IPMapEntries
    .long	("$ip2state$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # IPToStateXData
    .long	216                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    .long	3                               # ToState
    .long	0                               # Action
    .long	3                               # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    .long	7                               # ToState
    .long	0                               # Action
    .long	7                               # ToState
    .long	0                               # Action
    "$tryMap$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	0                               # TryLow
    .long	0                               # TryHigh
    .long	1                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # HandlerArray
    .long	2                               # TryLow
    .long	2                               # TryHigh
    .long	5                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$1$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # HandlerArray
    .long	4                               # TryLow
    .long	4                               # TryHigh
    .long	5                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$2$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # HandlerArray
    .long	6                               # TryLow
    .long	6                               # TryHigh
    .long	9                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$3$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # HandlerArray
    .long	8                               # TryLow
    .long	8                               # TryHigh
    .long	9                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$4$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$12@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$handlerMap$1$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$17@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$handlerMap$2$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$18@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$handlerMap$3$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$22@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$handlerMap$4$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$23@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z":
    .long	.Lfunc_begin16@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp156@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp161@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	.Ltmp152@IMGREL+1               # IP
    .long	2                               # ToState
    .long	.Ltmp153@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	.Ltmp148@IMGREL+1               # IP
    .long	6                               # ToState
    .long	.Ltmp149@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$12@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # IP
    .long	1                               # ToState
    .long	"?catch$17@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # IP
    .long	3                               # ToState
    .long	.Ltmp154@IMGREL+1               # IP
    .long	4                               # ToState
    .long	.Ltmp155@IMGREL+1               # IP
    .long	3                               # ToState
    .long	"?catch$18@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # IP
    .long	5                               # ToState
    .long	"?catch$22@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # IP
    .long	7                               # ToState
    .long	.Ltmp150@IMGREL+1               # IP
    .long	8                               # ToState
    .long	.Ltmp151@IMGREL+1               # IP
    .long	7                               # ToState
    .long	"?catch$23@?0???$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z@4HA"@IMGREL # IP
    .long	9                               # ToState
    .section	.text,"xr",discard,"??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .section	.text,"xr",discard,"?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z"
.globl	"?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z" # -- Begin function ?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z
    .p2align	4, 0x90
    "?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z": # @"?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z"
    .seh_proc "?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    call	"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAA@PEAU?$pair@OO@1@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
.globl	"??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z" # -- Begin function ??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z": # @"??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .seh_proc "??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 96], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 72]
    call	"??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z" ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	byte ptr [rsp + 63], 1
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    call	"??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z" ; Function call
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z" ; Function call
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    shl	rax, 4
    add	rax, qword ptr [rsp + 88]
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
.globl	"??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" # -- Begin function ??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z
    .p2align	4, 0x90
    "??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z": # @"??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
    .seh_proc "??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    .LBB337_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 40]                      ; Compare values
    je	.LBB337_4                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB337_1 Depth=1
    mov	rdx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z" ; Function call
# %bb.3:                                #   in Loop: Header=BB337_1 Depth=1
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    jmp	.LBB337_1                                      ; Jump instruction
    .LBB337_4:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z"
.globl	"??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z" # -- Begin function ??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z": # @"??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z"
    .seh_proc "??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z"
.globl	"??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z" # -- Begin function ??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z
    .p2align	4, 0x90
    "??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z": # @"??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z"
    .seh_proc "??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    shl	rax, 4
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
.globl	"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z" # -- Begin function ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z": # @"??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    sete	al
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
.globl	"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z" # -- Begin function ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z
    .p2align	4, 0x90
    "?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z": # @"?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
    .seh_proc "?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
.globl	"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ": # @"??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 16
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ"
.globl	"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ" # -- Begin function ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ
    .p2align	4, 0x90
    "??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ": # @"??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ"
    .seh_proc "??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
.globl	"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z" # -- Begin function ??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z
    .p2align	4, 0x90
    "??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z": # @"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .Lfunc_begin17:
    .seh_proc "??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 88], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 72], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx       # 8-byte Spill ; Move 64-bit value
    mov	dword ptr [rbp + 68], 0                        ; Move 32-bit value
    lea	rcx, [rbp + 48]
    xor	r8d, r8d
    call	"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z" ; Function call
    lea	rcx, [rbp + 48]
    call	"??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB344_1                                      ; Jump instruction
    jmp	.LBB344_9                                      ; Jump instruction
    .LBB344_1:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    lea	rdx, [rbp + 32]
    mov	qword ptr [rbp - 40], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    .Ltmp164:
    call	"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp165:
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB344_2                                      ; Jump instruction
    .LBB344_2:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 80]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    movsxd	rcx, dword ptr [rcx + 4]                    ; Move 32-bit value
    add	rax, rcx
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 16]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rbp
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z" ; Function call
    mov	r10, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    .Ltmp166:
    mov	rax, rsp
    mov	qword ptr [rax + 48], r10                      ; Move 64-bit value
    lea	r10, [rbp + 68]
    mov	qword ptr [rax + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp - 16]
    call	"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z" ; Function call
    .Ltmp167:
    jmp	.LBB344_3                                      ; Jump instruction
    .LBB344_3:
    lea	rcx, [rbp + 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    jmp	.LBB344_8                                      ; Jump instruction
    .LBB344_7:                              # Block address taken
    $ehgcr_344_7:
    jmp	.LBB344_8                                      ; Jump instruction
    .LBB344_8:
    jmp	.LBB344_9                                      ; Jump instruction
    .LBB344_9:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp + 68]                      ; Move 32-bit value
    .Ltmp170:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp171:
    jmp	.LBB344_10                                     ; Jump instruction
    .LBB344_10:
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA":
    .seh_proc "?dtor$4@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"
    .LBB344_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$5@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA":
    .seh_proc "?catch$5@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB344_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp168:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp169:
    jmp	.LBB344_6                                      ; Jump instruction
    .LBB344_6:
    lea	rax, [rip + .LBB344_7]
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$11@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA":
    .seh_proc "?dtor$11@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"
    .LBB344_11:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end17:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z":
    .long	429065506                       # MagicNumber
    .long	4                               # MaxState
    .long	("$stateUnwindMap$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z")@IMGREL # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z")@IMGREL # IPToStateXData
    .long	216                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z":
    .long	-1                              # ToState
    .long	"?dtor$11@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	1                               # ToState
    .long	"?dtor$4@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    "$tryMap$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z":
    .long	1                               # TryLow
    .long	2                               # TryHigh
    .long	3                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$5@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"@IMGREL # Handler
    .long	88                              # ParentFrameOffset
    "$ip2state$??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z":
    .long	.Lfunc_begin17@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp164@IMGREL+1               # IP
    .long	2                               # ToState
    .long	.Ltmp170@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp171@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$5@?0???$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z@4HA"@IMGREL # IP
    .long	3                               # ToState
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .section	.text,"xr",discard,"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
.globl	"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z" # -- Begin function ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z
    .p2align	4, 0x90
    "??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z": # @"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
    .Lfunc_begin18:
    .seh_proc "??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    and	r8b, 1
    mov	byte ptr [rbp - 9], r8b
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    call	"??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 8
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	dl, byte ptr [rbp - 9]
    .Ltmp172:
    and	dl, 1
    call	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z" ; Function call
    .Ltmp173:
    mov	byte ptr [rbp - 33], al         # 1-byte Spill
    jmp	.LBB345_1                                      ; Jump instruction
    .LBB345_1:
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	dl, byte ptr [rbp - 33]         # 1-byte Reload
    and	dl, 1
    mov	byte ptr [rcx], dl
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z")@IMGREL
    .section	.text,"xr",discard,"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA":
    .seh_proc "?dtor$2@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA"
    .LBB345_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end18:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
    .p2align	2, 0x0
    "$cppxdata$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z@4HA"@IMGREL # Action
    "$ip2state$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z":
    .long	.Lfunc_begin18@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp172@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp173@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z"
    .section	.text,"xr",discard,"??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
.globl	"??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" # -- Begin function ??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
    .p2align	4, 0x90
    "??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ": # @"??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
    .seh_proc "??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	al, byte ptr [rax + 8]
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
.globl	"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z" # -- Begin function ??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
    .p2align	4, 0x90
    "??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z": # @"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .Lfunc_begin19:
    .seh_proc "??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    lea	rcx, [rbp - 20]
    xor	edx, edx
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
    mov	rax, qword ptr [rip + "?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"] ; Move 64-bit value
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    lea	rcx, [rip + "?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
    call	"??Bid@locale@std@@QEAA_KXZ"                  ; Function call
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    .Ltmp174:
    call	"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z" ; Function call
    .Ltmp175:
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB347_1                                      ; Jump instruction
    .LBB347_1:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 48], 0                        ; Compare values
    jne	.LBB347_12                                     ; Jump instruction
# %bb.2:
    cmp	qword ptr [rbp - 32], 0                        ; Compare values
    je	.LBB347_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    jmp	.LBB347_11                                     ; Jump instruction
    .LBB347_4:
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    .Ltmp176:
    lea	rcx, [rbp - 32]
    call	"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" ; Function call
    .Ltmp177:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB347_5                                      ; Jump instruction
    .LBB347_5:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, -1                                        ; Compare values
    jne	.LBB347_8                                      ; Jump instruction
# %bb.6:
    .Ltmp180:
    call	"?_Throw_bad_cast@std@@YAXXZ"                 ; Function call
    .Ltmp181:
    jmp	.LBB347_7                                      ; Jump instruction
    .LBB347_7:
    .LBB347_8:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    .Ltmp178:
    call	"?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z" ; Function call
    .Ltmp179:
    jmp	.LBB347_9                                      ; Jump instruction
    .LBB347_9:
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rip + "?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"], rax ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ" ; Function call
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB347_11                                     ; Jump instruction
    .LBB347_11:
    jmp	.LBB347_12                                     ; Jump instruction
    .LBB347_12:
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0???$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$10@?0???$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"
    .LBB347_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0???$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$13@?0???$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"
    .LBB347_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end19:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0???$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$10@?0???$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z":
    .long	.Lfunc_begin19@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp174@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp178@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp179@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .section	.text,"xr",discard,"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"
.globl	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ" # -- Begin function ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
    .p2align	4, 0x90
    "?getloc@ios_base@std@@QEBA?AVlocale@2@XZ": # @"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"
    .seh_proc "?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 64]                      ; Move 64-bit value
    call	"??0locale@std@@QEAA@AEBV01@@Z"               ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
.globl	"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z" # -- Begin function ?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z
    .p2align	4, 0x90
    "?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z": # @"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .seh_proc "?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	qword ptr [rsp + 120], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	r10, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	r11, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	rsi, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	rax, qword ptr [r9]                            ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r9 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    lea	r8, [rsp + 64]
    lea	r9, [rsp + 80]
    mov	qword ptr [rsp + 32], rsi                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], r11                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], r10                      ; Move 64-bit value
    call	qword ptr [rax + 80]                          ; Function call
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ"
.globl	"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ" # -- Begin function ??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ": # @"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	byte ptr [rax + 8], 1
    mov	byte ptr [rax + 9], 0
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z"
.globl	"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z" # -- Begin function ??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z": # @"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z"
    .seh_proc "??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rax, 0
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    setne	cl
    xor	cl, -1
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    mov	byte ptr [rax + 9], 0
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1locale@std@@QEAA@XZ"
.globl	"??1locale@std@@QEAA@XZ"        # -- Begin function ??1locale@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1locale@std@@QEAA@XZ":               # @"??1locale@std@@QEAA@XZ"
    .seh_proc "??1locale@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB352_4                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 16]                          ; Function call
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    cmp	rax, 0                                         ; Compare values
    je	.LBB352_3                                       ; Jump instruction
# %bb.2:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	edx, 1
    call	qword ptr [rax]                               ; Function call
    .LBB352_3:
    jmp	.LBB352_4                                      ; Jump instruction
    .LBB352_4:
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
.globl	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" # -- Begin function ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
    .p2align	4, 0x90
    "?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z": # @"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
    .seh_proc "?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    and	r8b, 1
    mov	byte ptr [rsp + 71], r8b
    mov	dword ptr [rsp + 64], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	al, byte ptr [rsp + 71]
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    call	"?rdstate@ios_base@std@@QEBAHXZ"              ; Function call
    mov	r8b, byte ptr [rsp + 47]        # 1-byte Reload
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	edx, eax
    or	edx, dword ptr [rsp + 64]
    and	r8b, 1
    call	"?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
.globl	"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" # -- Begin function ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ": # @"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_proc "??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
.globl	"??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" # -- Begin function ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
    .p2align	4, 0x90
    "??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z": # @"??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .seh_proc "??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rax, 0
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 40], 0                        ; Compare values
    je	.LBB355_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    .LBB355_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
.globl	"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z" # -- Begin function ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z
    .p2align	4, 0x90
    "?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z": # @"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .Lfunc_begin20:
    .seh_proc "?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 160
    .seh_stackalloc 160
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 24], -2                       ; Move 64-bit value
    and	dl, 1
    mov	byte ptr [rbp + 22], dl
    mov	qword ptr [rbp + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 8]                       ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?good@ios_base@std@@QEBA_NXZ"                ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB356_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, 2
    xor	r8d, r8d
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    mov	byte ptr [rbp + 23], 0
    jmp	.LBB356_23                                     ; Jump instruction
    .LBB356_2:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp], rax                           ; Move 64-bit value
    cmp	qword ptr [rbp], 0                             ; Compare values
    je	.LBB356_4                                       ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rbp]                           ; Move 64-bit value
    call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ" ; Function call
    .LBB356_4:
    mov	byte ptr [rbp - 1], 0
    test	byte ptr [rbp + 22], 1                        ; Test values
    jne	.LBB356_20                                     ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 1
    cmp	eax, 0                                         ; Compare values
    je	.LBB356_20                                      ; Jump instruction
# %bb.6:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    lea	rdx, [rbp - 32]
    mov	qword ptr [rbp - 64], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    .Ltmp182:
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp183:
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB356_7                                      ; Jump instruction
    .LBB356_7:
    lea	rcx, [rbp - 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rcx, rax
    .Ltmp184:
    call	"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    .Ltmp185:
    mov	dword ptr [rbp - 68], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB356_8                                      ; Jump instruction
    .LBB356_8:
    mov	eax, dword ptr [rbp - 68]       # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rbp - 36], eax                      ; Move 32-bit value
    .LBB356_9:                              # =>This Inner Loop Header: Depth=1
    mov	eax, dword ptr [rbp - 36]                      ; Move 32-bit value
    mov	dword ptr [rbp - 72], eax       # 4-byte Spill ; Move 32-bit value
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rbp - 72]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB356_10                                     ; Jump instruction
    jmp	.LBB356_12                                     ; Jump instruction
    .LBB356_10:
    mov	byte ptr [rbp - 1], 1
    jmp	.LBB356_19                                     ; Jump instruction
    .LBB356_12:                             #   in Loop: Header=BB356_9 Depth=1
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	ecx, dword ptr [rbp - 36]                      ; Move 32-bit value
    call	"?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	r8b, al
    mov	edx, 72
    call	"?is@?$ctype@D@std@@QEBA_NFD@Z"               ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB356_14                                     ; Jump instruction
# %bb.13:
    jmp	.LBB356_19                                     ; Jump instruction
    .LBB356_14:                             #   in Loop: Header=BB356_9 Depth=1
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rcx, rax
    .Ltmp186:
    call	"?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    .Ltmp187:
    mov	dword ptr [rbp - 84], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB356_18                                     ; Jump instruction
    .LBB356_16:                             # Block address taken
    $ehgcr_356_16:
    jmp	.LBB356_17                                     ; Jump instruction
    .LBB356_17:
    jmp	.LBB356_20                                     ; Jump instruction
    .LBB356_18:                             #   in Loop: Header=BB356_9 Depth=1
    mov	eax, dword ptr [rbp - 84]       # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rbp - 36], eax                      ; Move 32-bit value
    jmp	.LBB356_9                                      ; Jump instruction
    .LBB356_19:
    jmp	.LBB356_17                                     ; Jump instruction
    .LBB356_20:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB356_22                                      ; Jump instruction
# %bb.21:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, 3
    xor	r8d, r8d
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .LBB356_22:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?good@ios_base@std@@QEBA_NXZ"                ; Function call
    and	al, 1
    mov	byte ptr [rbp + 23], al
    .LBB356_23:
    mov	al, byte ptr [rbp + 23]
    and	al, 1
    add	rsp, 160
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z")@IMGREL
    .section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$11@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA":
    .seh_proc "?dtor$11@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA"
    .LBB356_11:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$15@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA":
    .seh_proc "?catch$15@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB356_15:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    lea	rax, [rip + .LBB356_16]
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .Lfunc_end20:
    .seh_handlerdata
    .long	("$cppxdata$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z")@IMGREL
    .section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z":
    .long	429065506                       # MagicNumber
    .long	3                               # MaxState
    .long	("$stateUnwindMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z")@IMGREL # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z")@IMGREL # IPToStateXData
    .long	152                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$11@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA"@IMGREL # Action
    .long	-1                              # ToState
    .long	0                               # Action
    .long	-1                              # ToState
    .long	0                               # Action
    "$tryMap$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z")@IMGREL # HandlerArray
    "$handlerMap$0$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$15@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z":
    .long	.Lfunc_begin20@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp182@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp184@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp187@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$15@?0??_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
.globl	"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" # -- Begin function ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ": # @"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .Lfunc_begin21:
    .seh_proc "??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 24], 0                        ; Compare values
    je	.LBB357_3                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    .Ltmp188:
    call	rax                                           ; Function call
    .Ltmp189:
    jmp	.LBB357_2                                      ; Jump instruction
    .LBB357_2:
    jmp	.LBB357_3                                      ; Jump instruction
    .LBB357_3:
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0???1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA":
    .seh_proc "?dtor$4@?0???1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA"
    .LBB357_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end21:
    .seh_handlerdata
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .p2align	2, 0x0
    "$cppxdata$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
    .long	-1                              # ToState
    .long	"?dtor$4@?0???1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA"@IMGREL # Action
    "$ip2state$??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
    .long	.Lfunc_begin21@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp188@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp189@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .section	.text,"xr",discard,"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ"
.globl	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" # -- Begin function ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
    .p2align	4, 0x90
    "?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ": # @"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ"
    .seh_proc "?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 72]                      ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?good@ios_base@std@@QEBA_NXZ"
.globl	"?good@ios_base@std@@QEBA_NXZ"  # -- Begin function ?good@ios_base@std@@QEBA_NXZ
    .p2align	4, 0x90
    "?good@ios_base@std@@QEBA_NXZ":         # @"?good@ios_base@std@@QEBA_NXZ"
    .seh_proc "?good@ios_base@std@@QEBA_NXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?rdstate@ios_base@std@@QEBAHXZ"              ; Function call
    cmp	eax, 0                                         ; Compare values
    sete	al
    and	al, 1
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ"
.globl	"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ" # -- Begin function ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
    .p2align	4, 0x90
    "?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ": # @"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ"
    .seh_proc "?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 80]                      ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
.globl	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ" # -- Begin function ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
    .p2align	4, 0x90
    "?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ": # @"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .Lfunc_begin22:
    .seh_proc "?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 24], 0                        ; Compare values
    je	.LBB361_13                                      ; Jump instruction
# %bb.1:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rbp - 40]
    call	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
    lea	rcx, [rbp - 40]
    call	"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB361_2                                      ; Jump instruction
    jmp	.LBB361_11                                     ; Jump instruction
    .LBB361_2:
    mov	dword ptr [rbp - 44], 0                        ; Move 32-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    .Ltmp190:
    call	"?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    .Ltmp191:
    mov	dword ptr [rbp - 60], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB361_8                                      ; Jump instruction
    .LBB361_5:                              # Block address taken
    $ehgcr_361_5:
    jmp	.LBB361_6                                      ; Jump instruction
    .LBB361_6:
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp - 44]                      ; Move 32-bit value
    .Ltmp194:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp195:
    jmp	.LBB361_7                                      ; Jump instruction
    .LBB361_7:
    jmp	.LBB361_11                                     ; Jump instruction
    .LBB361_8:
    mov	eax, dword ptr [rbp - 60]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, -1                                        ; Compare values
    jne	.LBB361_10                                     ; Jump instruction
# %bb.9:
    mov	eax, dword ptr [rbp - 44]                      ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp - 44], eax                      ; Move 32-bit value
    .LBB361_10:
    jmp	.LBB361_6                                      ; Jump instruction
    .LBB361_11:
    lea	rcx, [rbp - 40]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB361_13                                     ; Jump instruction
    .LBB361_13:
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ")@IMGREL
    .section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$3@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA":
    .seh_proc "?catch$3@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB361_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp192:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp193:
    jmp	.LBB361_4                                      ; Jump instruction
    .LBB361_4:
    lea	rax, [rip + .LBB361_5]
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ")@IMGREL
    .section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$12@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA":
    .seh_proc "?dtor$12@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA"
    .LBB361_12:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    lea	rcx, [rbp - 40]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end22:
    .seh_handlerdata
    .section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .p2align	2, 0x0
    "$cppxdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ":
    .long	429065506                       # MagicNumber
    .long	3                               # MaxState
    .long	("$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ")@IMGREL # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ":
    .long	-1                              # ToState
    .long	"?dtor$12@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	0                               # Action
    "$tryMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ")@IMGREL # HandlerArray
    "$handlerMap$0$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$3@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ":
    .long	.Lfunc_begin22@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp190@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp194@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp195@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$3@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .section	.text,"xr",discard,"?flags@ios_base@std@@QEBAHXZ"
.globl	"?flags@ios_base@std@@QEBAHXZ"  # -- Begin function ?flags@ios_base@std@@QEBAHXZ
    .p2align	4, 0x90
    "?flags@ios_base@std@@QEBAHXZ":         # @"?flags@ios_base@std@@QEBAHXZ"
    .seh_proc "?flags@ios_base@std@@QEBAHXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	eax, dword ptr [rax + 24]                      ; Move 32-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
.globl	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" # -- Begin function ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
    .p2align	4, 0x90
    "??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z": # @"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .Lfunc_begin23:
    .seh_proc "??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    lea	rcx, [rbp - 20]
    xor	edx, edx
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
    mov	rax, qword ptr [rip + "?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB"] ; Move 64-bit value
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    lea	rcx, [rip + "?id@?$ctype@D@std@@2V0locale@2@A"]
    call	"??Bid@locale@std@@QEAA_KXZ"                  ; Function call
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    .Ltmp196:
    call	"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z" ; Function call
    .Ltmp197:
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB363_1                                      ; Jump instruction
    .LBB363_1:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 48], 0                        ; Compare values
    jne	.LBB363_12                                     ; Jump instruction
# %bb.2:
    cmp	qword ptr [rbp - 32], 0                        ; Compare values
    je	.LBB363_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    jmp	.LBB363_11                                     ; Jump instruction
    .LBB363_4:
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    .Ltmp198:
    lea	rcx, [rbp - 32]
    call	"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" ; Function call
    .Ltmp199:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB363_5                                      ; Jump instruction
    .LBB363_5:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, -1                                        ; Compare values
    jne	.LBB363_8                                      ; Jump instruction
# %bb.6:
    .Ltmp202:
    call	"?_Throw_bad_cast@std@@YAXXZ"                 ; Function call
    .Ltmp203:
    jmp	.LBB363_7                                      ; Jump instruction
    .LBB363_7:
    .LBB363_8:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    .Ltmp200:
    call	"?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z" ; Function call
    .Ltmp201:
    jmp	.LBB363_9                                      ; Jump instruction
    .LBB363_9:
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rip + "?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB"], rax ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ" ; Function call
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB363_11                                     ; Jump instruction
    .LBB363_11:
    jmp	.LBB363_12                                     ; Jump instruction
    .LBB363_12:
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$10@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA"
    .LBB363_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$13@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA"
    .LBB363_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end23:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$10@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z":
    .long	.Lfunc_begin23@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp196@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp200@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp201@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .section	.text,"xr",discard,"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
.globl	"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" # -- Begin function ?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
    .p2align	4, 0x90
    "?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ": # @"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .seh_proc "?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ" ; Function call
    mov	rcx, rax
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB364_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ" ; Function call
    mov	cl, byte ptr [rax]
    call	"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z" ; Function call
    mov	dword ptr [rsp + 36], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB364_3                                      ; Jump instruction
    .LBB364_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 48]                          ; Function call
    mov	dword ptr [rsp + 36], eax       # 4-byte Spill ; Move 32-bit value
    .LBB364_3:
    mov	eax, dword ptr [rsp + 36]       # 4-byte Reload ; Move 32-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z"
.globl	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" # -- Begin function ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z
    .p2align	4, 0x90
    "?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z": # @"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z"
    .seh_proc "?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	dword ptr [rsp + 4], edx                       ; Move 32-bit value
    mov	dword ptr [rsp], ecx                           ; Move 32-bit value
    mov	eax, dword ptr [rsp]                           ; Move 32-bit value
    cmp	eax, dword ptr [rsp + 4]                       ; Compare values
    sete	al
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"
.globl	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ" # -- Begin function ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
    .p2align	4, 0x90
    "?eof@?$_Narrow_char_traits@DH@std@@SAHXZ": # @"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"
# %bb.0:
    mov	eax, 4294967295
    ret                                                ; Return from function
    .section	.text,"xr",discard,"?is@?$ctype@D@std@@QEBA_NFD@Z"
.globl	"?is@?$ctype@D@std@@QEBA_NFD@Z" # -- Begin function ?is@?$ctype@D@std@@QEBA_NFD@Z
    .p2align	4, 0x90
    "?is@?$ctype@D@std@@QEBA_NFD@Z":        # @"?is@?$ctype@D@std@@QEBA_NFD@Z"
    .seh_proc "?is@?$ctype@D@std@@QEBA_NFD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	byte ptr [rsp + 15], r8b
    mov	word ptr [rsp + 12], dx
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 24]                      ; Move 64-bit value
    movzx	ecx, byte ptr [rsp + 15]
# kill: def $rcx killed $ecx
    movsx	eax, word ptr [rax + 2*rcx]
    movsx	ecx, word ptr [rsp + 12]
    and	eax, ecx
    cmp	eax, 0                                         ; Compare values
    setne	al
    and	al, 1
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z"
.globl	"?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z" # -- Begin function ?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z
    .p2align	4, 0x90
    "?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z": # @"?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z"
    .seh_proc "?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	dword ptr [rsp + 4], ecx                       ; Move 32-bit value
    mov	eax, dword ptr [rsp + 4]                       ; Move 32-bit value
# kill: def $al killed $al killed $eax
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
.globl	"?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" # -- Begin function ?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
    .p2align	4, 0x90
    "?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ": # @"?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .seh_proc "?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ" ; Function call
    mov	rcx, rax
    mov	eax, 1
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB369_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ" ; Function call
    mov	cl, byte ptr [rax]
    call	"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z" ; Function call
    mov	dword ptr [rsp + 52], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB369_6                                      ; Jump instruction
    .LBB369_2:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    mov	dword ptr [rsp + 48], eax       # 4-byte Spill ; Move 32-bit value
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rsp + 48]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB369_3                                      ; Jump instruction
    jmp	.LBB369_4                                      ; Jump instruction
    .LBB369_3:
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB369_5                                      ; Jump instruction
    .LBB369_4:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    .LBB369_5:
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rsp + 52], eax       # 4-byte Spill ; Move 32-bit value
    .LBB369_6:
    mov	eax, dword ptr [rsp + 52]       # 4-byte Reload ; Move 32-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
.globl	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" # -- Begin function ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
    .p2align	4, 0x90
    "??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z": # @"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .Lfunc_begin24:
    .seh_proc "??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    call	"??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?good@ios_base@std@@QEBA_NXZ"                ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB370_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 8], 0
    jmp	.LBB370_7                                      ; Jump instruction
    .LBB370_2:
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 40], 0                        ; Compare values
    je	.LBB370_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp - 24]                      ; Compare values
    jne	.LBB370_5                                      ; Jump instruction
    .LBB370_4:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 8], 1
    jmp	.LBB370_7                                      ; Jump instruction
    .LBB370_5:
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    .Ltmp204:
    call	"?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ" ; Function call
    .Ltmp205:
    jmp	.LBB370_6                                      ; Jump instruction
    .LBB370_6:
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?good@ios_base@std@@QEBA_NXZ"                ; Function call
    mov	cl, al
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    .LBB370_7:
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z")@IMGREL
    .section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$8@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA":
    .seh_proc "?dtor$8@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA"
    .LBB370_8:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end24:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .p2align	2, 0x0
    "$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z":
    .long	-1                              # ToState
    .long	"?dtor$8@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA"@IMGREL # Action
    "$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z":
    .long	.Lfunc_begin24@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp204@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp205@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .section	.text,"xr",discard,"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
.globl	"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" # -- Begin function ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
    .p2align	4, 0x90
    "??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ": # @"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
    .seh_proc "??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	al, byte ptr [rax + 8]
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
.globl	"?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" # -- Begin function ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
    .p2align	4, 0x90
    "?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ": # @"?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .seh_proc "?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 104]                         ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
.globl	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" # -- Begin function ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ": # @"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_proc "??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    call	"?uncaught_exception@std@@YA_NXZ"             ; Function call
    xor	al, -1
    and	al, 1
    mov	byte ptr [rsp + 47], al
    test	byte ptr [rsp + 47], 1                        ; Test values
    je	.LBB373_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ" ; Function call
    .LBB373_2:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
.globl	"??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" # -- Begin function ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
    .p2align	4, 0x90
    "??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z": # @"??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
    .seh_proc "??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rax, 0
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 40], 0                        ; Compare values
    je	.LBB374_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    .LBB374_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
.globl	"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" # -- Begin function ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ": # @"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .Lfunc_begin25:
    .seh_proc "??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 24], 0                        ; Compare values
    je	.LBB375_3                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    .Ltmp206:
    call	rax                                           ; Function call
    .Ltmp207:
    jmp	.LBB375_2                                      ; Jump instruction
    .LBB375_2:
    jmp	.LBB375_3                                      ; Jump instruction
    .LBB375_3:
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA":
    .seh_proc "?dtor$4@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA"
    .LBB375_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end25:
    .seh_handlerdata
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .p2align	2, 0x0
    "$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
    .long	-1                              # ToState
    .long	"?dtor$4@?0???1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ@4HA"@IMGREL # Action
    "$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ":
    .long	.Lfunc_begin25@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp206@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp207@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ"
    .section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
.globl	"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ" # -- Begin function ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ": # @"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .Lfunc_begin26:
    .seh_proc "?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?good@ios_base@std@@QEBA_NXZ"                ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB376_1                                      ; Jump instruction
    jmp	.LBB376_10                                     ; Jump instruction
    .LBB376_1:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 2
    cmp	eax, 0                                         ; Compare values
    je	.LBB376_10                                      ; Jump instruction
# %bb.2:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rcx, rax
    .Ltmp208:
    call	"?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    .Ltmp209:
    mov	dword ptr [rbp - 28], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB376_3                                      ; Jump instruction
    .LBB376_3:
    mov	eax, dword ptr [rbp - 28]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, -1                                        ; Compare values
    jne	.LBB376_9                                      ; Jump instruction
# %bb.4:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp210:
    xor	eax, eax
    mov	r8b, al
    mov	edx, 4
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp211:
    jmp	.LBB376_8                                      ; Jump instruction
    .LBB376_6:                              # Block address taken
    $ehgcr_376_6:
    jmp	.LBB376_7                                      ; Jump instruction
    .LBB376_7:
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .LBB376_8:
    jmp	.LBB376_9                                      ; Jump instruction
    .LBB376_9:
    jmp	.LBB376_10                                     ; Jump instruction
    .LBB376_10:
    jmp	.LBB376_7                                      ; Jump instruction
    .seh_handlerdata
    .long	("$cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ")@IMGREL
    .section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$5@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA":
    .seh_proc "?catch$5@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB376_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    lea	rax, [rip + .LBB376_6]
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ")@IMGREL
    .section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$11@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA":
    .seh_proc "?dtor$11@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA"
    .LBB376_11:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end26:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .p2align	2, 0x0
    "$cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ":
    .long	429065506                       # MagicNumber
    .long	3                               # MaxState
    .long	("$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ")@IMGREL # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ":
    .long	-1                              # ToState
    .long	"?dtor$11@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	0                               # Action
    "$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ")@IMGREL # HandlerArray
    "$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$5@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ":
    .long	.Lfunc_begin26@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp208@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp211@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$5@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .section	.text,"xr",discard,"??Bid@locale@std@@QEAA_KXZ"
.globl	"??Bid@locale@std@@QEAA_KXZ"    # -- Begin function ??Bid@locale@std@@QEAA_KXZ
    .p2align	4, 0x90
    "??Bid@locale@std@@QEAA_KXZ":           # @"??Bid@locale@std@@QEAA_KXZ"
    .seh_proc "??Bid@locale@std@@QEAA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB377_4                                      ; Jump instruction
# %bb.1:
    lea	rcx, [rsp + 44]
    xor	edx, edx
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB377_3                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	ecx, dword ptr [rip + "?_Id_cnt@id@locale@std@@0HA"] ; Move 32-bit value
    add	ecx, 1
    mov	dword ptr [rip + "?_Id_cnt@id@locale@std@@0HA"], ecx ; Move 32-bit value
    movsxd	rcx, ecx
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB377_3:
    lea	rcx, [rsp + 44]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    .LBB377_4:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z"
.globl	"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z" # -- Begin function ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
    .p2align	4, 0x90
    "?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z": # @"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z"
    .seh_proc "?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 24]                      ; Compare values
    jae	.LBB378_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8*rcx]                   ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB378_3                                      ; Jump instruction
    .LBB378_2:
    xor	eax, eax
# kill: def $rax killed $eax
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB378_3                                      ; Jump instruction
    .LBB378_3:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 56], 0                        ; Compare values
    jne	.LBB378_5                                      ; Jump instruction
# %bb.4:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    test	byte ptr [rax + 36], 1                        ; Test values
    jne	.LBB378_6                                      ; Jump instruction
    .LBB378_5:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB378_9                                      ; Jump instruction
    .LBB378_6:
    call	"?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 24]                      ; Compare values
    jae	.LBB378_8                                      ; Jump instruction
# %bb.7:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8*rcx]                   ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB378_9                                      ; Jump instruction
    .LBB378_8:
    mov	qword ptr [rsp + 80], 0                        ; Move 64-bit value
    .LBB378_9:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
.globl	"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" # -- Begin function ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
    .p2align	4, 0x90
    "?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z": # @"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .Lfunc_begin27:
    .seh_proc "?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 24], rcx                      ; Move 64-bit value
    cmp	qword ptr [rbp + 24], 0                        ; Compare values
    je	.LBB379_9                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB379_9                                      ; Jump instruction
# %bb.2:
    mov	ecx, 48
    call	"??2@YAPEAX_K@Z"                              ; Function call
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	byte ptr [rbp - 81], 1
    mov	rcx, qword ptr [rbp + 32]                      ; Move 64-bit value
    call	"?_C_str@locale@std@@QEBAPEBDXZ"              ; Function call
    mov	rdx, rax
    .Ltmp212:
    lea	rcx, [rbp - 80]
    call	"??0_Locinfo@std@@QEAA@PEBD@Z"                ; Function call
    .Ltmp213:
    jmp	.LBB379_3                                      ; Jump instruction
    .LBB379_3:
    .Ltmp214:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    xor	eax, eax
    mov	r8d, eax
    lea	rdx, [rbp - 80]
    call	"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"  ; Function call
    .Ltmp215:
    jmp	.LBB379_4                                      ; Jump instruction
    .LBB379_4:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 81], 0
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    jmp	.LBB379_9                                      ; Jump instruction
    .LBB379_9:
    mov	eax, 2
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL
    .section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$5@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB379_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$6@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB379_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    test	byte ptr [rbp - 81], 1                        ; Test values
    jne	.LBB379_7                                      ; Jump instruction
    jmp	.LBB379_8                                      ; Jump instruction
    .LBB379_7:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 48
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB379_8:
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end27:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	-1                              # ToState
    .long	"?dtor$6@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$5@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    "$ip2state$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	.Lfunc_begin27@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp212@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp214@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp215@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .section	.text,"xr",discard,"?_Throw_bad_cast@std@@YAXXZ"
.globl	"?_Throw_bad_cast@std@@YAXXZ"   # -- Begin function ?_Throw_bad_cast@std@@YAXXZ
    .p2align	4, 0x90
    "?_Throw_bad_cast@std@@YAXXZ":          # @"?_Throw_bad_cast@std@@YAXXZ"
    .seh_proc "?_Throw_bad_cast@std@@YAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    lea	rcx, [rsp + 32]
    call	"??0bad_cast@std@@QEAA@XZ"                    ; Function call
    lea	rcx, [rsp + 32]
    lea	rdx, [rip + "_TI2?AVbad_cast@std@@"]
    call	_CxxThrowException                            ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z"
.globl	"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z" # -- Begin function ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
    .p2align	4, 0x90
    "??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z": # @"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z"
    .seh_proc "??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    lea	r8, [rsp + 64]
    call	"??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ"
.globl	"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ" # -- Begin function ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
    .p2align	4, 0x90
    "?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ": # @"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ"
    .seh_proc "?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], 0                        ; Move 64-bit value
    lea	rdx, [rsp + 40]
    call	"??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ"
.globl	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" # -- Begin function ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ": # @"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ"
    .seh_proc "??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB383_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z" ; Function call
    .LBB383_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_C_str@locale@std@@QEBAPEBDXZ"
.globl	"?_C_str@locale@std@@QEBAPEBDXZ" # -- Begin function ?_C_str@locale@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?_C_str@locale@std@@QEBAPEBDXZ":       # @"?_C_str@locale@std@@QEBAPEBDXZ"
    .seh_proc "?_C_str@locale@std@@QEBAPEBDXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB384_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 40
    call	"?c_str@?$_Yarn@D@std@@QEBAPEBDXZ"            ; Function call
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB384_3                                      ; Jump instruction
    .LBB384_2:
    lea	rax, [rip + "??_C@_00CNPNBAHC@?$AA@"]
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB384_3                                      ; Jump instruction
    .LBB384_3:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
.globl	"??0_Locinfo@std@@QEAA@PEBD@Z"  # -- Begin function ??0_Locinfo@std@@QEAA@PEBD@Z
    .p2align	4, 0x90
    "??0_Locinfo@std@@QEAA@PEBD@Z":         # @"??0_Locinfo@std@@QEAA@PEBD@Z"
    .Lfunc_begin28:
    .seh_proc "??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 112
    .seh_stackalloc 112
    lea	rbp, [rsp + 112]
    .seh_setframe rbp, 112
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    xor	edx, edx
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 8
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 24
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 40
    mov	qword ptr [rbp - 64], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Yarn@_W@std@@QEAA@XZ"                  ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 56
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Yarn@_W@std@@QEAA@XZ"                  ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 72
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 88
    mov	qword ptr [rbp - 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    cmp	qword ptr [rbp - 16], 0                        ; Compare values
    je	.LBB385_3                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    .Ltmp218:
    call	"?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z" ; Function call
    .Ltmp219:
    jmp	.LBB385_2                                      ; Jump instruction
    .LBB385_2:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 112
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .LBB385_3:
    .Ltmp216:
    lea	rcx, [rip + "??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"]
    call	"?_Xruntime_error@std@@YAXPEBD@Z"             ; Function call
    .Ltmp217:
    jmp	.LBB385_4                                      ; Jump instruction
    .LBB385_4:
    int3
    .seh_handlerdata
    .long	("$cppxdata$??0_Locinfo@std@@QEAA@PEBD@Z")@IMGREL
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$7@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$7@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Yarn@_W@std@@QEAA@XZ"                  ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$8@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$8@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_8:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Yarn@_W@std@@QEAA@XZ"                  ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$9@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$9@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_9:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$10@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$11@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA":
    .seh_proc "?dtor$11@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"
    .LBB385_11:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end28:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .p2align	2, 0x0
    "$cppxdata$??0_Locinfo@std@@QEAA@PEBD@Z":
    .long	429065506                       # MagicNumber
    .long	7                               # MaxState
    .long	("$stateUnwindMap$??0_Locinfo@std@@QEAA@PEBD@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0_Locinfo@std@@QEAA@PEBD@Z")@IMGREL # IPToStateXData
    .long	104                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0_Locinfo@std@@QEAA@PEBD@Z":
    .long	-1                              # ToState
    .long	"?dtor$11@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$10@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$9@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    .long	2                               # ToState
    .long	"?dtor$8@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    .long	3                               # ToState
    .long	"?dtor$7@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    .long	4                               # ToState
    .long	"?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    .long	5                               # ToState
    .long	"?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA"@IMGREL # Action
    "$ip2state$??0_Locinfo@std@@QEAA@PEBD@Z":
    .long	.Lfunc_begin28@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp218@IMGREL+1               # IP
    .long	6                               # ToState
    .long	.Ltmp217@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0_Locinfo@std@@QEAA@PEBD@Z"
    .section	.text,"xr",discard,"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
.globl	"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z" # -- Begin function ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
    .p2align	4, 0x90
    "??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z": # @"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .Lfunc_begin29:
    .seh_proc "??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"??0ctype_base@std@@QEAA@_K@Z"                ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    lea	rax, [rip + "??_7?$ctype@D@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    .Ltmp220:
    call	"?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z" ; Function call
    .Ltmp221:
    jmp	.LBB386_1                                      ; Jump instruction
    .LBB386_1:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA"
    .LBB386_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1ctype_base@std@@UEAA@XZ"                  ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end29:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z":
    .long	.Lfunc_begin29@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp220@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp221@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .section	.text,"xr",discard,"??1_Locinfo@std@@QEAA@XZ"
.globl	"??1_Locinfo@std@@QEAA@XZ"      # -- Begin function ??1_Locinfo@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1_Locinfo@std@@QEAA@XZ":             # @"??1_Locinfo@std@@QEAA@XZ"
    .Lfunc_begin30:
    .seh_proc "??1_Locinfo@std@@QEAA@XZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    .Ltmp222:
    call	"?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z"   ; Function call
    .Ltmp223:
    jmp	.LBB387_1                                      ; Jump instruction
    .LBB387_1:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 88
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 72
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 56
    call	"??1?$_Yarn@_W@std@@QEAA@XZ"                  ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 40
    call	"??1?$_Yarn@_W@std@@QEAA@XZ"                  ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 24
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rcx, 8
    call	"??1?$_Yarn@D@std@@QEAA@XZ"                   ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    nop
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??1_Locinfo@std@@QEAA@XZ")@IMGREL
    .section	.text,"xr",discard,"??1_Locinfo@std@@QEAA@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???1_Locinfo@std@@QEAA@XZ@4HA":
    .seh_proc "?dtor$2@?0???1_Locinfo@std@@QEAA@XZ@4HA"
    .LBB387_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end30:
    .seh_handlerdata
    .section	.text,"xr",discard,"??1_Locinfo@std@@QEAA@XZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"??1_Locinfo@std@@QEAA@XZ"
    .p2align	2, 0x0
    "$cppxdata$??1_Locinfo@std@@QEAA@XZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??1_Locinfo@std@@QEAA@XZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??1_Locinfo@std@@QEAA@XZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??1_Locinfo@std@@QEAA@XZ":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???1_Locinfo@std@@QEAA@XZ@4HA"@IMGREL # Action
    "$ip2state$??1_Locinfo@std@@QEAA@XZ":
    .long	.Lfunc_begin30@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp222@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp223@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??1_Locinfo@std@@QEAA@XZ"
    .section	.text,"xr",discard,"?c_str@?$_Yarn@D@std@@QEBAPEBDXZ"
.globl	"?c_str@?$_Yarn@D@std@@QEBAPEBDXZ" # -- Begin function ?c_str@?$_Yarn@D@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?c_str@?$_Yarn@D@std@@QEBAPEBDXZ":     # @"?c_str@?$_Yarn@D@std@@QEBAPEBDXZ"
    .seh_proc "?c_str@?$_Yarn@D@std@@QEBAPEBDXZ"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax        # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB388_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB388_3                                      ; Jump instruction
    .LBB388_2:
    mov	rax, qword ptr [rsp + 8]        # 8-byte Reload ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    .LBB388_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Yarn@D@std@@QEAA@XZ"
.globl	"??0?$_Yarn@D@std@@QEAA@XZ"     # -- Begin function ??0?$_Yarn@D@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Yarn@D@std@@QEAA@XZ":            # @"??0?$_Yarn@D@std@@QEAA@XZ"
    .seh_proc "??0?$_Yarn@D@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	byte ptr [rax + 8], 0
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Yarn@_W@std@@QEAA@XZ"
.globl	"??0?$_Yarn@_W@std@@QEAA@XZ"    # -- Begin function ??0?$_Yarn@_W@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Yarn@_W@std@@QEAA@XZ":           # @"??0?$_Yarn@_W@std@@QEAA@XZ"
    .seh_proc "??0?$_Yarn@_W@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	word ptr [rax + 8], 0
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Yarn@D@std@@QEAA@XZ"
.globl	"??1?$_Yarn@D@std@@QEAA@XZ"     # -- Begin function ??1?$_Yarn@D@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Yarn@D@std@@QEAA@XZ":            # @"??1?$_Yarn@D@std@@QEAA@XZ"
    .seh_proc "??1?$_Yarn@D@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"               ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Yarn@_W@std@@QEAA@XZ"
.globl	"??1?$_Yarn@_W@std@@QEAA@XZ"    # -- Begin function ??1?$_Yarn@_W@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Yarn@_W@std@@QEAA@XZ":           # @"??1?$_Yarn@_W@std@@QEAA@XZ"
    .seh_proc "??1?$_Yarn@_W@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"              ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
.globl	"?_Tidy@?$_Yarn@D@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$_Yarn@D@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$_Yarn@D@std@@AEAAXXZ":        # @"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .Lfunc_begin31:
    .seh_proc "?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB393_3                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp224:
    call	free                                          ; Function call
    .Ltmp225:
    jmp	.LBB393_2                                      ; Jump instruction
    .LBB393_2:
    jmp	.LBB393_3                                      ; Jump instruction
    .LBB393_3:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Tidy@?$_Yarn@D@std@@AEAAXXZ")@IMGREL
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0??_Tidy@?$_Yarn@D@std@@AEAAXXZ@4HA":
    .seh_proc "?dtor$4@?0??_Tidy@?$_Yarn@D@std@@AEAAXXZ@4HA"
    .LBB393_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end31:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .p2align	2, 0x0
    "$cppxdata$?_Tidy@?$_Yarn@D@std@@AEAAXXZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Tidy@?$_Yarn@D@std@@AEAAXXZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Tidy@?$_Yarn@D@std@@AEAAXXZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Tidy@?$_Yarn@D@std@@AEAAXXZ":
    .long	-1                              # ToState
    .long	"?dtor$4@?0??_Tidy@?$_Yarn@D@std@@AEAAXXZ@4HA"@IMGREL # Action
    "$ip2state$?_Tidy@?$_Yarn@D@std@@AEAAXXZ":
    .long	.Lfunc_begin31@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp224@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp225@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
.globl	"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$_Yarn@_W@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$_Yarn@_W@std@@AEAAXXZ":       # @"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .Lfunc_begin32:
    .seh_proc "?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB394_3                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp226:
    call	free                                          ; Function call
    .Ltmp227:
    jmp	.LBB394_2                                      ; Jump instruction
    .LBB394_2:
    jmp	.LBB394_3                                      ; Jump instruction
    .LBB394_3:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ")@IMGREL
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0??_Tidy@?$_Yarn@_W@std@@AEAAXXZ@4HA":
    .seh_proc "?dtor$4@?0??_Tidy@?$_Yarn@_W@std@@AEAAXXZ@4HA"
    .LBB394_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end32:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .p2align	2, 0x0
    "$cppxdata$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ":
    .long	-1                              # ToState
    .long	"?dtor$4@?0??_Tidy@?$_Yarn@_W@std@@AEAAXXZ@4HA"@IMGREL # Action
    "$ip2state$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ":
    .long	.Lfunc_begin32@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp226@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp227@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .section	.text,"xr",discard,"??0ctype_base@std@@QEAA@_K@Z"
.globl	"??0ctype_base@std@@QEAA@_K@Z"  # -- Begin function ??0ctype_base@std@@QEAA@_K@Z
    .p2align	4, 0x90
    "??0ctype_base@std@@QEAA@_K@Z":         # @"??0ctype_base@std@@QEAA@_K@Z"
    .seh_proc "??0ctype_base@std@@QEAA@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0facet@locale@std@@IEAA@_K@Z"              ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7ctype_base@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z"
.globl	"?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z" # -- Begin function ?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z
    .p2align	4, 0x90
    "?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z": # @"?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z"
    .seh_proc "?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    lea	rdx, [rsp + 40]
    call	"?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rax + 40], rcx                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1ctype_base@std@@UEAA@XZ"
.globl	"??1ctype_base@std@@UEAA@XZ"    # -- Begin function ??1ctype_base@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1ctype_base@std@@UEAA@XZ":           # @"??1ctype_base@std@@UEAA@XZ"
    .seh_proc "??1ctype_base@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1facet@locale@std@@MEAA@XZ"                ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_G?$ctype@D@std@@MEAAPEAXI@Z"
.globl	"??_G?$ctype@D@std@@MEAAPEAXI@Z" # -- Begin function ??_G?$ctype@D@std@@MEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G?$ctype@D@std@@MEAAPEAXI@Z":       # @"??_G?$ctype@D@std@@MEAAPEAXI@Z"
    .seh_proc "??_G?$ctype@D@std@@MEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1?$ctype@D@std@@MEAA@XZ"                   ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB398_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 48
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB398_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Incref@facet@locale@std@@UEAAXXZ"
.globl	"?_Incref@facet@locale@std@@UEAAXXZ" # -- Begin function ?_Incref@facet@locale@std@@UEAAXXZ
    .p2align	4, 0x90
    "?_Incref@facet@locale@std@@UEAAXXZ":   # @"?_Incref@facet@locale@std@@UEAAXXZ"
    .seh_proc "?_Incref@facet@locale@std@@UEAAXXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    lock		inc	dword ptr [rax + 8]
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
.globl	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ" # -- Begin function ?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
    .p2align	4, 0x90
    "?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ": # @"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .seh_proc "?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx            # 8-byte Spill ; Move 64-bit value
    mov	eax, -1
    lock		xadd	dword ptr [rcx + 8], eax
    sub	eax, 1
    cmp	eax, 0                                         ; Compare values
    jne	.LBB400_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 16], rax                      ; Move 64-bit value
    jmp	.LBB400_3                                      ; Jump instruction
    .LBB400_2:
    mov	qword ptr [rsp + 16], 0                        ; Move 64-bit value
    .LBB400_3:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
.globl	"?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z" # -- Begin function ?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
    .p2align	4, 0x90
    "?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z": # @"?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
    .seh_proc "?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 56]
    lea	rdx, [rsp + 64]
    call	"??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z" ; Function call
    .LBB401_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 64]                      ; Compare values
    je	.LBB401_4                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB401_1 Depth=1
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rdx, 16
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movzx	ecx, byte ptr [rax]
    call	_Tolower                                      ; Function call
    mov	cl, al
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	byte ptr [rax], cl
# %bb.3:                                #   in Loop: Header=BB401_1 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    jmp	.LBB401_1                                      ; Jump instruction
    .LBB401_4:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_tolower@?$ctype@D@std@@MEBADD@Z"
.globl	"?do_tolower@?$ctype@D@std@@MEBADD@Z" # -- Begin function ?do_tolower@?$ctype@D@std@@MEBADD@Z
    .p2align	4, 0x90
    "?do_tolower@?$ctype@D@std@@MEBADD@Z":  # @"?do_tolower@?$ctype@D@std@@MEBADD@Z"
    .seh_proc "?do_tolower@?$ctype@D@std@@MEBADD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rdx, 16
    movzx	ecx, byte ptr [rsp + 55]
    call	_Tolower                                      ; Function call
# kill: def $al killed $al killed $eax
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
.globl	"?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z" # -- Begin function ?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
    .p2align	4, 0x90
    "?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z": # @"?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
    .seh_proc "?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 56]
    lea	rdx, [rsp + 64]
    call	"??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z" ; Function call
    .LBB403_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 64]                      ; Compare values
    je	.LBB403_4                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB403_1 Depth=1
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rdx, 16
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movzx	ecx, byte ptr [rax]
    call	_Toupper                                      ; Function call
    mov	cl, al
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	byte ptr [rax], cl
# %bb.3:                                #   in Loop: Header=BB403_1 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    jmp	.LBB403_1                                      ; Jump instruction
    .LBB403_4:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_toupper@?$ctype@D@std@@MEBADD@Z"
.globl	"?do_toupper@?$ctype@D@std@@MEBADD@Z" # -- Begin function ?do_toupper@?$ctype@D@std@@MEBADD@Z
    .p2align	4, 0x90
    "?do_toupper@?$ctype@D@std@@MEBADD@Z":  # @"?do_toupper@?$ctype@D@std@@MEBADD@Z"
    .seh_proc "?do_toupper@?$ctype@D@std@@MEBADD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rdx, 16
    movzx	ecx, byte ptr [rsp + 55]
    call	_Toupper                                      ; Function call
# kill: def $al killed $al killed $eax
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z"
.globl	"?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z" # -- Begin function ?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
    .p2align	4, 0x90
    "?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z": # @"?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z"
    .seh_proc "?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 48]
    lea	rdx, [rsp + 56]
    call	"??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z" ; Function call
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	r8, rax
    call	memcpy                                        ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_widen@?$ctype@D@std@@MEBADD@Z"
.globl	"?do_widen@?$ctype@D@std@@MEBADD@Z" # -- Begin function ?do_widen@?$ctype@D@std@@MEBADD@Z
    .p2align	4, 0x90
    "?do_widen@?$ctype@D@std@@MEBADD@Z":    # @"?do_widen@?$ctype@D@std@@MEBADD@Z"
    .seh_proc "?do_widen@?$ctype@D@std@@MEBADD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	byte ptr [rsp + 15], dl
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	al, byte ptr [rsp + 15]
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z"
.globl	"?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z" # -- Begin function ?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
    .p2align	4, 0x90
    "?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z": # @"?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z"
    .seh_proc "?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	byte ptr [rsp + 71], r9b
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 48]
    lea	rdx, [rsp + 56]
    call	"??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z" ; Function call
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	r8, rax
    call	memcpy                                        ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_narrow@?$ctype@D@std@@MEBADDD@Z"
.globl	"?do_narrow@?$ctype@D@std@@MEBADDD@Z" # -- Begin function ?do_narrow@?$ctype@D@std@@MEBADDD@Z
    .p2align	4, 0x90
    "?do_narrow@?$ctype@D@std@@MEBADDD@Z":  # @"?do_narrow@?$ctype@D@std@@MEBADDD@Z"
    .seh_proc "?do_narrow@?$ctype@D@std@@MEBADDD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	byte ptr [rsp + 15], r8b
    mov	byte ptr [rsp + 14], dl
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	al, byte ptr [rsp + 14]
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0facet@locale@std@@IEAA@_K@Z"
.globl	"??0facet@locale@std@@IEAA@_K@Z" # -- Begin function ??0facet@locale@std@@IEAA@_K@Z
    .p2align	4, 0x90
    "??0facet@locale@std@@IEAA@_K@Z":       # @"??0facet@locale@std@@IEAA@_K@Z"
    .seh_proc "??0facet@locale@std@@IEAA@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0_Facet_base@std@@QEAA@XZ"                 ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7facet@locale@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
# kill: def $ecx killed $ecx killed $rcx
    mov	dword ptr [rax + 8], ecx                       ; Move 32-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gctype_base@std@@UEAAPEAXI@Z"
.globl	"??_Gctype_base@std@@UEAAPEAXI@Z" # -- Begin function ??_Gctype_base@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gctype_base@std@@UEAAPEAXI@Z":      # @"??_Gctype_base@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gctype_base@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1ctype_base@std@@UEAA@XZ"                  ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB410_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB410_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_Facet_base@std@@QEAA@XZ"
.globl	"??0_Facet_base@std@@QEAA@XZ"   # -- Begin function ??0_Facet_base@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0_Facet_base@std@@QEAA@XZ":          # @"??0_Facet_base@std@@QEAA@XZ"
    .seh_proc "??0_Facet_base@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    lea	rcx, [rip + "??_7_Facet_base@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gfacet@locale@std@@MEAAPEAXI@Z"
.globl	"??_Gfacet@locale@std@@MEAAPEAXI@Z" # -- Begin function ??_Gfacet@locale@std@@MEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gfacet@locale@std@@MEAAPEAXI@Z":    # @"??_Gfacet@locale@std@@MEAAPEAXI@Z"
    .seh_proc "??_Gfacet@locale@std@@MEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1facet@locale@std@@MEAA@XZ"                ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB412_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB412_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_G_Facet_base@std@@UEAAPEAXI@Z"
.globl	"??_G_Facet_base@std@@UEAAPEAXI@Z" # -- Begin function ??_G_Facet_base@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G_Facet_base@std@@UEAAPEAXI@Z":     # @"??_G_Facet_base@std@@UEAAPEAXI@Z"
    .seh_proc "??_G_Facet_base@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	dword ptr [rsp + 12], edx                      ; Move 32-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rsp + 16], rax                      ; Move 64-bit value
    ud2
    .seh_endproc
    .section	.text,"xr",discard,"??1facet@locale@std@@MEAA@XZ"
.globl	"??1facet@locale@std@@MEAA@XZ"  # -- Begin function ??1facet@locale@std@@MEAA@XZ
    .p2align	4, 0x90
    "??1facet@locale@std@@MEAA@XZ":         # @"??1facet@locale@std@@MEAA@XZ"
    .seh_proc "??1facet@locale@std@@MEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1_Facet_base@std@@UEAA@XZ"                 ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1_Facet_base@std@@UEAA@XZ"
.globl	"??1_Facet_base@std@@UEAA@XZ"   # -- Begin function ??1_Facet_base@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1_Facet_base@std@@UEAA@XZ":          # @"??1_Facet_base@std@@UEAA@XZ"
    .seh_proc "??1_Facet_base@std@@UEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ"
.globl	"?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ" # -- Begin function ?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ
    .p2align	4, 0x90
    "?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ": # @"?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ"
    .seh_proc "?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    call	_Getctype                                     ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$ctype@D@std@@MEAA@XZ"
.globl	"??1?$ctype@D@std@@MEAA@XZ"     # -- Begin function ??1?$ctype@D@std@@MEAA@XZ
    .p2align	4, 0x90
    "??1?$ctype@D@std@@MEAA@XZ":            # @"??1?$ctype@D@std@@MEAA@XZ"
    .seh_proc "??1?$ctype@D@std@@MEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rax, [rip + "??_7?$ctype@D@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    call	"?_Tidy@?$ctype@D@std@@IEAAXXZ"               ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1ctype_base@std@@UEAA@XZ"                  ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$ctype@D@std@@IEAAXXZ"
.globl	"?_Tidy@?$ctype@D@std@@IEAAXXZ" # -- Begin function ?_Tidy@?$ctype@D@std@@IEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$ctype@D@std@@IEAAXXZ":        # @"?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .Lfunc_begin33:
    .seh_proc "?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    cmp	eax, dword ptr [rcx + 32]                      ; Compare values
    jge	.LBB418_3                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 24]                      ; Move 64-bit value
    .Ltmp228:
    call	free                                          ; Function call
    .Ltmp229:
    jmp	.LBB418_2                                      ; Jump instruction
    .LBB418_2:
    jmp	.LBB418_8                                      ; Jump instruction
    .LBB418_3:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    cmp	dword ptr [rax + 32], 0                        ; Compare values
    jge	.LBB418_7                                      ; Jump instruction
# %bb.4:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax + 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    cmp	rax, 0                                         ; Compare values
    je	.LBB418_6                                       ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    call	"??_V@YAXPEAX@Z"                              ; Function call
    .LBB418_6:
    jmp	.LBB418_7                                      ; Jump instruction
    .LBB418_7:
    jmp	.LBB418_8                                      ; Jump instruction
    .LBB418_8:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 40]                      ; Move 64-bit value
    .Ltmp230:
    call	free                                          ; Function call
    .Ltmp231:
    jmp	.LBB418_9                                      ; Jump instruction
    .LBB418_9:
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Tidy@?$ctype@D@std@@IEAAXXZ")@IMGREL
    .section	.text,"xr",discard,"?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0??_Tidy@?$ctype@D@std@@IEAAXXZ@4HA":
    .seh_proc "?dtor$10@?0??_Tidy@?$ctype@D@std@@IEAAXXZ@4HA"
    .LBB418_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end33:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .p2align	2, 0x0
    "$cppxdata$?_Tidy@?$ctype@D@std@@IEAAXXZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Tidy@?$ctype@D@std@@IEAAXXZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Tidy@?$ctype@D@std@@IEAAXXZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Tidy@?$ctype@D@std@@IEAAXXZ":
    .long	-1                              # ToState
    .long	"?dtor$10@?0??_Tidy@?$ctype@D@std@@IEAAXXZ@4HA"@IMGREL # Action
    "$ip2state$?_Tidy@?$ctype@D@std@@IEAAXXZ":
    .long	.Lfunc_begin33@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp228@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp231@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .section	.text,"xr",discard,"??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z"
.globl	"??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z" # -- Begin function ??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z": # @"??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z"
    .seh_proc "??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z"
.globl	"??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z" # -- Begin function ??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z": # @"??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z"
    .seh_proc "??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0bad_cast@std@@QEAA@XZ"
.globl	"??0bad_cast@std@@QEAA@XZ"      # -- Begin function ??0bad_cast@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0bad_cast@std@@QEAA@XZ":             # @"??0bad_cast@std@@QEAA@XZ"
    .seh_proc "??0bad_cast@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rdx, [rip + "??_C@_08EPJLHIJG@bad?5cast?$AA@"]
    mov	r8d, 1
    call	"??0exception@std@@QEAA@QEBDH@Z"              ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7bad_cast@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0bad_cast@std@@QEAA@AEBV01@@Z"
.globl	"??0bad_cast@std@@QEAA@AEBV01@@Z" # -- Begin function ??0bad_cast@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0bad_cast@std@@QEAA@AEBV01@@Z":      # @"??0bad_cast@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0bad_cast@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0exception@std@@QEAA@AEBV01@@Z"            ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7bad_cast@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1bad_cast@std@@UEAA@XZ"
.globl	"??1bad_cast@std@@UEAA@XZ"      # -- Begin function ??1bad_cast@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1bad_cast@std@@UEAA@XZ":             # @"??1bad_cast@std@@UEAA@XZ"
    .seh_proc "??1bad_cast@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1exception@std@@UEAA@XZ"                   ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gbad_cast@std@@UEAAPEAXI@Z"
.globl	"??_Gbad_cast@std@@UEAAPEAXI@Z" # -- Begin function ??_Gbad_cast@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gbad_cast@std@@UEAAPEAXI@Z":        # @"??_Gbad_cast@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gbad_cast@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1bad_cast@std@@UEAA@XZ"                    ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB424_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 24
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB424_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z"
.globl	"??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z" # -- Begin function ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
    .p2align	4, 0x90
    "??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z": # @"??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z"
    .seh_proc "??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	byte ptr [rsp + 23], dl
    mov	qword ptr [rsp + 8], r8                        ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z"
.globl	"??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z" # -- Begin function ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
    .p2align	4, 0x90
    "??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z": # @"??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z"
    .seh_proc "??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z"
.globl	"??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z" # -- Begin function ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
    .p2align	4, 0x90
    "??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z": # @"??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z"
    .seh_proc "??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    cmp	rax, 0                                         ; Compare values
    je	.LBB428_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	edx, 1
    call	qword ptr [rax]                               ; Function call
    .LBB428_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
.globl	"?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ" # -- Begin function ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
    .p2align	4, 0x90
    "?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ": # @"?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
    .seh_proc "?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax        # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rax + 56]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB429_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax + 80]                      ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rsp + 4], eax        # 4-byte Spill ; Move 32-bit value
    jmp	.LBB429_3                                      ; Jump instruction
    .LBB429_2:
    xor	eax, eax
    mov	dword ptr [rsp + 4], eax        # 4-byte Spill ; Move 32-bit value
    jmp	.LBB429_3                                      ; Jump instruction
    .LBB429_3:
    mov	eax, dword ptr [rsp + 4]        # 4-byte Reload ; Move 32-bit value
    cdqe
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z"
.globl	"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z" # -- Begin function ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z
    .p2align	4, 0x90
    "?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z": # @"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z"
    .seh_proc "?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	byte ptr [rsp + 7], cl
    movzx	eax, byte ptr [rsp + 7]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ"
.globl	"?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ" # -- Begin function ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
    .p2align	4, 0x90
    "?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ": # @"?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ"
    .seh_proc "?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
.globl	"?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ" # -- Begin function ?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
    .p2align	4, 0x90
    "?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ": # @"?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
    .seh_proc "?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 80]                      ; Move 64-bit value
    mov	edx, dword ptr [rcx]                           ; Move 32-bit value
    add	edx, -1
    mov	dword ptr [rcx], edx                           ; Move 32-bit value
    mov	rcx, qword ptr [rax + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
.globl	"?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" # -- Begin function ?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
    .p2align	4, 0x90
    "?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ": # @"?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .seh_proc "?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ" ; Function call
    mov	rcx, rax
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB433_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ" ; Function call
    mov	cl, byte ptr [rax]
    call	"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z" ; Function call
    mov	dword ptr [rsp + 36], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB433_3                                      ; Jump instruction
    .LBB433_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 56]                          ; Function call
    mov	dword ptr [rsp + 36], eax       # 4-byte Spill ; Move 32-bit value
    .LBB433_3:
    mov	eax, dword ptr [rsp + 36]       # 4-byte Reload ; Move 32-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
.globl	"?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ" # -- Begin function ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
    .p2align	4, 0x90
    "?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ": # @"?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
    .seh_proc "?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 80]                      ; Move 64-bit value
    mov	edx, dword ptr [rcx]                           ; Move 32-bit value
    add	edx, -1
    mov	dword ptr [rcx], edx                           ; Move 32-bit value
    mov	rcx, qword ptr [rax + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rcx], rdx                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
.globl	"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" # -- Begin function ?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
    .p2align	4, 0x90
    "?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z": # @"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .Lfunc_begin34:
    .seh_proc "?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 24], rcx                      ; Move 64-bit value
    cmp	qword ptr [rbp + 24], 0                        ; Compare values
    je	.LBB435_9                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB435_9                                      ; Jump instruction
# %bb.2:
    mov	ecx, 16
    call	"??2@YAPEAX_K@Z"                              ; Function call
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	byte ptr [rbp - 81], 1
    mov	rcx, qword ptr [rbp + 32]                      ; Move 64-bit value
    call	"?_C_str@locale@std@@QEBAPEBDXZ"              ; Function call
    mov	rdx, rax
    .Ltmp232:
    lea	rcx, [rbp - 80]
    call	"??0_Locinfo@std@@QEAA@PEBD@Z"                ; Function call
    .Ltmp233:
    jmp	.LBB435_3                                      ; Jump instruction
    .LBB435_3:
    .Ltmp234:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    xor	eax, eax
    mov	r8d, eax
    lea	rdx, [rbp - 80]
    call	"??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z" ; Function call
    .Ltmp235:
    jmp	.LBB435_4                                      ; Jump instruction
    .LBB435_4:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 81], 0
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    jmp	.LBB435_9                                      ; Jump instruction
    .LBB435_9:
    mov	eax, 4
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL
    .section	.text,"xr",discard,"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0??_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$5@?0??_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB435_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0??_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$6@?0??_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB435_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    test	byte ptr [rbp - 81], 1                        ; Test values
    jne	.LBB435_7                                      ; Jump instruction
    jmp	.LBB435_8                                      ; Jump instruction
    .LBB435_7:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB435_8:
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end34:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	-1                              # ToState
    .long	"?dtor$6@?0??_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$5@?0??_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    "$ip2state$?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	.Lfunc_begin34@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp232@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp234@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp235@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .section	.text,"xr",discard,"??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z"
.globl	"??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z" # -- Begin function ??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
    .p2align	4, 0x90
    "??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z": # @"??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .seh_proc "??0?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??0facet@locale@std@@IEAA@_K@Z"              ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rax, [rip + "??_7?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
.globl	"?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z" # -- Begin function ?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z
    .p2align	4, 0x90
    "?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z": # @"?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
    .seh_proc "?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
.globl	"??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z" # -- Begin function ??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z": # @"??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
    .seh_proc "??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ" ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB438_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB438_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .Lfunc_begin35:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 208
    .seh_stackalloc 208
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 72], -2                       ; Move 64-bit value
    mov	qword ptr [rbp - 56], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 64], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 80], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 144]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 128]                      ; Move 64-bit value
    mov	qword ptr [rbp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 72], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    .Ltmp236:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    mov	r9d, 2048
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp237:
    mov	word ptr [rbp - 42], ax         # 2-byte Spill
    jmp	.LBB439_1                                      ; Jump instruction
    .LBB439_1:
    mov	ax, word ptr [rbp - 42]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB439_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    jmp	.LBB439_10                                     ; Jump instruction
    .LBB439_4:
    movsx	r8d, byte ptr [rbp - 2]
    mov	rcx, rbp
    lea	rdx, [rbp - 40]
    lea	r9, [rbp - 28]
    call	_Stoullx                                      ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, rbp
    cmp	qword ptr [rbp - 40], rax                      ; Compare values
    je	.LBB439_6                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 28], 0                        ; Compare values
    je	.LBB439_7                                       ; Jump instruction
    .LBB439_6:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    .LBB439_7:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB439_9                                       ; Jump instruction
# %bb.8:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB439_9:
    jmp	.LBB439_10                                     ; Jump instruction
    .LBB439_10:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB439_11                                     ; Jump instruction
    jmp	.LBB439_12                                     ; Jump instruction
    .LBB439_11:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB439_12:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 208
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z@4HA"
    .LBB439_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end35:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z")@IMGREL # IPToStateXData
    .long	200                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z":
    .long	.Lfunc_begin35@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp236@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp237@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
# %bb.0:
    sub	rsp, 168
    .seh_stackalloc 168
    .seh_endprologue
    mov	qword ptr [rsp + 56], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 224]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 216]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	qword ptr [rsp + 160], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 152], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	r10, qword ptr [rsp + 216]                     ; Move 64-bit value
    mov	r11, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	rax, qword ptr [r9]                            ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r9 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rax, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    lea	rdx, [rsp + 112]
    lea	r8, [rsp + 80]
    lea	r9, [rsp + 96]
    lea	rax, [rsp + 128]
    mov	qword ptr [rsp + 32], r11                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z" ; Function call
    mov	r8, qword ptr [rsp + 56]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [r8], rcx                            ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [r8 + 8], rcx                        ; Move 64-bit value
    movsd	xmm0, qword ptr [rsp + 128]     # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rcx, qword ptr [rsp + 224]                     ; Move 64-bit value
    movsd	qword ptr [rcx], xmm0                        ; Load 64-bit double
    mov	rcx, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rdx], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rdx + 8], rcx                       ; Move 64-bit value
    add	rsp, 168
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .Lfunc_begin36:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 960
    .seh_stackalloc 960
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 824], -2                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 64], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 80], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 896]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 888]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 880]                      ; Move 64-bit value
    mov	qword ptr [rbp + 816], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 808], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 800], rcx                     ; Move 64-bit value
    mov	qword ptr [rbp + 792], rax                     ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 880]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 72], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 64]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    .Ltmp238:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    mov	edx, 768
    call	"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z" ; Function call
    .Ltmp239:
    mov	word ptr [rbp - 42], ax         # 2-byte Spill
    jmp	.LBB441_1                                      ; Jump instruction
    .LBB441_1:
    mov	ax, word ptr [rbp - 42]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB441_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 888]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 896]                     ; Move 64-bit value
    xorps	xmm0, xmm0
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    jmp	.LBB441_9                                      ; Jump instruction
    .LBB441_4:
    mov	rcx, rbp
    lea	rdx, [rbp - 40]
    lea	r8, [rbp - 28]
    call	"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"        ; Function call
    mov	rax, qword ptr [rbp + 896]                     ; Move 64-bit value
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    mov	rax, rbp
    cmp	qword ptr [rbp - 40], rax                      ; Compare values
    je	.LBB441_7                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 28], 0                        ; Compare values
    jne	.LBB441_7                                      ; Jump instruction
# %bb.6:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB441_8                                       ; Jump instruction
    .LBB441_7:
    mov	rax, qword ptr [rbp + 888]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB441_8:
    jmp	.LBB441_9                                      ; Jump instruction
    .LBB441_9:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB441_10                                     ; Jump instruction
    jmp	.LBB441_11                                     ; Jump instruction
    .LBB441_10:
    mov	rax, qword ptr [rbp + 888]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB441_11:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 960
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z@4HA"
    .LBB441_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end36:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z")@IMGREL # IPToStateXData
    .long	952                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z":
    .long	.Lfunc_begin36@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp238@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp239@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .Lfunc_begin37:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 960
    .seh_stackalloc 960
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 824], -2                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 64], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 80], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 896]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 888]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 880]                      ; Move 64-bit value
    mov	qword ptr [rbp + 816], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 808], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 800], rcx                     ; Move 64-bit value
    mov	qword ptr [rbp + 792], rax                     ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 880]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 72], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 64]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    .Ltmp240:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    mov	edx, 768
    call	"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z" ; Function call
    .Ltmp241:
    mov	word ptr [rbp - 42], ax         # 2-byte Spill
    jmp	.LBB442_1                                      ; Jump instruction
    .LBB442_1:
    mov	ax, word ptr [rbp - 42]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB442_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 888]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 896]                     ; Move 64-bit value
    xorps	xmm0, xmm0
    movss	dword ptr [rax], xmm0                        ; Move 32-bit value
    jmp	.LBB442_9                                      ; Jump instruction
    .LBB442_4:
    mov	rcx, rbp
    lea	rdx, [rbp - 40]
    lea	r8, [rbp - 28]
    call	"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"        ; Function call
    mov	rax, qword ptr [rbp + 896]                     ; Move 64-bit value
    movss	dword ptr [rax], xmm0                        ; Move 32-bit value
    mov	rax, rbp
    cmp	qword ptr [rbp - 40], rax                      ; Compare values
    je	.LBB442_7                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 28], 0                        ; Compare values
    jne	.LBB442_7                                      ; Jump instruction
# %bb.6:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB442_8                                       ; Jump instruction
    .LBB442_7:
    mov	rax, qword ptr [rbp + 888]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB442_8:
    jmp	.LBB442_9                                      ; Jump instruction
    .LBB442_9:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB442_10                                     ; Jump instruction
    jmp	.LBB442_11                                     ; Jump instruction
    .LBB442_10:
    mov	rax, qword ptr [rbp + 888]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB442_11:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 960
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z@4HA"
    .LBB442_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end37:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z")@IMGREL # IPToStateXData
    .long	952                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z":
    .long	.Lfunc_begin37@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp240@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp241@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .Lfunc_begin38:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 208
    .seh_stackalloc 208
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 72], -2                       ; Move 64-bit value
    mov	qword ptr [rbp - 56], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 64], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 80], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 144]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 128]                      ; Move 64-bit value
    mov	qword ptr [rbp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 72], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    .Ltmp242:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp243:
    mov	word ptr [rbp - 42], ax         # 2-byte Spill
    jmp	.LBB443_1                                      ; Jump instruction
    .LBB443_1:
    mov	ax, word ptr [rbp - 42]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB443_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    jmp	.LBB443_9                                      ; Jump instruction
    .LBB443_4:
    movsx	r8d, byte ptr [rbp - 2]
    mov	rcx, rbp
    lea	rdx, [rbp - 40]
    lea	r9, [rbp - 28]
    call	_Stoullx                                      ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, rbp
    cmp	qword ptr [rbp - 40], rax                      ; Compare values
    je	.LBB443_7                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 28], 0                        ; Compare values
    jne	.LBB443_7                                      ; Jump instruction
# %bb.6:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB443_8                                       ; Jump instruction
    .LBB443_7:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB443_8:
    jmp	.LBB443_9                                      ; Jump instruction
    .LBB443_9:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB443_10                                     ; Jump instruction
    jmp	.LBB443_11                                     ; Jump instruction
    .LBB443_10:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB443_11:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 208
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z@4HA"
    .LBB443_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end38:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z")@IMGREL # IPToStateXData
    .long	200                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z":
    .long	.Lfunc_begin38@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp242@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp243@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .Lfunc_begin39:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 208
    .seh_stackalloc 208
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 72], -2                       ; Move 64-bit value
    mov	qword ptr [rbp - 48], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 56], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 80], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 72], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 144]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 128]                      ; Move 64-bit value
    mov	qword ptr [rbp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 64], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    .Ltmp244:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp245:
    mov	word ptr [rbp - 38], ax         # 2-byte Spill
    jmp	.LBB444_1                                      ; Jump instruction
    .LBB444_1:
    mov	ax, word ptr [rbp - 38]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB444_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    jmp	.LBB444_9                                      ; Jump instruction
    .LBB444_4:
    movsx	r8d, byte ptr [rbp - 2]
    mov	rcx, rbp
    lea	rdx, [rbp - 32]
    lea	r9, [rbp - 36]
    call	_Stollx                                       ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, rbp
    cmp	qword ptr [rbp - 32], rax                      ; Compare values
    je	.LBB444_7                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 36], 0                        ; Compare values
    jne	.LBB444_7                                      ; Jump instruction
# %bb.6:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB444_8                                       ; Jump instruction
    .LBB444_7:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB444_8:
    jmp	.LBB444_9                                      ; Jump instruction
    .LBB444_9:
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB444_10                                     ; Jump instruction
    jmp	.LBB444_11                                     ; Jump instruction
    .LBB444_10:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB444_11:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 208
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z@4HA"
    .LBB444_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end39:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z")@IMGREL # IPToStateXData
    .long	200                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z":
    .long	.Lfunc_begin39@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp244@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp245@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .Lfunc_begin40:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 208
    .seh_stackalloc 208
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 72], -2                       ; Move 64-bit value
    mov	qword ptr [rbp - 48], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 56], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 80], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 72], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 144]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 128]                      ; Move 64-bit value
    mov	qword ptr [rbp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 64], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    .Ltmp246:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp247:
    mov	word ptr [rbp - 38], ax         # 2-byte Spill
    jmp	.LBB445_1                                      ; Jump instruction
    .LBB445_1:
    mov	ax, word ptr [rbp - 38]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB445_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	dword ptr [rax], 0                             ; Move 32-bit value
    jmp	.LBB445_9                                      ; Jump instruction
    .LBB445_4:
    movsx	r8d, byte ptr [rbp - 2]
    mov	rcx, rbp
    lea	rdx, [rbp - 32]
    lea	r9, [rbp - 36]
    call	_Stoulx                                       ; Function call
    mov	ecx, eax
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	rax, rbp
    cmp	qword ptr [rbp - 32], rax                      ; Compare values
    je	.LBB445_7                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 36], 0                        ; Compare values
    jne	.LBB445_7                                      ; Jump instruction
# %bb.6:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB445_8                                       ; Jump instruction
    .LBB445_7:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB445_8:
    jmp	.LBB445_9                                      ; Jump instruction
    .LBB445_9:
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB445_10                                     ; Jump instruction
    jmp	.LBB445_11                                     ; Jump instruction
    .LBB445_10:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB445_11:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 208
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z@4HA"
    .LBB445_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end40:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z")@IMGREL # IPToStateXData
    .long	200                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z":
    .long	.Lfunc_begin40@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp246@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp247@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .Lfunc_begin41:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 208
    .seh_stackalloc 208
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 72], -2                       ; Move 64-bit value
    mov	qword ptr [rbp - 48], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 56], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 80], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 72], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 144]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 136]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 128]                      ; Move 64-bit value
    mov	qword ptr [rbp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    lea	rdx, [rbp - 24]
    mov	qword ptr [rbp - 64], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    .Ltmp248:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, rbp
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp249:
    mov	word ptr [rbp - 38], ax         # 2-byte Spill
    jmp	.LBB446_1                                      ; Jump instruction
    .LBB446_1:
    mov	ax, word ptr [rbp - 38]         # 2-byte Reload
    mov	word ptr [rbp - 2], ax
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp - 2]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB446_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	dword ptr [rax], 0                             ; Move 32-bit value
    jmp	.LBB446_9                                      ; Jump instruction
    .LBB446_4:
    movsx	r8d, byte ptr [rbp - 2]
    mov	rcx, rbp
    lea	rdx, [rbp - 32]
    lea	r9, [rbp - 36]
    call	_Stolx                                        ; Function call
    mov	ecx, eax
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	rax, rbp
    cmp	qword ptr [rbp - 32], rax                      ; Compare values
    je	.LBB446_7                                       ; Jump instruction
# %bb.5:
    cmp	dword ptr [rbp - 36], 0                        ; Compare values
    jne	.LBB446_7                                      ; Jump instruction
# %bb.6:
    test	byte ptr [rbp - 1], 1                         ; Test values
    je	.LBB446_8                                       ; Jump instruction
    .LBB446_7:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB446_8:
    jmp	.LBB446_9                                      ; Jump instruction
    .LBB446_9:
    mov	rdx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB446_10                                     ; Jump instruction
    jmp	.LBB446_11                                     ; Jump instruction
    .LBB446_10:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB446_11:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 208
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z@4HA"
    .LBB446_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 24]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end41:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z")@IMGREL # IPToStateXData
    .long	200                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z":
    .long	.Lfunc_begin41@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp248@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp249@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z"
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z"
# %bb.0:
    sub	rsp, 168
    .seh_stackalloc 168
    .seh_endprologue
    mov	qword ptr [rsp + 56], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 224]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 216]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	qword ptr [rsp + 160], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 152], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	r10, qword ptr [rsp + 216]                     ; Move 64-bit value
    mov	r11, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	rax, qword ptr [r9]                            ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r9 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rax, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    lea	rdx, [rsp + 112]
    lea	r8, [rsp + 80]
    lea	r9, [rsp + 96]
    lea	rax, [rsp + 132]
    mov	qword ptr [rsp + 32], r11                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z" ; Function call
    mov	r8, qword ptr [rsp + 56]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [r8], rcx                            ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [r8 + 8], rcx                        ; Move 64-bit value
    mov	r9d, dword ptr [rsp + 132]                     ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 224]                     ; Move 64-bit value
    mov	dword ptr [rcx], r9d                           ; Move 32-bit value
    mov	rcx, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rdx], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rdx + 8], rcx                       ; Move 64-bit value
    add	rsp, 168
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .Lfunc_begin42:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 88], -2                       ; Move 64-bit value
    mov	qword ptr [rbp - 56], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 64], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 80], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 160]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 152]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 144]                      ; Move 64-bit value
    mov	qword ptr [rbp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rbp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 56], rax                      ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 144]                     ; Move 64-bit value
    lea	rdx, [rbp - 8]
    mov	qword ptr [rbp - 72], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 144]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    .Ltmp250:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    lea	rcx, [rbp + 16]
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp251:
    mov	word ptr [rbp - 42], ax         # 2-byte Spill
    jmp	.LBB448_1                                      ; Jump instruction
    .LBB448_1:
    mov	ax, word ptr [rbp - 42]         # 2-byte Reload
    mov	word ptr [rbp + 14], ax
    lea	rcx, [rbp - 8]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp + 14]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB448_4                                      ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 160]                     ; Move 64-bit value
    mov	word ptr [rax], 0
    jmp	.LBB448_16                                     ; Jump instruction
    .LBB448_4:
    movsx	eax, byte ptr [rbp + 16]
    cmp	eax, 45                                        ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rbp - 9], al
    lea	rax, [rbp + 16]
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    test	byte ptr [rbp - 9], 1                         ; Test values
    je	.LBB448_6                                       ; Jump instruction
# %bb.5:
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    .LBB448_6:
    movsx	r8d, byte ptr [rbp + 14]
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    lea	rdx, [rbp - 32]
    lea	r9, [rbp - 36]
    call	_Stoulx                                       ; Function call
    mov	dword ptr [rbp - 40], eax                      ; Move 32-bit value
    mov	eax, dword ptr [rbp - 40]                      ; Move 32-bit value
    mov	cx, ax
    mov	rax, qword ptr [rbp + 160]                     ; Move 64-bit value
    mov	word ptr [rax], cx
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp - 24]                      ; Compare values
    je	.LBB448_9                                       ; Jump instruction
# %bb.7:
    cmp	dword ptr [rbp - 36], 0                        ; Compare values
    jne	.LBB448_9                                      ; Jump instruction
# %bb.8:
    cmp	dword ptr [rbp - 40], 65535                    ; Compare values
    jbe	.LBB448_10                                     ; Jump instruction
    .LBB448_9:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    mov	rax, qword ptr [rbp + 160]                     ; Move 64-bit value
    mov	word ptr [rax], -1
    jmp	.LBB448_13                                     ; Jump instruction
    .LBB448_10:
    test	byte ptr [rbp - 9], 1                         ; Test values
    je	.LBB448_12                                      ; Jump instruction
# %bb.11:
    mov	rax, qword ptr [rbp + 160]                     ; Move 64-bit value
    movzx	ecx, word ptr [rax]
    xor	eax, eax
    sub	eax, ecx
    mov	cx, ax
    mov	rax, qword ptr [rbp + 160]                     ; Move 64-bit value
    mov	word ptr [rax], cx
    .LBB448_12:
    jmp	.LBB448_13                                     ; Jump instruction
    .LBB448_13:
    test	byte ptr [rbp + 15], 1                        ; Test values
    je	.LBB448_15                                      ; Jump instruction
# %bb.14:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB448_15:
    jmp	.LBB448_16                                     ; Jump instruction
    .LBB448_16:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB448_17                                     ; Jump instruction
    jmp	.LBB448_18                                     ; Jump instruction
    .LBB448_17:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB448_18:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 224
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z@4HA":
    .seh_proc "?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z@4HA"
    .LBB448_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 8]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end42:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z")@IMGREL # IPToStateXData
    .long	216                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z":
    .long	.Lfunc_begin42@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp250@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp251@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
.globl	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z" # -- Begin function ?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z
    .p2align	4, 0x90
    "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z": # @"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .Lfunc_begin43:
    .seh_proc "?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 336
    .seh_stackalloc 336
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 200], -2                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], r9        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 40], r8        # 8-byte Spill ; Move 64-bit value
    mov	r8, rdx
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 48], r8        # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	r9, r8
    mov	qword ptr [rbp - 32], r9        # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rbp + 272]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 264]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 256]                      ; Move 64-bit value
    mov	qword ptr [rbp + 192], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 184], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 176], rcx                     ; Move 64-bit value
    mov	qword ptr [rbp + 168], rax                     ; Move 64-bit value
    call	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    mov	rcx, qword ptr [rbp + 256]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 16384
    cmp	eax, 0                                         ; Compare values
    je	.LBB449_17                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp + 256]                     ; Move 64-bit value
    lea	rdx, [rbp + 144]
    mov	qword ptr [rbp - 72], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    .Ltmp254:
    call	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp255:
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB449_2                                      ; Jump instruction
    .LBB449_2:
    lea	rcx, [rbp + 144]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 160], rax                     ; Move 64-bit value
    xor	eax, eax
    mov	r8b, al
    lea	rcx, [rbp + 112]
    mov	edx, 1
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" ; Function call
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    .Ltmp256:
    lea	rdx, [rbp + 80]
    call	"?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp257:
    jmp	.LBB449_3                                      ; Jump instruction
    .LBB449_3:
    .Ltmp258:
    lea	rcx, [rbp + 112]
    lea	rdx, [rbp + 80]
    call	"??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z" ; Function call
    .Ltmp259:
    jmp	.LBB449_4                                      ; Jump instruction
    .LBB449_4:
    lea	rcx, [rbp + 80]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    .Ltmp260:
    xor	eax, eax
    mov	dl, al
    lea	rcx, [rbp + 112]
    call	"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
    .Ltmp261:
    jmp	.LBB449_5                                      ; Jump instruction
    .LBB449_5:
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    .Ltmp262:
    lea	rdx, [rbp + 48]
    call	"?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp263:
    jmp	.LBB449_6                                      ; Jump instruction
    .LBB449_6:
    .Ltmp264:
    lea	rcx, [rbp + 112]
    lea	rdx, [rbp + 48]
    call	"??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z" ; Function call
    .Ltmp265:
    jmp	.LBB449_7                                      ; Jump instruction
    .LBB449_7:
    lea	rcx, [rbp + 48]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 112]
    call	"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    .Ltmp266:
    mov	rax, rsp
    mov	byte ptr [rax + 32], 1
    mov	r8d, 2
    call	"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z" ; Function call
    .Ltmp267:
    mov	dword ptr [rbp - 76], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB449_8                                      ; Jump instruction
    .LBB449_8:
    mov	eax, dword ptr [rbp - 76]       # 4-byte Reload ; Move 32-bit value
    test	eax, eax                                      ; Test values
    je	.LBB449_12                                      ; Jump instruction
    jmp	.LBB449_34                                     ; Jump instruction
    .LBB449_34:
    mov	eax, dword ptr [rbp - 76]       # 4-byte Reload ; Move 32-bit value
    sub	eax, 1
    je	.LBB449_13                                      ; Jump instruction
    jmp	.LBB449_14                                     ; Jump instruction
    .LBB449_12:
    mov	rax, qword ptr [rbp + 272]                     ; Move 64-bit value
    mov	byte ptr [rax], 0
    jmp	.LBB449_15                                     ; Jump instruction
    .LBB449_13:
    mov	rax, qword ptr [rbp + 272]                     ; Move 64-bit value
    mov	byte ptr [rax], 1
    jmp	.LBB449_15                                     ; Jump instruction
    .LBB449_14:
    mov	rax, qword ptr [rbp + 272]                     ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	rax, qword ptr [rbp + 264]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB449_15:
    lea	rcx, [rbp + 112]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB449_31                                     ; Jump instruction
    .LBB449_17:
    mov	rcx, qword ptr [rbp + 256]                     ; Move 64-bit value
    lea	rdx, [rbp - 8]
    mov	qword ptr [rbp - 88], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 256]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    .Ltmp252:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    lea	rcx, [rbp + 16]
    call	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" ; Function call
    .Ltmp253:
    mov	word ptr [rbp - 78], ax         # 2-byte Spill
    jmp	.LBB449_18                                     ; Jump instruction
    .LBB449_18:
    mov	ax, word ptr [rbp - 78]         # 2-byte Reload
    mov	word ptr [rbp + 14], ax
    lea	rcx, [rbp - 8]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    movsx	eax, byte ptr [rbp + 14]
    cmp	eax, 0                                         ; Compare values
    jge	.LBB449_21                                     ; Jump instruction
# %bb.19:
    mov	rax, qword ptr [rbp + 272]                     ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	rax, qword ptr [rbp + 264]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    jmp	.LBB449_30                                     ; Jump instruction
    .LBB449_21:
    movsx	r8d, byte ptr [rbp + 14]
    lea	rcx, [rbp + 16]
    lea	rdx, [rbp - 16]
    lea	r9, [rbp - 20]
    call	_Stolx                                        ; Function call
    mov	dword ptr [rbp - 24], eax                      ; Move 32-bit value
    lea	rax, [rbp + 16]
    cmp	qword ptr [rbp - 16], rax                      ; Compare values
    je	.LBB449_24                                      ; Jump instruction
# %bb.22:
    cmp	dword ptr [rbp - 20], 0                        ; Compare values
    jne	.LBB449_24                                     ; Jump instruction
# %bb.23:
    test	byte ptr [rbp + 15], 1                        ; Test values
    je	.LBB449_25                                      ; Jump instruction
    .LBB449_24:
    mov	rax, qword ptr [rbp + 272]                     ; Move 64-bit value
    mov	byte ptr [rax], 1
    mov	rax, qword ptr [rbp + 264]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    jmp	.LBB449_29                                     ; Jump instruction
    .LBB449_25:
    cmp	dword ptr [rbp - 24], 0                        ; Compare values
    setne	cl
    mov	rax, qword ptr [rbp + 272]                     ; Move 64-bit value
    and	cl, 1
    mov	byte ptr [rax], cl
    cmp	dword ptr [rbp - 24], 0                        ; Compare values
    je	.LBB449_28                                      ; Jump instruction
# %bb.26:
    cmp	dword ptr [rbp - 24], 1                        ; Compare values
    je	.LBB449_28                                      ; Jump instruction
# %bb.27:
    mov	rax, qword ptr [rbp + 264]                     ; Move 64-bit value
    mov	dword ptr [rax], 2                             ; Move 32-bit value
    .LBB449_28:
    jmp	.LBB449_29                                     ; Jump instruction
    .LBB449_29:
    jmp	.LBB449_30                                     ; Jump instruction
    .LBB449_30:
    jmp	.LBB449_31                                     ; Jump instruction
    .LBB449_31:
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB449_32                                     ; Jump instruction
    jmp	.LBB449_33                                     ; Jump instruction
    .LBB449_32:
    mov	rax, qword ptr [rbp + 264]                     ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    or	ecx, 1
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    .LBB449_33:
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 336
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z")@IMGREL
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$9@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA":
    .seh_proc "?dtor$9@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"
    .LBB449_9:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 144]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA":
    .seh_proc "?dtor$10@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"
    .LBB449_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 80]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$11@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA":
    .seh_proc "?dtor$11@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"
    .LBB449_11:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 48]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$16@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA":
    .seh_proc "?dtor$16@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"
    .LBB449_16:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 112]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$20@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA":
    .seh_proc "?dtor$20@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"
    .LBB449_20:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 8]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end43:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z":
    .long	429065506                       # MagicNumber
    .long	5                               # MaxState
    .long	("$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	10                              # IPMapEntries
    .long	("$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z")@IMGREL # IPToStateXData
    .long	328                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$9@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"@IMGREL # Action
    .long	-1                              # ToState
    .long	"?dtor$16@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$11@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$10@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"@IMGREL # Action
    .long	-1                              # ToState
    .long	"?dtor$20@?0??do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z@4HA"@IMGREL # Action
    "$ip2state$?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z":
    .long	.Lfunc_begin43@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp254@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp255@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	.Ltmp256@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp258@IMGREL+1               # IP
    .long	3                               # ToState
    .long	.Ltmp260@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp264@IMGREL+1               # IP
    .long	2                               # ToState
    .long	.Ltmp266@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp252@IMGREL+1               # IP
    .long	4                               # ToState
    .long	.Ltmp253@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .section	.text,"xr",discard,"??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ"
.globl	"??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ" # -- Begin function ??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ
    .p2align	4, 0x90
    "??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ": # @"??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ"
    .seh_proc "??1?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1facet@locale@std@@MEAA@XZ"                ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
.globl	"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" # -- Begin function ??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z": # @"??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
    .seh_proc "??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
.globl	"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z" # -- Begin function ??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z
    .p2align	4, 0x90
    "??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z": # @"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .Lfunc_begin44:
    .seh_proc "??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 384
    .seh_stackalloc 384
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 248], -2                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    mov	dword ptr [rbp + 240], r9d                     ; Move 32-bit value
    mov	qword ptr [rbp + 232], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 224], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 216], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 304]                     ; Move 64-bit value
    call	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" ; Function call
    mov	qword ptr [rbp + 208], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 208]                     ; Move 64-bit value
    lea	rdx, [rbp + 176]
    call	"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    lea	rcx, [rbp + 176]
    call	"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB452_1                                      ; Jump instruction
    jmp	.LBB452_2                                      ; Jump instruction
    .LBB452_1:
    xor	eax, eax
# kill: def $al killed $al killed $eax
    mov	byte ptr [rbp + 7], al          # 1-byte Spill
    jmp	.LBB452_4                                      ; Jump instruction
    .LBB452_2:
    mov	rcx, qword ptr [rbp + 208]                     ; Move 64-bit value
    .Ltmp268:
    call	"?thousands_sep@?$numpunct@D@std@@QEBADXZ"    ; Function call
    .Ltmp269:
    mov	byte ptr [rbp + 6], al          # 1-byte Spill
    jmp	.LBB452_3                                      ; Jump instruction
    .LBB452_3:
    mov	al, byte ptr [rbp + 6]          # 1-byte Reload
    mov	byte ptr [rbp + 7], al          # 1-byte Spill
    jmp	.LBB452_4                                      ; Jump instruction
    .LBB452_4:
    mov	al, byte ptr [rbp + 7]          # 1-byte Reload
    mov	byte ptr [rbp + 175], al
    mov	dword ptr [rbp + 168], 22                      ; Move 32-bit value
    mov	dword ptr [rbp + 164], 24                      ; Move 32-bit value
    mov	rcx, qword ptr [rbp + 304]                     ; Move 64-bit value
    .Ltmp270:
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp271:
    mov	qword ptr [rbp - 8], rax        # 8-byte Spill ; Move 64-bit value
    jmp	.LBB452_5                                      ; Jump instruction
    .LBB452_5:
    mov	rax, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 120], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rip + "?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB"]
    mov	qword ptr [rbp - 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z" ; Function call
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    call	"??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z" ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    .Ltmp272:
    lea	r9, [rbp + 128]
    call	"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"   ; Function call
    .Ltmp273:
    jmp	.LBB452_6                                      ; Jump instruction
    .LBB452_6:
    mov	byte ptr [rbp + 119], 0
    movsx	eax, byte ptr [rbp + 175]
    cmp	eax, 0                                         ; Compare values
    je	.LBB452_16                                      ; Jump instruction
# %bb.7:
    jmp	.LBB452_8                                      ; Jump instruction
    .LBB452_8:                              # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp274:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp275:
    mov	byte ptr [rbp - 33], al         # 1-byte Spill
    jmp	.LBB452_9                                      ; Jump instruction
    .LBB452_9:                              #   in Loop: Header=BB452_8 Depth=1
    mov	cl, byte ptr [rbp - 33]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 34], al         # 1-byte Spill
    jne	.LBB452_10                                     ; Jump instruction
    jmp	.LBB452_12                                     ; Jump instruction
    .LBB452_10:                             #   in Loop: Header=BB452_8 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp276:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp277:
    mov	byte ptr [rbp - 35], al         # 1-byte Spill
    jmp	.LBB452_11                                     ; Jump instruction
    .LBB452_11:                             #   in Loop: Header=BB452_8 Depth=1
    mov	al, byte ptr [rbp - 35]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 175]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp - 34], al         # 1-byte Spill
    .LBB452_12:                             #   in Loop: Header=BB452_8 Depth=1
    mov	al, byte ptr [rbp - 34]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_13                                     ; Jump instruction
    jmp	.LBB452_15                                     ; Jump instruction
    .LBB452_13:                             #   in Loop: Header=BB452_8 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp328:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp329:
    jmp	.LBB452_14                                     ; Jump instruction
    .LBB452_14:                             #   in Loop: Header=BB452_8 Depth=1
    mov	byte ptr [rbp + 119], 1
    jmp	.LBB452_8                                      ; Jump instruction
    .LBB452_15:
    jmp	.LBB452_16                                     ; Jump instruction
    .LBB452_16:
    mov	rax, qword ptr [rbp + 216]                     ; Move 64-bit value
    mov	qword ptr [rbp + 104], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp278:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp279:
    mov	byte ptr [rbp - 36], al         # 1-byte Spill
    jmp	.LBB452_17                                     ; Jump instruction
    .LBB452_17:
    mov	al, byte ptr [rbp - 36]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_18                                     ; Jump instruction
    jmp	.LBB452_28                                     ; Jump instruction
    .LBB452_18:
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp280:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp281:
    mov	byte ptr [rbp - 37], al         # 1-byte Spill
    jmp	.LBB452_19                                     ; Jump instruction
    .LBB452_19:
    mov	al, byte ptr [rbp - 37]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 151]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB452_22                                     ; Jump instruction
# %bb.20:
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	rcx, rax
    inc	rcx
    mov	qword ptr [rbp + 104], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 43
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp286:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp287:
    jmp	.LBB452_21                                     ; Jump instruction
    .LBB452_21:
    jmp	.LBB452_27                                     ; Jump instruction
    .LBB452_22:
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp282:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp283:
    mov	byte ptr [rbp - 38], al         # 1-byte Spill
    jmp	.LBB452_23                                     ; Jump instruction
    .LBB452_23:
    mov	al, byte ptr [rbp - 38]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 150]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB452_26                                     ; Jump instruction
# %bb.24:
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	rcx, rax
    inc	rcx
    mov	qword ptr [rbp + 104], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 45
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp284:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp285:
    jmp	.LBB452_25                                     ; Jump instruction
    .LBB452_25:
    jmp	.LBB452_26                                     ; Jump instruction
    .LBB452_26:
    jmp	.LBB452_27                                     ; Jump instruction
    .LBB452_27:
    jmp	.LBB452_28                                     ; Jump instruction
    .LBB452_28:
    movsx	eax, byte ptr [rbp + 175]
    cmp	eax, 0                                         ; Compare values
    je	.LBB452_38                                      ; Jump instruction
# %bb.29:
    jmp	.LBB452_30                                     ; Jump instruction
    .LBB452_30:                             # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp288:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp289:
    mov	byte ptr [rbp - 39], al         # 1-byte Spill
    jmp	.LBB452_31                                     ; Jump instruction
    .LBB452_31:                             #   in Loop: Header=BB452_30 Depth=1
    mov	cl, byte ptr [rbp - 39]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 40], al         # 1-byte Spill
    jne	.LBB452_32                                     ; Jump instruction
    jmp	.LBB452_34                                     ; Jump instruction
    .LBB452_32:                             #   in Loop: Header=BB452_30 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp290:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp291:
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    jmp	.LBB452_33                                     ; Jump instruction
    .LBB452_33:                             #   in Loop: Header=BB452_30 Depth=1
    mov	al, byte ptr [rbp - 41]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 175]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp - 40], al         # 1-byte Spill
    .LBB452_34:                             #   in Loop: Header=BB452_30 Depth=1
    mov	al, byte ptr [rbp - 40]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_35                                     ; Jump instruction
    jmp	.LBB452_37                                     ; Jump instruction
    .LBB452_35:                             #   in Loop: Header=BB452_30 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp326:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp327:
    jmp	.LBB452_36                                     ; Jump instruction
    .LBB452_36:                             #   in Loop: Header=BB452_30 Depth=1
    mov	byte ptr [rbp + 119], 1
    jmp	.LBB452_30                                     ; Jump instruction
    .LBB452_37:
    jmp	.LBB452_38                                     ; Jump instruction
    .LBB452_38:
    mov	eax, dword ptr [rbp + 240]                     ; Move 32-bit value
    and	eax, 3584
    mov	dword ptr [rbp + 240], eax                     ; Move 32-bit value
    cmp	dword ptr [rbp + 240], 1024                    ; Compare values
    jne	.LBB452_40                                     ; Jump instruction
# %bb.39:
    mov	byte ptr [rbp + 103], 8
    jmp	.LBB452_47                                     ; Jump instruction
    .LBB452_40:
    cmp	dword ptr [rbp + 240], 2048                    ; Compare values
    jne	.LBB452_42                                     ; Jump instruction
# %bb.41:
    mov	byte ptr [rbp + 103], 16
    jmp	.LBB452_46                                     ; Jump instruction
    .LBB452_42:
    cmp	dword ptr [rbp + 240], 0                       ; Compare values
    jne	.LBB452_44                                     ; Jump instruction
# %bb.43:
    mov	byte ptr [rbp + 103], 0
    jmp	.LBB452_45                                     ; Jump instruction
    .LBB452_44:
    mov	byte ptr [rbp + 103], 10
    .LBB452_45:
    jmp	.LBB452_46                                     ; Jump instruction
    .LBB452_46:
    jmp	.LBB452_47                                     ; Jump instruction
    .LBB452_47:
    mov	byte ptr [rbp + 102], 0
    mov	byte ptr [rbp + 101], 0
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp292:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp293:
    mov	byte ptr [rbp - 42], al         # 1-byte Spill
    jmp	.LBB452_48                                     ; Jump instruction
    .LBB452_48:
    mov	al, byte ptr [rbp - 42]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_49                                     ; Jump instruction
    jmp	.LBB452_66                                     ; Jump instruction
    .LBB452_49:
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp294:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp295:
    mov	byte ptr [rbp - 43], al         # 1-byte Spill
    jmp	.LBB452_50                                     ; Jump instruction
    .LBB452_50:
    mov	al, byte ptr [rbp - 43]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 128]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB452_66                                     ; Jump instruction
# %bb.51:
    mov	byte ptr [rbp + 102], 1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp296:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp297:
    jmp	.LBB452_52                                     ; Jump instruction
    .LBB452_52:
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp298:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp299:
    mov	byte ptr [rbp - 44], al         # 1-byte Spill
    jmp	.LBB452_53                                     ; Jump instruction
    .LBB452_53:
    mov	al, byte ptr [rbp - 44]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_54                                     ; Jump instruction
    jmp	.LBB452_62                                     ; Jump instruction
    .LBB452_54:
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp300:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp301:
    mov	byte ptr [rbp - 45], al         # 1-byte Spill
    jmp	.LBB452_55                                     ; Jump instruction
    .LBB452_55:
    mov	al, byte ptr [rbp - 45]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 153]
    cmp	eax, ecx                                       ; Compare values
    je	.LBB452_58                                      ; Jump instruction
# %bb.56:
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp302:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp303:
    mov	byte ptr [rbp - 46], al         # 1-byte Spill
    jmp	.LBB452_57                                     ; Jump instruction
    .LBB452_57:
    mov	al, byte ptr [rbp - 46]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 152]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB452_62                                     ; Jump instruction
    .LBB452_58:
    movsx	eax, byte ptr [rbp + 103]
    cmp	eax, 0                                         ; Compare values
    je	.LBB452_60                                      ; Jump instruction
# %bb.59:
    movsx	eax, byte ptr [rbp + 103]
    cmp	eax, 16                                        ; Compare values
    jne	.LBB452_62                                     ; Jump instruction
    .LBB452_60:
    mov	byte ptr [rbp + 103], 16
    mov	byte ptr [rbp + 102], 0
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp304:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp305:
    jmp	.LBB452_61                                     ; Jump instruction
    .LBB452_61:
    jmp	.LBB452_65                                     ; Jump instruction
    .LBB452_62:
    movsx	eax, byte ptr [rbp + 103]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB452_64                                     ; Jump instruction
# %bb.63:
    mov	byte ptr [rbp + 103], 8
    .LBB452_64:
    jmp	.LBB452_65                                     ; Jump instruction
    .LBB452_65:
    jmp	.LBB452_66                                     ; Jump instruction
    .LBB452_66:
    movsx	eax, byte ptr [rbp + 103]
    cmp	eax, 0                                         ; Compare values
    je	.LBB452_68                                      ; Jump instruction
# %bb.67:
    movsx	eax, byte ptr [rbp + 103]
    cmp	eax, 10                                        ; Compare values
    jne	.LBB452_69                                     ; Jump instruction
    .LBB452_68:
    mov	eax, 10
    mov	dword ptr [rbp - 52], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB452_70                                     ; Jump instruction
    .LBB452_69:
    movsx	edx, byte ptr [rbp + 103]
    mov	eax, 22
    mov	ecx, 8
    cmp	edx, 8                                         ; Compare values
    cmove	eax, ecx
    mov	dword ptr [rbp - 52], eax       # 4-byte Spill ; Move 32-bit value
    .LBB452_70:
    mov	eax, dword ptr [rbp - 52]       # 4-byte Reload ; Move 32-bit value
    cdqe
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    mov	r8b, byte ptr [rbp + 102]
    and	r8b, 1
    .Ltmp306:
    lea	rcx, [rbp + 56]
    mov	edx, 1
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" ; Function call
    .Ltmp307:
    jmp	.LBB452_71                                     ; Jump instruction
    .LBB452_71:
    mov	qword ptr [rbp + 48], 0                        ; Move 64-bit value
    mov	rax, qword ptr [rbp + 216]                     ; Move 64-bit value
    add	rax, 31
    mov	qword ptr [rbp + 40], rax                      ; Move 64-bit value
    .LBB452_72:                             # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp308:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp309:
    mov	byte ptr [rbp - 53], al         # 1-byte Spill
    jmp	.LBB452_73                                     ; Jump instruction
    .LBB452_73:                             #   in Loop: Header=BB452_72 Depth=1
    mov	al, byte ptr [rbp - 53]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_74                                     ; Jump instruction
    jmp	.LBB452_95                                     ; Jump instruction
    .LBB452_74:                             #   in Loop: Header=BB452_72 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp310:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp311:
    mov	byte ptr [rbp - 54], al         # 1-byte Spill
    jmp	.LBB452_75                                     ; Jump instruction
    .LBB452_75:                             #   in Loop: Header=BB452_72 Depth=1
    .Ltmp312:
    mov	dl, byte ptr [rbp - 54]         # 1-byte Reload
    lea	rcx, [rbp + 128]
    call	"??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z" ; Function call
    .Ltmp313:
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB452_76                                     ; Jump instruction
    .LBB452_76:                             #   in Loop: Header=BB452_72 Depth=1
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 32]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 88]                      ; Compare values
    jae	.LBB452_84                                     ; Jump instruction
# %bb.77:                               #   in Loop: Header=BB452_72 Depth=1
    mov	rcx, qword ptr [rbp + 32]                      ; Move 64-bit value
    lea	rax, [rip + "?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB"]
    mov	cl, byte ptr [rax + rcx]
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    test	byte ptr [rbp + 101], 1                       ; Test values
    jne	.LBB452_79                                     ; Jump instruction
# %bb.78:                               #   in Loop: Header=BB452_72 Depth=1
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 48                                        ; Compare values
    je	.LBB452_81                                      ; Jump instruction
    .LBB452_79:                             #   in Loop: Header=BB452_72 Depth=1
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 40]                      ; Compare values
    jae	.LBB452_81                                     ; Jump instruction
# %bb.80:                               #   in Loop: Header=BB452_72 Depth=1
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 104], rax                     ; Move 64-bit value
    mov	byte ptr [rbp + 101], 1
    .LBB452_81:                             #   in Loop: Header=BB452_72 Depth=1
    mov	byte ptr [rbp + 102], 1
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 127                                       ; Compare values
    je	.LBB452_83                                      ; Jump instruction
# %bb.82:                               #   in Loop: Header=BB452_72 Depth=1
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	cl, byte ptr [rax]
    add	cl, 1
    mov	byte ptr [rax], cl
    .LBB452_83:                             #   in Loop: Header=BB452_72 Depth=1
    jmp	.LBB452_93                                     ; Jump instruction
    .LBB452_84:                             #   in Loop: Header=BB452_72 Depth=1
    movsx	eax, byte ptr [rbp + 175]
    cmp	eax, 0                                         ; Compare values
    je	.LBB452_87                                      ; Jump instruction
# %bb.85:                               #   in Loop: Header=BB452_72 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp314:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp315:
    mov	byte ptr [rbp - 65], al         # 1-byte Spill
    jmp	.LBB452_86                                     ; Jump instruction
    .LBB452_86:                             #   in Loop: Header=BB452_72 Depth=1
    mov	al, byte ptr [rbp - 65]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 175]
    cmp	eax, ecx                                       ; Compare values
    je	.LBB452_88                                      ; Jump instruction
    .LBB452_87:
    jmp	.LBB452_95                                     ; Jump instruction
    .LBB452_88:                             #   in Loop: Header=BB452_72 Depth=1
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB452_90                                     ; Jump instruction
# %bb.89:                               #   in Loop: Header=BB452_72 Depth=1
    mov	byte ptr [rbp + 119], 1
    jmp	.LBB452_92                                     ; Jump instruction
    .LBB452_90:                             #   in Loop: Header=BB452_72 Depth=1
    .Ltmp316:
    xor	eax, eax
    mov	dl, al
    lea	rcx, [rbp + 56]
    call	"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
    .Ltmp317:
    jmp	.LBB452_91                                     ; Jump instruction
    .LBB452_91:                             #   in Loop: Header=BB452_72 Depth=1
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 48], rax                      ; Move 64-bit value
    .LBB452_92:                             #   in Loop: Header=BB452_72 Depth=1
    jmp	.LBB452_93                                     ; Jump instruction
    .LBB452_93:                             #   in Loop: Header=BB452_72 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp324:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp325:
    jmp	.LBB452_94                                     ; Jump instruction
    .LBB452_94:                             #   in Loop: Header=BB452_72 Depth=1
    jmp	.LBB452_72                                     ; Jump instruction
    .LBB452_95:
    cmp	qword ptr [rbp + 48], 0                        ; Compare values
    je	.LBB452_100                                     ; Jump instruction
# %bb.96:
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 0                                         ; Compare values
    jle	.LBB452_98                                     ; Jump instruction
# %bb.97:
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 48], rax                      ; Move 64-bit value
    jmp	.LBB452_99                                     ; Jump instruction
    .LBB452_98:
    mov	byte ptr [rbp + 119], 1
    .LBB452_99:
    jmp	.LBB452_100                                    ; Jump instruction
    .LBB452_100:
    movsx	eax, byte ptr [rbp + 175]
    cmp	eax, 0                                         ; Compare values
    je	.LBB452_110                                     ; Jump instruction
# %bb.101:
    jmp	.LBB452_102                                    ; Jump instruction
    .LBB452_102:                            # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp318:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp319:
    mov	byte ptr [rbp - 66], al         # 1-byte Spill
    jmp	.LBB452_103                                    ; Jump instruction
    .LBB452_103:                            #   in Loop: Header=BB452_102 Depth=1
    mov	cl, byte ptr [rbp - 66]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 67], al         # 1-byte Spill
    jne	.LBB452_104                                    ; Jump instruction
    jmp	.LBB452_106                                    ; Jump instruction
    .LBB452_104:                            #   in Loop: Header=BB452_102 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp320:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp321:
    mov	byte ptr [rbp - 68], al         # 1-byte Spill
    jmp	.LBB452_105                                    ; Jump instruction
    .LBB452_105:                            #   in Loop: Header=BB452_102 Depth=1
    mov	al, byte ptr [rbp - 68]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 175]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp - 67], al         # 1-byte Spill
    .LBB452_106:                            #   in Loop: Header=BB452_102 Depth=1
    mov	al, byte ptr [rbp - 67]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_107                                    ; Jump instruction
    jmp	.LBB452_109                                    ; Jump instruction
    .LBB452_107:                            #   in Loop: Header=BB452_102 Depth=1
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    .Ltmp322:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp323:
    jmp	.LBB452_108                                    ; Jump instruction
    .LBB452_108:                            #   in Loop: Header=BB452_102 Depth=1
    mov	byte ptr [rbp + 119], 1
    jmp	.LBB452_102                                    ; Jump instruction
    .LBB452_109:
    jmp	.LBB452_110                                    ; Jump instruction
    .LBB452_110:
    lea	rcx, [rbp + 176]
    call	"?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	qword ptr [rbp + 24], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 176]
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    add	rax, rcx
    mov	qword ptr [rbp + 16], rax                      ; Move 64-bit value
    mov	byte ptr [rbp + 15], 0
    .LBB452_111:                            # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	byte ptr [rbp + 102], 1                       ; Test values
    mov	byte ptr [rbp - 81], al         # 1-byte Spill
    je	.LBB452_114                                     ; Jump instruction
# %bb.112:                              #   in Loop: Header=BB452_111 Depth=1
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	byte ptr [rbp + 119], 1                       ; Test values
    mov	byte ptr [rbp - 81], al         # 1-byte Spill
    jne	.LBB452_114                                    ; Jump instruction
# %bb.113:                              #   in Loop: Header=BB452_111 Depth=1
    cmp	qword ptr [rbp + 48], 0                        ; Compare values
    seta	al
    mov	byte ptr [rbp - 81], al         # 1-byte Spill
    .LBB452_114:                            #   in Loop: Header=BB452_111 Depth=1
    mov	al, byte ptr [rbp - 81]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB452_115                                    ; Jump instruction
    jmp	.LBB452_125                                    ; Jump instruction
    .LBB452_115:                            #   in Loop: Header=BB452_111 Depth=1
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 16]                      ; Compare values
    je	.LBB452_117                                     ; Jump instruction
# %bb.116:                              #   in Loop: Header=BB452_111 Depth=1
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	al, byte ptr [rax]
    mov	byte ptr [rbp + 15], al
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 24], rax                      ; Move 64-bit value
    .LBB452_117:                            #   in Loop: Header=BB452_111 Depth=1
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp + 48], rax                      ; Move 64-bit value
    movsx	eax, byte ptr [rbp + 15]
    cmp	eax, 0                                         ; Compare values
    jle	.LBB452_124                                    ; Jump instruction
# %bb.118:                              #   in Loop: Header=BB452_111 Depth=1
    movsx	eax, byte ptr [rbp + 15]
    cmp	eax, 127                                       ; Compare values
    je	.LBB452_124                                     ; Jump instruction
# %bb.119:                              #   in Loop: Header=BB452_111 Depth=1
    cmp	qword ptr [rbp + 48], 0                        ; Compare values
    jbe	.LBB452_121                                    ; Jump instruction
# %bb.120:                              #   in Loop: Header=BB452_111 Depth=1
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    movsx	ecx, byte ptr [rbp + 15]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB452_123                                    ; Jump instruction
    .LBB452_121:                            #   in Loop: Header=BB452_111 Depth=1
    cmp	qword ptr [rbp + 48], 0                        ; Compare values
    jne	.LBB452_124                                    ; Jump instruction
# %bb.122:                              #   in Loop: Header=BB452_111 Depth=1
    mov	rdx, qword ptr [rbp + 48]                      ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    movsx	ecx, byte ptr [rbp + 15]
    cmp	eax, ecx                                       ; Compare values
    jle	.LBB452_124                                    ; Jump instruction
    .LBB452_123:                            #   in Loop: Header=BB452_111 Depth=1
    mov	byte ptr [rbp + 119], 1
    .LBB452_124:                            #   in Loop: Header=BB452_111 Depth=1
    jmp	.LBB452_111                                    ; Jump instruction
    .LBB452_125:
    test	byte ptr [rbp + 102], 1                       ; Test values
    jne	.LBB452_127                                    ; Jump instruction
# %bb.126:
    movsx	eax, byte ptr [rbp + 103]
    xor	eax, -1
# kill: def $al killed $al killed $eax
    mov	byte ptr [rbp + 246], al
    mov	byte ptr [rbp + 247], 0
    mov	dword ptr [rbp + 8], 1                         ; Move 32-bit value
    jmp	.LBB452_130                                    ; Jump instruction
    .LBB452_127:
    test	byte ptr [rbp + 101], 1                       ; Test values
    jne	.LBB452_129                                    ; Jump instruction
# %bb.128:
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rbp + 104], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 48
    .LBB452_129:
    mov	rax, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	al, byte ptr [rbp + 103]
    mov	byte ptr [rbp + 246], al
    mov	al, byte ptr [rbp + 119]
    and	al, 1
    mov	byte ptr [rbp + 247], al
    mov	dword ptr [rbp + 8], 1                         ; Move 32-bit value
    .LBB452_130:
    lea	rcx, [rbp + 56]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 176]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	ax, word ptr [rbp + 246]
    add	rsp, 384
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$131@?0???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z@4HA":
    .seh_proc "?dtor$131@?0???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z@4HA"
    .LBB452_131:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 56]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$132@?0???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z@4HA":
    .seh_proc "?dtor$132@?0???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z@4HA"
    .LBB452_132:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 176]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end44:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z")@IMGREL # IPToStateXData
    .long	376                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z":
    .long	-1                              # ToState
    .long	"?dtor$132@?0???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$131@?0???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z":
    .long	.Lfunc_begin44@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp268@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp308@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp323@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .section	.text,"xr",discard,"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
.globl	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" # -- Begin function ??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
    .p2align	4, 0x90
    "??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z": # @"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
    .seh_proc "??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z" ; Function call
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
.globl	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" # -- Begin function ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
    .p2align	4, 0x90
    "??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z": # @"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .Lfunc_begin45:
    .seh_proc "??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    lea	rcx, [rbp - 20]
    xor	edx, edx
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
    mov	rax, qword ptr [rip + "?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB"] ; Move 64-bit value
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    lea	rcx, [rip + "?id@?$numpunct@D@std@@2V0locale@2@A"]
    call	"??Bid@locale@std@@QEAA_KXZ"                  ; Function call
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    .Ltmp330:
    call	"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z" ; Function call
    .Ltmp331:
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB454_1                                      ; Jump instruction
    .LBB454_1:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 48], 0                        ; Compare values
    jne	.LBB454_12                                     ; Jump instruction
# %bb.2:
    cmp	qword ptr [rbp - 32], 0                        ; Compare values
    je	.LBB454_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    jmp	.LBB454_11                                     ; Jump instruction
    .LBB454_4:
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    .Ltmp332:
    lea	rcx, [rbp - 32]
    call	"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" ; Function call
    .Ltmp333:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB454_5                                      ; Jump instruction
    .LBB454_5:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, -1                                        ; Compare values
    jne	.LBB454_8                                      ; Jump instruction
# %bb.6:
    .Ltmp336:
    call	"?_Throw_bad_cast@std@@YAXXZ"                 ; Function call
    .Ltmp337:
    jmp	.LBB454_7                                      ; Jump instruction
    .LBB454_7:
    .LBB454_8:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    .Ltmp334:
    call	"?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z" ; Function call
    .Ltmp335:
    jmp	.LBB454_9                                      ; Jump instruction
    .LBB454_9:
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rip + "?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB"], rax ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ" ; Function call
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB454_11                                     ; Jump instruction
    .LBB454_11:
    jmp	.LBB454_12                                     ; Jump instruction
    .LBB454_12:
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$10@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA"
    .LBB454_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$13@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA"
    .LBB454_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end45:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$10@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z":
    .long	.Lfunc_begin45@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp330@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp334@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp335@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .section	.text,"xr",discard,"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 40]                          ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ"
.globl	"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ" # -- Begin function ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
    .p2align	4, 0x90
    "?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ": # @"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ"
    .seh_proc "?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    cmp	qword ptr [rax + 16], 0                        ; Compare values
    sete	al
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?thousands_sep@?$numpunct@D@std@@QEBADXZ"
.globl	"?thousands_sep@?$numpunct@D@std@@QEBADXZ" # -- Begin function ?thousands_sep@?$numpunct@D@std@@QEBADXZ
    .p2align	4, 0x90
    "?thousands_sep@?$numpunct@D@std@@QEBADXZ": # @"?thousands_sep@?$numpunct@D@std@@QEBADXZ"
    .seh_proc "?thousands_sep@?$numpunct@D@std@@QEBADXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 32]                          ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"
.globl	"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z" # -- Begin function ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z
    .p2align	4, 0x90
    "?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z": # @"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"
    .seh_proc "?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r9, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 56]                          ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
.globl	"??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z" # -- Begin function ??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z
    .p2align	4, 0x90
    "??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z": # @"??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
    .seh_proc "??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rax, 27
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
.globl	"??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z" # -- Begin function ??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z
    .p2align	4, 0x90
    "??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z": # @"??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
    .seh_proc "??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
.globl	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" # -- Begin function ??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z
    .p2align	4, 0x90
    "??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z": # @"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
    .seh_proc "??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    xor	al, -1
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ"
.globl	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" # -- Begin function ??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ
    .p2align	4, 0x90
    "??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ": # @"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ"
    .seh_proc "??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    test	byte ptr [rax + 8], 1                         ; Test values
    jne	.LBB462_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ" ; Function call
    .LBB462_2:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	al, byte ptr [rax + 9]
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
.globl	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ": # @"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
    .p2align	4, 0x90
    "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
    .Lfunc_begin46:
    .seh_proc "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	byte ptr [rbp - 9], r8b
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rbp - 33]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 24]                       ; Move 64-bit value
    mov	dl, byte ptr [rbp - 9]
    .Ltmp338:
    call	"??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z" ; Function call
    .Ltmp339:
    jmp	.LBB464_1                                      ; Jump instruction
    .LBB464_1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA"
    .LBB464_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end46:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z":
    .long	.Lfunc_begin46@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp338@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp339@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z"
    .section	.text,"xr",discard,"??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z"
.globl	"??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z" # -- Begin function ??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z
    .p2align	4, 0x90
    "??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z": # @"??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z"
    .seh_proc "??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rdx, 26
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    lea	r8, [rsp + 55]
    call	"??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    sub	rax, rcx
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z"
.globl	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" # -- Begin function ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
    .p2align	4, 0x90
    "??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z": # @"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z"
    .seh_proc "??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" ; Function call
    add	rax, qword ptr [rsp + 48]
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
.globl	"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" # -- Begin function ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
    .p2align	4, 0x90
    "?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z": # @"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
    .seh_proc "?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	byte ptr [rsp + 87], dl
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 24]                      ; Compare values
    jae	.LBB467_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rcx + 16], rax                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 64]
    lea	rdx, [rsp + 87]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    mov	byte ptr [rsp + 55], 0
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 1
    add	rcx, rax
    lea	rdx, [rsp + 55]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    jmp	.LBB467_3                                      ; Jump instruction
    .LBB467_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 87]
    mov	r8b, byte ptr [rsp + 54]
    mov	edx, 1
    call	"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z" ; Push to stack
    .LBB467_3:
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
.globl	"?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" # -- Begin function ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ": # @"?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
    .seh_proc "?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
.globl	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" # -- Begin function ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ": # @"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
    .seh_proc "?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ"
.globl	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" # -- Begin function ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ": # @"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ"
    .seh_proc "??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
.globl	"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" # -- Begin function ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
    .p2align	4, 0x90
    "?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z": # @"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .Lfunc_begin47:
    .seh_proc "?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 24], rcx                      ; Move 64-bit value
    cmp	qword ptr [rbp + 24], 0                        ; Compare values
    je	.LBB471_9                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB471_9                                      ; Jump instruction
# %bb.2:
    mov	ecx, 48
    call	"??2@YAPEAX_K@Z"                              ; Function call
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	byte ptr [rbp - 81], 1
    mov	rcx, qword ptr [rbp + 32]                      ; Move 64-bit value
    call	"?_C_str@locale@std@@QEBAPEBDXZ"              ; Function call
    mov	rdx, rax
    .Ltmp340:
    lea	rcx, [rbp - 80]
    call	"??0_Locinfo@std@@QEAA@PEBD@Z"                ; Function call
    .Ltmp341:
    jmp	.LBB471_3                                      ; Jump instruction
    .LBB471_3:
    .Ltmp342:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    xor	eax, eax
    mov	r8d, eax
    lea	rdx, [rbp - 80]
    mov	r9b, 1
    call	"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z" ; Function call
    .Ltmp343:
    jmp	.LBB471_4                                      ; Jump instruction
    .LBB471_4:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 81], 0
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    jmp	.LBB471_9                                      ; Jump instruction
    .LBB471_9:
    mov	eax, 4
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL
    .section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$5@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB471_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$6@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB471_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    test	byte ptr [rbp - 81], 1                        ; Test values
    jne	.LBB471_7                                      ; Jump instruction
    jmp	.LBB471_8                                      ; Jump instruction
    .LBB471_7:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 48
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB471_8:
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end47:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	-1                              # ToState
    .long	"?dtor$6@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$5@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    "$ip2state$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	.Lfunc_begin47@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp340@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp342@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp343@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .section	.text,"xr",discard,"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
.globl	"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z" # -- Begin function ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
    .p2align	4, 0x90
    "??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z": # @"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
    .Lfunc_begin48:
    .seh_proc "??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    and	r9b, 1
    mov	byte ptr [rbp - 9], r9b
    mov	qword ptr [rbp - 24], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    call	"??0facet@locale@std@@IEAA@_K@Z"              ; Function call
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    lea	rax, [rip + "??_7?$numpunct@D@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	r8b, byte ptr [rbp - 9]
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    .Ltmp344:
    and	r8b, 1
    call	"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z" ; Function call
    .Ltmp345:
    jmp	.LBB472_1                                      ; Jump instruction
    .LBB472_1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA"
    .LBB472_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1facet@locale@std@@MEAA@XZ"                ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end48:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z":
    .long	.Lfunc_begin48@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp344@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp345@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z"
    .section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
.globl	"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z" # -- Begin function ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
    .p2align	4, 0x90
    "?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z": # @"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .Lfunc_begin49:
    .seh_proc "?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 256
    .seh_stackalloc 256
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 120], -2                      ; Move 64-bit value
    and	r8b, 1
    mov	byte ptr [rbp + 119], r8b
    mov	qword ptr [rbp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 96], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 96]                      ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    call	"?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ"  ; Function call
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    lea	rdx, [rbp + 44]
    call	"?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ"   ; Function call
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    mov	qword ptr [rax + 32], 0                        ; Move 64-bit value
    mov	qword ptr [rax + 40], 0                        ; Move 64-bit value
    mov	qword ptr [rbp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    lea	rdx, [rbp - 12]
    call	"?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ"   ; Function call
    test	byte ptr [rbp + 119], 1                       ; Test values
    je	.LBB473_2                                       ; Jump instruction
# %bb.1:
    lea	rax, [rip + "??_C@_00CNPNBAHC@?$AA@"]
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB473_3                                      ; Jump instruction
    .LBB473_2:
    mov	rax, qword ptr [rbp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    .LBB473_3:
    .Ltmp346:
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	r8, [rbp - 12]
    call	"??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z" ; Function call
    .Ltmp347:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB473_4                                      ; Jump instruction
    .LBB473_4:
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    call	"?_Getfalse@_Locinfo@std@@QEBAPEBDXZ"         ; Function call
    mov	rcx, rax
    .Ltmp348:
    xor	eax, eax
    mov	edx, eax
    lea	r8, [rbp + 44]
    call	"??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z" ; Function call
    .Ltmp349:
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB473_5                                      ; Jump instruction
    .LBB473_5:
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    call	"?_Gettrue@_Locinfo@std@@QEBAPEBDXZ"          ; Function call
    mov	rcx, rax
    .Ltmp350:
    xor	eax, eax
    mov	edx, eax
    lea	r8, [rbp + 44]
    call	"??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z" ; Function call
    .Ltmp351:
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB473_6                                      ; Jump instruction
    .LBB473_6:
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 40], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 32], 0                        ; Move 64-bit value
    test	byte ptr [rbp + 119], 1                       ; Test values
    je	.LBB473_8                                       ; Jump instruction
# %bb.7:
    mov	ecx, 46
    xor	eax, eax
    mov	edx, eax
    lea	r8, [rbp + 44]
    call	"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z" ; Function call
    mov	cl, al
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 24], cl
    mov	ecx, 44
    xor	eax, eax
    mov	edx, eax
    lea	r8, [rbp + 44]
    call	"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z" ; Function call
    mov	cl, al
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 25], cl
    jmp	.LBB473_9                                      ; Jump instruction
    .LBB473_8:
    lea	rcx, [rbp - 56]
    lea	rdx, [rbp + 44]
    mov	r8d, 44
    call	memcpy                                        ; Function call
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 88]                       ; Move 64-bit value
    xor	edx, edx
    lea	r9, [rbp - 56]
    call	"??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z" ; Function call
    .LBB473_9:
    lea	rcx, [rbp + 32]
    call	"??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 256
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z")@IMGREL
    .section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA":
    .seh_proc "?dtor$10@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA"
    .LBB473_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 32]
    call	"??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end49:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z")@IMGREL # IPToStateXData
    .long	248                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$10@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA"@IMGREL # Action
    "$ip2state$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z":
    .long	.Lfunc_begin49@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp346@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp351@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .section	.text,"xr",discard,"??_G?$numpunct@D@std@@MEAAPEAXI@Z"
.globl	"??_G?$numpunct@D@std@@MEAAPEAXI@Z" # -- Begin function ??_G?$numpunct@D@std@@MEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G?$numpunct@D@std@@MEAAPEAXI@Z":    # @"??_G?$numpunct@D@std@@MEAAPEAXI@Z"
    .seh_proc "??_G?$numpunct@D@std@@MEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1?$numpunct@D@std@@MEAA@XZ"                ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB474_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 48
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB474_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_decimal_point@?$numpunct@D@std@@MEBADXZ"
.globl	"?do_decimal_point@?$numpunct@D@std@@MEBADXZ" # -- Begin function ?do_decimal_point@?$numpunct@D@std@@MEBADXZ
    .p2align	4, 0x90
    "?do_decimal_point@?$numpunct@D@std@@MEBADXZ": # @"?do_decimal_point@?$numpunct@D@std@@MEBADXZ"
    .seh_proc "?do_decimal_point@?$numpunct@D@std@@MEBADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	al, byte ptr [rax + 24]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_thousands_sep@?$numpunct@D@std@@MEBADXZ"
.globl	"?do_thousands_sep@?$numpunct@D@std@@MEBADXZ" # -- Begin function ?do_thousands_sep@?$numpunct@D@std@@MEBADXZ
    .p2align	4, 0x90
    "?do_thousands_sep@?$numpunct@D@std@@MEBADXZ": # @"?do_thousands_sep@?$numpunct@D@std@@MEBADXZ"
    .seh_proc "?do_thousands_sep@?$numpunct@D@std@@MEBADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	al, byte ptr [rax + 25]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 16]                      ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 32]                      ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 40]                      ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ"
.globl	"?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ" # -- Begin function ?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ
    .p2align	4, 0x90
    "?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ": # @"?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ"
    .seh_proc "?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    call	localeconv                                    ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ"
.globl	"?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ" # -- Begin function ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
    .p2align	4, 0x90
    "?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ": # @"?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ"
    .seh_proc "?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    call	_Getcvt                                       ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z"
.globl	"??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z" # -- Begin function ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
    .p2align	4, 0x90
    "??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z": # @"??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z"
    .seh_proc "??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	strlen                                        ; Function call
    add	rax, 1
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	edx, 1
    call	calloc                                        ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 48], 0                        ; Compare values
    jne	.LBB482_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xbad_alloc@std@@YAXXZ"                     ; Function call
    .LBB482_2:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    .LBB482_3:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rsp + 56]                      ; Compare values
    jae	.LBB482_6                                      ; Jump instruction
# %bb.4:                                #   in Loop: Header=BB482_3 Depth=1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	cl, byte ptr [rax]
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	byte ptr [rax], cl
# %bb.5:                                #   in Loop: Header=BB482_3 Depth=1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    jmp	.LBB482_3                                      ; Jump instruction
    .LBB482_6:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getfalse@_Locinfo@std@@QEBAPEBDXZ"
.globl	"?_Getfalse@_Locinfo@std@@QEBAPEBDXZ" # -- Begin function ?_Getfalse@_Locinfo@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?_Getfalse@_Locinfo@std@@QEBAPEBDXZ":  # @"?_Getfalse@_Locinfo@std@@QEBAPEBDXZ"
    .seh_proc "?_Getfalse@_Locinfo@std@@QEBAPEBDXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    lea	rax, [rip + "??_C@_05LAPONLG@false?$AA@"]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Gettrue@_Locinfo@std@@QEBAPEBDXZ"
.globl	"?_Gettrue@_Locinfo@std@@QEBAPEBDXZ" # -- Begin function ?_Gettrue@_Locinfo@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?_Gettrue@_Locinfo@std@@QEBAPEBDXZ":   # @"?_Gettrue@_Locinfo@std@@QEBAPEBDXZ"
    .seh_proc "?_Gettrue@_Locinfo@std@@QEBAPEBDXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    lea	rax, [rip + "??_C@_04LOAJBDKD@true?$AA@"]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z"
.globl	"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z" # -- Begin function ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z
    .p2align	4, 0x90
    "??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z": # @"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z"
    .seh_proc "??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	byte ptr [rsp + 7], cl
    mov	al, byte ptr [rsp + 7]
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z"
.globl	"??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z" # -- Begin function ??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z
    .p2align	4, 0x90
    "??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z": # @"??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z"
    .seh_proc "??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 40], r9        # 8-byte Spill ; Move 64-bit value
    mov	rax, r8
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	cl, byte ptr [rax]
    xor	eax, eax
    mov	edx, eax
    call	"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z" ; Function call
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	cl, al
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 24], cl
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	cl, byte ptr [rax]
    xor	eax, eax
    mov	edx, eax
    call	"??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z" ; Function call
    mov	cl, al
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 25], cl
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ": # @"??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB487_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Tidy@?$numpunct@D@std@@AEAAXXZ"            ; Function call
    .LBB487_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$numpunct@D@std@@AEAAXXZ"
.globl	"?_Tidy@?$numpunct@D@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$numpunct@D@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$numpunct@D@std@@AEAAXXZ":     # @"?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .Lfunc_begin50:
    .seh_proc "?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    .Ltmp352:
    call	free                                          ; Function call
    .Ltmp353:
    jmp	.LBB488_1                                      ; Jump instruction
    .LBB488_1:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 32]                      ; Move 64-bit value
    .Ltmp354:
    call	free                                          ; Function call
    .Ltmp355:
    jmp	.LBB488_2                                      ; Jump instruction
    .LBB488_2:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 40]                      ; Move 64-bit value
    .Ltmp356:
    call	free                                          ; Function call
    .Ltmp357:
    jmp	.LBB488_3                                      ; Jump instruction
    .LBB488_3:
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Tidy@?$numpunct@D@std@@AEAAXXZ")@IMGREL
    .section	.text,"xr",discard,"?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0??_Tidy@?$numpunct@D@std@@AEAAXXZ@4HA":
    .seh_proc "?dtor$4@?0??_Tidy@?$numpunct@D@std@@AEAAXXZ@4HA"
    .LBB488_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end50:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .p2align	2, 0x0
    "$cppxdata$?_Tidy@?$numpunct@D@std@@AEAAXXZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Tidy@?$numpunct@D@std@@AEAAXXZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Tidy@?$numpunct@D@std@@AEAAXXZ")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Tidy@?$numpunct@D@std@@AEAAXXZ":
    .long	-1                              # ToState
    .long	"?dtor$4@?0??_Tidy@?$numpunct@D@std@@AEAAXXZ@4HA"@IMGREL # Action
    "$ip2state$?_Tidy@?$numpunct@D@std@@AEAAXXZ":
    .long	.Lfunc_begin50@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp352@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp357@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .section	.text,"xr",discard,"??1?$numpunct@D@std@@MEAA@XZ"
.globl	"??1?$numpunct@D@std@@MEAA@XZ"  # -- Begin function ??1?$numpunct@D@std@@MEAA@XZ
    .p2align	4, 0x90
    "??1?$numpunct@D@std@@MEAA@XZ":         # @"??1?$numpunct@D@std@@MEAA@XZ"
    .seh_proc "??1?$numpunct@D@std@@MEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    lea	rax, [rip + "??_7?$numpunct@D@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    call	"?_Tidy@?$numpunct@D@std@@AEAAXXZ"            ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1facet@locale@std@@MEAA@XZ"                ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
    .p2align	4, 0x90
    "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
    .Lfunc_begin51:
    .seh_proc "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rbp - 25]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z" ; Function call
    mov	rcx, rax
    call	"??$_Convert_size@_K_K@std@@YA_K_K@Z"         ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    .Ltmp358:
    call	"??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z" ; Function call
    .Ltmp359:
    jmp	.LBB490_1                                      ; Jump instruction
    .LBB490_1:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA"
    .LBB490_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end51:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z":
    .long	.Lfunc_begin51@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp358@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp359@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z"
    .section	.text,"xr",discard,"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z": # @"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@D@std@@QEAA@XZ"               ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
.globl	"??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z" # -- Begin function ??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
    .p2align	4, 0x90
    "??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z": # @"??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
    .seh_proc "??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
# %bb.0:
    sub	rsp, 152
    .seh_stackalloc 152
    .seh_endprologue
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 128], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 120], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB492_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB492_2:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    lea	rax, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rsp + 120]                      ; Move 64-bit value
    lea	rcx, [rsp + 103]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rsp + 144], 15                      ; Compare values
    ja	.LBB492_4                                       ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], 15                       ; Move 64-bit value
    mov	r8, qword ptr [rsp + 144]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	byte ptr [rsp + 102], 0
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    add	rcx, qword ptr [rsp + 144]
    lea	rdx, [rsp + 102]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    lea	rcx, [rsp + 103]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    jmp	.LBB492_5                                      ; Jump instruction
    .LBB492_4:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	r8, rax
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	edx, 15
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rdx, [rsp + 88]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    lea	rdx, [rsp + 80]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	byte ptr [rsp + 79], 0
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	rcx, rax
    add	rcx, qword ptr [rsp + 144]
    lea	rdx, [rsp + 79]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    lea	rcx, [rsp + 103]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    .LBB492_5:
    nop
    add	rsp, 152
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z"
.globl	"?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z" # -- Begin function ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
    .p2align	4, 0x90
    "?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z": # @"?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z"
    .seh_proc "?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	strlen                                        ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ"
.globl	"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ" # -- Begin function ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ": # @"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ"
    .seh_proc "??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@D@std@@QEAA@XZ"
.globl	"??0?$allocator@D@std@@QEAA@XZ" # -- Begin function ??0?$allocator@D@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@D@std@@QEAA@XZ":        # @"??0?$allocator@D@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@D@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
.globl	"??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ": # @"??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    mov	qword ptr [rax + 24], 0                        ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
.globl	"??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" # -- Begin function ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ": # @"??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
    .seh_proc "??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    xor	edx, edx
    mov	r8d, 16
    call	memset                                        ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
.globl	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ": # @"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], 16                       ; Move 64-bit value
    lea	rcx, [rsp + 72]
    lea	rdx, [rsp + 56]
    call	"??$max@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    sub	rax, 1
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 40]
    lea	rdx, [rsp + 48]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xlen_string@std@@YAXXZ"
.globl	"?_Xlen_string@std@@YAXXZ"      # -- Begin function ?_Xlen_string@std@@YAXXZ
    .p2align	4, 0x90
    "?_Xlen_string@std@@YAXXZ":             # @"?_Xlen_string@std@@YAXXZ"
    .seh_proc "?_Xlen_string@std@@YAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ"
.globl	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" # -- Begin function ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ": # @"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ"
    .seh_proc "?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
.globl	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" # -- Begin function ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
    .p2align	4, 0x90
    "?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z": # @"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
    .seh_proc "?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    shl	r8, 0
    call	memcpy                                        ; Function call
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z"
.globl	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" # -- Begin function ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
    .p2align	4, 0x90
    "?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z": # @"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z"
    .seh_proc "?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	cl, byte ptr [rax]
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	byte ptr [rax], cl
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z"
.globl	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z" # -- Begin function ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
    .p2align	4, 0x90
    "?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z": # @"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z"
    .seh_proc "?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    or	rax, 15
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    jbe	.LBB503_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB503_5                                      ; Jump instruction
    .LBB503_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    shr	rdx
    sub	rcx, rdx
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB503_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB503_5                                      ; Jump instruction
    .LBB503_4:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    shr	rcx
    add	rax, rcx
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 48]
    lea	rdx, [rsp + 40]
    call	"??$max@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB503_5:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z"
.globl	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" # -- Begin function ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z": # @"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z"
    .seh_proc "??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, 1
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	qword ptr [rsp + 32], 0                        ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    add	rcx, -1
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z"
.globl	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" # -- Begin function ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z": # @"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z"
    .seh_proc "??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy@D@std@@YAPEADPEAD@Z"
.globl	"??$_Unfancy@D@std@@YAPEADPEAD@Z" # -- Begin function ??$_Unfancy@D@std@@YAPEADPEAD@Z
    .p2align	4, 0x90
    "??$_Unfancy@D@std@@YAPEADPEAD@Z":      # @"??$_Unfancy@D@std@@YAPEADPEAD@Z"
    .seh_proc "??$_Unfancy@D@std@@YAPEADPEAD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, -1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ"
.globl	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ" # -- Begin function ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ": # @"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ"
    .seh_proc "?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$max@_K@std@@YAAEB_KAEB_K0@Z"
.globl	"??$max@_K@std@@YAAEB_KAEB_K0@Z" # -- Begin function ??$max@_K@std@@YAAEB_KAEB_K0@Z
    .p2align	4, 0x90
    "??$max@_K@std@@YAAEB_KAEB_K0@Z":       # @"??$max@_K@std@@YAAEB_KAEB_K0@Z"
    .seh_proc "??$max@_K@std@@YAAEB_KAEB_K0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jae	.LBB509_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB509_3                                      ; Jump instruction
    .LBB509_2:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    .LBB509_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z"
.globl	"??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z" # -- Begin function ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z": # @"??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z"
    .seh_proc "??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?allocate@?$allocator@D@std@@QEAAPEAD_K@Z"   ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@D@std@@QEAAPEAD_K@Z"
.globl	"?allocate@?$allocator@D@std@@QEAAPEAD_K@Z" # -- Begin function ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@D@std@@QEAAPEAD_K@Z": # @"?allocate@?$allocator@D@std@@QEAAPEAD_K@Z"
    .seh_proc "?allocate@?$allocator@D@std@@QEAAPEAD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$00@std@@YA_K_K@Z"         ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$00@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$00@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$00@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$00@std@@YA_K_K@Z":  # @"??$_Get_size_of_n@$00@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$00@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rsp + 7], 0
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    shl	rax, 0
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
.globl	"??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ": # @"??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
.globl	"??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" # -- Begin function ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ": # @"??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
    .seh_proc "??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ"
.globl	"?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ" # -- Begin function ?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ
    .p2align	4, 0x90
    "?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ": # @"?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ"
    .seh_proc "?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB517_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    mov	dword ptr [rsp + 60], eax                      ; Move 32-bit value
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB517_2                                      ; Jump instruction
    jmp	.LBB517_3                                      ; Jump instruction
    .LBB517_2:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    jmp	.LBB517_4                                      ; Jump instruction
    .LBB517_3:
    mov	ecx, dword ptr [rsp + 60]                      ; Move 32-bit value
    call	"?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z" ; Function call
    mov	cl, al
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 9], cl
    .LBB517_4:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 8], 1
    mov	al, byte ptr [rax + 9]
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ"
.globl	"?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ" # -- Begin function ?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ": # @"?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ"
    .seh_proc "?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB518_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ" ; Function call
    mov	dword ptr [rsp + 36], eax       # 4-byte Spill ; Move 32-bit value
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rsp + 36]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB518_2                                      ; Jump instruction
    jmp	.LBB518_3                                      ; Jump instruction
    .LBB518_2:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	byte ptr [rax + 8], 1
    jmp	.LBB518_4                                      ; Jump instruction
    .LBB518_3:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax + 8], 0
    .LBB518_4:
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z"
.globl	"??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z" # -- Begin function ??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z
    .p2align	4, 0x90
    "??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z": # @"??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z"
    .seh_proc "??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z"
# %bb.0:
    sub	rsp, 152
    .seh_stackalloc 152
    .seh_endprologue
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	byte ptr [rsp + 143], dl
    mov	qword ptr [rsp + 128], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 120], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB519_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB519_2:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    lea	rax, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rsp + 120]                      ; Move 64-bit value
    lea	rcx, [rsp + 103]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rsp + 144], 15                      ; Compare values
    ja	.LBB519_4                                       ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], 15                       ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 143]
    mov	rdx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" ; Function call
    mov	byte ptr [rsp + 102], 0
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    add	rcx, qword ptr [rsp + 144]
    lea	rdx, [rsp + 102]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    lea	rcx, [rsp + 103]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    jmp	.LBB519_5                                      ; Jump instruction
    .LBB519_4:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	r8, rax
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	edx, 15
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    lea	rdx, [rsp + 88]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    lea	rdx, [rsp + 80]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 143]
    mov	byte ptr [rsp + 55], al         # 1-byte Spill
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 55]        # 1-byte Reload
    mov	rcx, rax
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" ; Function call
    mov	byte ptr [rsp + 79], 0
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	rcx, rax
    add	rcx, qword ptr [rsp + 144]
    lea	rdx, [rsp + 79]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    lea	rcx, [rsp + 103]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    .LBB519_5:
    nop
    add	rsp, 152
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z"
.globl	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" # -- Begin function ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z
    .p2align	4, 0x90
    "?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z": # @"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z"
    .seh_proc "?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r8b
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    movsx	eax, byte ptr [rsp + 71]
    mov	dl, al
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    call	memset                                        ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z"
.globl	"??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z" # -- Begin function ??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z
    .p2align	4, 0x90
    "??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z": # @"??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z"
    .seh_proc "??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB521_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB521_3                                      ; Jump instruction
    .LBB521_2:
    lea	rcx, [rsp + 56]
    call	"??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	al, byte ptr [rax]
    mov	byte ptr [rsp + 39], al         # 1-byte Spill
    lea	rcx, [rsp + 64]
    call	"??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z" ; Function call
    mov	r8b, byte ptr [rsp + 39]        # 1-byte Reload
    mov	rdx, rax
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB521_3:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z"
.globl	"??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z" # -- Begin function ??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z
    .p2align	4, 0x90
    "??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z": # @"??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z"
    .seh_proc "??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rsp + 7], -128
    mov	byte ptr [rsp + 6], 127
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsx	edx, byte ptr [rax]
    xor	eax, eax
# kill: def $al killed $al killed $eax
    mov	ecx, 4294967168
    cmp	ecx, edx                                       ; Compare values
    mov	byte ptr [rsp + 5], al          # 1-byte Spill
    jg	.LBB522_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 127                                       ; Compare values
    setle	al
    mov	byte ptr [rsp + 5], al          # 1-byte Spill
    .LBB522_2:
    mov	al, byte ptr [rsp + 5]          # 1-byte Reload
    and	al, 1
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z"
.globl	"??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z" # -- Begin function ??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z
    .p2align	4, 0x90
    "??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z": # @"??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z"
    .seh_proc "??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z"
.globl	"??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z" # -- Begin function ??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z
    .p2align	4, 0x90
    "??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z": # @"??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z"
    .seh_proc "??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], r8b
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 55]
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	__std_find_trivial_1                          ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ"
.globl	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" # -- Begin function ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
    .p2align	4, 0x90
    "?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ": # @"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ"
    .seh_proc "?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    call	"?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB525_1                                      ; Jump instruction
    jmp	.LBB525_2                                      ; Jump instruction
    .LBB525_1:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    .LBB525_2:
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ"
.globl	"?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ" # -- Begin function ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
    .p2align	4, 0x90
    "?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ": # @"?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ"
    .seh_proc "?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    cmp	qword ptr [rax + 24], 15                       ; Compare values
    seta	al
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z" ; Push to stack
.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z
    .p2align	4, 0x90
    "??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z" ; Push to stack
    .seh_proc "??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z" ; Push to stack
# %bb.0:
    sub	rsp, 152
    .seh_stackalloc 152
    .seh_endprologue
    mov	byte ptr [rsp + 151], r8b
    mov	byte ptr [rsp + 150], r9b
    mov	qword ptr [rsp + 136], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 128], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 120], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    sub	rax, qword ptr [rsp + 112]
    cmp	rax, qword ptr [rsp + 136]                     ; Compare values
    jae	.LBB527_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB527_2:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rax, qword ptr [rsp + 136]
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 24]                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    lea	rdx, [rsp + 88]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 96], 15                       ; Compare values
    jbe	.LBB527_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 150]
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	r8, qword ptr [rsp + 32]        # 8-byte Reload ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 47]        # 1-byte Reload
    mov	rdx, rax
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" ; Push to stack
    mov	r8, qword ptr [rsp + 96]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB527_5                                      ; Jump instruction
    .LBB527_4:
    mov	r9b, byte ptr [rsp + 150]
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" ; Push to stack
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    lea	rdx, [rsp + 72]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    .LBB527_5:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 152
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z"
.globl	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z" # -- Begin function ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
    .p2align	4, 0x90
    "?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z": # @"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z"
    .seh_proc "?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	r8, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" ; Push to stack
.globl	"??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" # -- Begin function ??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z
    .p2align	4, 0x90
    "??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z": # @"??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" ; Push to stack
    .seh_proc "??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" ; Push to stack
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r9b
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 56]
    lea	rdx, [rsp + 71]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    mov	byte ptr [rsp + 39], 0
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, 1
    add	rcx, rax
    lea	rdx, [rsp + 39]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z"
.globl	"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z" # -- Begin function ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z
    .p2align	4, 0x90
    "?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z": # @"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z"
    .seh_proc "?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    add	r8, 1
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z"
.globl	"?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z" # -- Begin function ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z": # @"?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z"
    .seh_proc "?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rdx, 0
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ"
.globl	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ" # -- Begin function ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ": # @"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ"
    .seh_proc "?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    call	"?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB532_1                                      ; Jump instruction
    jmp	.LBB532_2                                      ; Jump instruction
    .LBB532_1:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    .LBB532_2:
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
.globl	"?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ" # -- Begin function ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ": # @"?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
    .seh_proc "?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB533_1                                      ; Jump instruction
    jmp	.LBB533_2                                      ; Jump instruction
    .LBB533_1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rax + 24]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ" ; Function call
    .LBB533_2:
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 24], 15                       ; Move 64-bit value
    mov	byte ptr [rsp + 47], 0
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    lea	rdx, [rsp + 47]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
.globl	"?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ" # -- Begin function ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ": # @"?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
    .seh_proc "?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z"
.globl	"??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z" # -- Begin function ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
    .p2align	4, 0x90
    "??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z": # @"??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z"
    .seh_proc "??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z"
.globl	"?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z" # -- Begin function ?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z
    .p2align	4, 0x90
    "?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z": # @"?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z"
    .seh_proc "?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    test	byte ptr [rax + 8], 1                         ; Test values
    jne	.LBB536_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    call	"?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ" ; Function call
    .LBB536_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    test	byte ptr [rax + 8], 1                         ; Test values
    jne	.LBB536_4                                      ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ" ; Function call
    .LBB536_4:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB536_6                                      ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	al, 1
    cmp	qword ptr [rcx], 0                             ; Compare values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    je	.LBB536_9                                       ; Jump instruction
    .LBB536_6:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	qword ptr [rcx], 0                             ; Compare values
    mov	byte ptr [rsp + 46], al         # 1-byte Spill
    je	.LBB536_8                                       ; Jump instruction
# %bb.7:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    setne	al
    mov	byte ptr [rsp + 46], al         # 1-byte Spill
    .LBB536_8:
    mov	al, byte ptr [rsp + 46]         # 1-byte Reload
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    .LBB536_9:
    mov	al, byte ptr [rsp + 47]         # 1-byte Reload
    and	al, 1
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
.globl	"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z" # -- Begin function ??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z
    .p2align	4, 0x90
    "??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z": # @"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .Lfunc_begin52:
    .seh_proc "??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 688
    .seh_stackalloc 688
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 552], -2                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 608]                     ; Move 64-bit value
    mov	qword ptr [rbp + 536], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 528], r8                      ; Move 64-bit value
    mov	dword ptr [rbp + 524], edx                     ; Move 32-bit value
    mov	qword ptr [rbp + 512], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 512]                     ; Move 64-bit value
    mov	qword ptr [rbp + 504], rax                     ; Move 64-bit value
    mov	qword ptr [rbp + 496], 10                      ; Move 64-bit value
    mov	qword ptr [rbp + 488], 22                      ; Move 64-bit value
    mov	qword ptr [rbp + 480], 22                      ; Move 64-bit value
    mov	qword ptr [rbp + 472], 23                      ; Move 64-bit value
    mov	qword ptr [rbp + 464], 24                      ; Move 64-bit value
    mov	qword ptr [rbp + 456], 25                      ; Move 64-bit value
    mov	qword ptr [rbp + 448], 26                      ; Move 64-bit value
    mov	qword ptr [rbp + 440], 27                      ; Move 64-bit value
    mov	qword ptr [rbp + 432], 14                      ; Move 64-bit value
    mov	qword ptr [rbp + 424], 20                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 608]                     ; Move 64-bit value
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    mov	qword ptr [rbp + 376], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 376]                     ; Move 64-bit value
    mov	qword ptr [rbp + 80], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rip + "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"]
    call	"??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z" ; Function call
    mov	qword ptr [rbp + 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rip + "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"]
    call	"??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z" ; Function call
    mov	rcx, qword ptr [rbp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 88]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    lea	r9, [rbp + 384]
    call	"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"   ; Function call
    mov	al, byte ptr [rbp + 407]
    mov	byte ptr [rbp + 375], al
    mov	al, byte ptr [rbp + 406]
    mov	byte ptr [rbp + 374], al
    mov	al, byte ptr [rbp + 384]
    mov	byte ptr [rbp + 373], al
    mov	rcx, qword ptr [rbp + 608]                     ; Move 64-bit value
    call	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" ; Function call
    mov	qword ptr [rbp + 360], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 360]                     ; Move 64-bit value
    lea	rdx, [rbp + 328]
    call	"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    lea	rcx, [rbp + 328]
    call	"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB537_1                                      ; Jump instruction
    jmp	.LBB537_2                                      ; Jump instruction
    .LBB537_1:
    xor	eax, eax
# kill: def $al killed $al killed $eax
    mov	byte ptr [rbp + 79], al         # 1-byte Spill
    jmp	.LBB537_4                                      ; Jump instruction
    .LBB537_2:
    mov	rcx, qword ptr [rbp + 360]                     ; Move 64-bit value
    .Ltmp360:
    call	"?thousands_sep@?$numpunct@D@std@@QEBADXZ"    ; Function call
    .Ltmp361:
    mov	byte ptr [rbp + 78], al         # 1-byte Spill
    jmp	.LBB537_3                                      ; Jump instruction
    .LBB537_3:
    mov	al, byte ptr [rbp + 78]         # 1-byte Reload
    mov	byte ptr [rbp + 79], al         # 1-byte Spill
    jmp	.LBB537_4                                      ; Jump instruction
    .LBB537_4:
    mov	al, byte ptr [rbp + 79]         # 1-byte Reload
    mov	byte ptr [rbp + 327], al
    mov	byte ptr [rbp + 326], 0
    lea	rcx, [rbp + 328]
    call	"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB537_14                                     ; Jump instruction
# %bb.5:
    jmp	.LBB537_6                                      ; Jump instruction
    .LBB537_6:                              # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp362:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp363:
    mov	byte ptr [rbp + 77], al         # 1-byte Spill
    jmp	.LBB537_7                                      ; Jump instruction
    .LBB537_7:                              #   in Loop: Header=BB537_6 Depth=1
    mov	cl, byte ptr [rbp + 77]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp + 76], al         # 1-byte Spill
    jne	.LBB537_8                                      ; Jump instruction
    jmp	.LBB537_10                                     ; Jump instruction
    .LBB537_8:                              #   in Loop: Header=BB537_6 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp364:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp365:
    mov	byte ptr [rbp + 75], al         # 1-byte Spill
    jmp	.LBB537_9                                      ; Jump instruction
    .LBB537_9:                              #   in Loop: Header=BB537_6 Depth=1
    mov	al, byte ptr [rbp + 75]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 327]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp + 76], al         # 1-byte Spill
    .LBB537_10:                             #   in Loop: Header=BB537_6 Depth=1
    mov	al, byte ptr [rbp + 76]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_11                                     ; Jump instruction
    jmp	.LBB537_13                                     ; Jump instruction
    .LBB537_11:                             #   in Loop: Header=BB537_6 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp366:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp367:
    jmp	.LBB537_12                                     ; Jump instruction
    .LBB537_12:                             #   in Loop: Header=BB537_6 Depth=1
    mov	byte ptr [rbp + 326], 1
    jmp	.LBB537_6                                      ; Jump instruction
    .LBB537_13:
    jmp	.LBB537_14                                     ; Jump instruction
    .LBB537_14:
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp368:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp369:
    mov	byte ptr [rbp + 74], al         # 1-byte Spill
    jmp	.LBB537_15                                     ; Jump instruction
    .LBB537_15:
    mov	al, byte ptr [rbp + 74]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_16                                     ; Jump instruction
    jmp	.LBB537_26                                     ; Jump instruction
    .LBB537_16:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp370:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp371:
    mov	byte ptr [rbp + 73], al         # 1-byte Spill
    jmp	.LBB537_17                                     ; Jump instruction
    .LBB537_17:
    mov	al, byte ptr [rbp + 73]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 375]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_20                                     ; Jump instruction
# %bb.18:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, rax
    inc	rcx
    mov	qword ptr [rbp + 504], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 43
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp376:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp377:
    jmp	.LBB537_19                                     ; Jump instruction
    .LBB537_19:
    jmp	.LBB537_25                                     ; Jump instruction
    .LBB537_20:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp372:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp373:
    mov	byte ptr [rbp + 72], al         # 1-byte Spill
    jmp	.LBB537_21                                     ; Jump instruction
    .LBB537_21:
    mov	al, byte ptr [rbp + 72]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 374]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_24                                     ; Jump instruction
# %bb.22:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, rax
    inc	rcx
    mov	qword ptr [rbp + 504], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 45
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp374:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp375:
    jmp	.LBB537_23                                     ; Jump instruction
    .LBB537_23:
    jmp	.LBB537_24                                     ; Jump instruction
    .LBB537_24:
    jmp	.LBB537_25                                     ; Jump instruction
    .LBB537_25:
    jmp	.LBB537_26                                     ; Jump instruction
    .LBB537_26:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, rax
    inc	rcx
    mov	qword ptr [rbp + 504], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 48
    mov	byte ptr [rbp + 325], 0
    mov	byte ptr [rbp + 324], 0
    mov	byte ptr [rbp + 323], 0
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp378:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp379:
    mov	byte ptr [rbp + 71], al         # 1-byte Spill
    jmp	.LBB537_27                                     ; Jump instruction
    .LBB537_27:
    mov	al, byte ptr [rbp + 71]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_28                                     ; Jump instruction
    jmp	.LBB537_42                                     ; Jump instruction
    .LBB537_28:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp380:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp381:
    mov	byte ptr [rbp + 70], al         # 1-byte Spill
    jmp	.LBB537_29                                     ; Jump instruction
    .LBB537_29:
    mov	al, byte ptr [rbp + 70]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 373]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_42                                     ; Jump instruction
# %bb.30:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp382:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp383:
    jmp	.LBB537_31                                     ; Jump instruction
    .LBB537_31:
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp384:
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp385:
    mov	byte ptr [rbp + 69], al         # 1-byte Spill
    jmp	.LBB537_32                                     ; Jump instruction
    .LBB537_32:
    mov	al, byte ptr [rbp + 69]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_33                                     ; Jump instruction
    jmp	.LBB537_34                                     ; Jump instruction
    .LBB537_33:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	byte ptr [rbp + 550], 10
    mov	al, byte ptr [rbp + 326]
    and	al, 1
    mov	byte ptr [rbp + 551], al
    mov	dword ptr [rbp + 316], 1                       ; Move 32-bit value
    jmp	.LBB537_261                                    ; Jump instruction
    .LBB537_34:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp386:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp387:
    mov	byte ptr [rbp + 68], al         # 1-byte Spill
    jmp	.LBB537_35                                     ; Jump instruction
    .LBB537_35:
    mov	al, byte ptr [rbp + 68]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 409]
    cmp	eax, ecx                                       ; Compare values
    je	.LBB537_38                                      ; Jump instruction
# %bb.36:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp388:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp389:
    mov	byte ptr [rbp + 67], al         # 1-byte Spill
    jmp	.LBB537_37                                     ; Jump instruction
    .LBB537_37:
    mov	al, byte ptr [rbp + 67]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 408]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_40                                     ; Jump instruction
    .LBB537_38:
    mov	byte ptr [rbp + 325], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp390:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp391:
    jmp	.LBB537_39                                     ; Jump instruction
    .LBB537_39:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rbp + 504], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 120
    jmp	.LBB537_41                                     ; Jump instruction
    .LBB537_40:
    mov	byte ptr [rbp + 324], 1
    mov	al, byte ptr [rbp + 323]
    add	al, 1
    mov	byte ptr [rbp + 323], al
    .LBB537_41:
    jmp	.LBB537_42                                     ; Jump instruction
    .LBB537_42:
    mov	byte ptr [rbp + 315], 0
    mov	dword ptr [rbp + 308], 0                       ; Move 32-bit value
    mov	qword ptr [rbp + 296], 0                       ; Move 64-bit value
    mov	dl, byte ptr [rbp + 325]
    mov	eax, 10
    mov	ecx, 22
    test	dl, 1                                         ; Test values
    cmovne	rax, rcx
    mov	qword ptr [rbp + 288], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 328]
    call	"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB537_43                                     ; Jump instruction
    jmp	.LBB537_61                                     ; Jump instruction
    .LBB537_43:
    jmp	.LBB537_44                                     ; Jump instruction
    .LBB537_44:                             # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp418:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp419:
    mov	byte ptr [rbp + 66], al         # 1-byte Spill
    jmp	.LBB537_45                                     ; Jump instruction
    .LBB537_45:                             #   in Loop: Header=BB537_44 Depth=1
    mov	cl, byte ptr [rbp + 66]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp + 65], al         # 1-byte Spill
    jne	.LBB537_46                                     ; Jump instruction
    jmp	.LBB537_49                                     ; Jump instruction
    .LBB537_46:                             #   in Loop: Header=BB537_44 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp420:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp421:
    mov	byte ptr [rbp + 64], al         # 1-byte Spill
    jmp	.LBB537_47                                     ; Jump instruction
    .LBB537_47:                             #   in Loop: Header=BB537_44 Depth=1
    .Ltmp422:
    mov	dl, byte ptr [rbp + 64]         # 1-byte Reload
    lea	rcx, [rbp + 384]
    call	"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z" ; Function call
    .Ltmp423:
    mov	qword ptr [rbp + 56], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_48                                     ; Jump instruction
    .LBB537_48:                             #   in Loop: Header=BB537_44 Depth=1
    mov	rax, qword ptr [rbp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 280], rax                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 288]                     ; Compare values
    setb	al
    mov	byte ptr [rbp + 65], al         # 1-byte Spill
    .LBB537_49:                             #   in Loop: Header=BB537_44 Depth=1
    mov	al, byte ptr [rbp + 65]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_50                                     ; Jump instruction
    jmp	.LBB537_60                                     ; Jump instruction
    .LBB537_50:                             #   in Loop: Header=BB537_44 Depth=1
    mov	eax, dword ptr [rbp + 308]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 524]                     ; Compare values
    jl	.LBB537_54                                      ; Jump instruction
# %bb.51:                               #   in Loop: Header=BB537_44 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    cmp	qword ptr [rbp + 280], 0                       ; Compare values
    jbe	.LBB537_53                                     ; Jump instruction
# %bb.52:                               #   in Loop: Header=BB537_44 Depth=1
    mov	byte ptr [rbp + 315], 1
    .LBB537_53:                             #   in Loop: Header=BB537_44 Depth=1
    jmp	.LBB537_58                                     ; Jump instruction
    .LBB537_54:                             #   in Loop: Header=BB537_44 Depth=1
    cmp	qword ptr [rbp + 280], 0                       ; Compare values
    jne	.LBB537_56                                     ; Jump instruction
# %bb.55:                               #   in Loop: Header=BB537_44 Depth=1
    cmp	dword ptr [rbp + 308], 0                       ; Compare values
    je	.LBB537_57                                      ; Jump instruction
    .LBB537_56:                             #   in Loop: Header=BB537_44 Depth=1
    mov	rcx, qword ptr [rbp + 280]                     ; Move 64-bit value
    lea	rax, [rip + "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"]
    mov	cl, byte ptr [rax + rcx]
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rbp + 504], rdx                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	eax, dword ptr [rbp + 308]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 308], eax                     ; Move 32-bit value
    .LBB537_57:                             #   in Loop: Header=BB537_44 Depth=1
    jmp	.LBB537_58                                     ; Jump instruction
    .LBB537_58:                             #   in Loop: Header=BB537_44 Depth=1
    mov	byte ptr [rbp + 324], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp482:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp483:
    jmp	.LBB537_59                                     ; Jump instruction
    .LBB537_59:                             #   in Loop: Header=BB537_44 Depth=1
    jmp	.LBB537_44                                     ; Jump instruction
    .LBB537_60:
    jmp	.LBB537_126                                    ; Jump instruction
    .LBB537_61:
    jmp	.LBB537_62                                     ; Jump instruction
    .LBB537_62:                             # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp392:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp393:
    mov	byte ptr [rbp + 55], al         # 1-byte Spill
    jmp	.LBB537_63                                     ; Jump instruction
    .LBB537_63:                             #   in Loop: Header=BB537_62 Depth=1
    mov	cl, byte ptr [rbp + 55]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp + 54], al         # 1-byte Spill
    jne	.LBB537_64                                     ; Jump instruction
    jmp	.LBB537_66                                     ; Jump instruction
    .LBB537_64:                             #   in Loop: Header=BB537_62 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp394:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp395:
    mov	byte ptr [rbp + 53], al         # 1-byte Spill
    jmp	.LBB537_65                                     ; Jump instruction
    .LBB537_65:                             #   in Loop: Header=BB537_62 Depth=1
    mov	al, byte ptr [rbp + 53]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 327]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp + 54], al         # 1-byte Spill
    .LBB537_66:                             #   in Loop: Header=BB537_62 Depth=1
    mov	al, byte ptr [rbp + 54]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_67                                     ; Jump instruction
    jmp	.LBB537_69                                     ; Jump instruction
    .LBB537_67:                             #   in Loop: Header=BB537_62 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp416:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp417:
    jmp	.LBB537_68                                     ; Jump instruction
    .LBB537_68:                             #   in Loop: Header=BB537_62 Depth=1
    mov	byte ptr [rbp + 326], 1
    jmp	.LBB537_62                                     ; Jump instruction
    .LBB537_69:
    mov	r8b, byte ptr [rbp + 323]
    .Ltmp396:
    lea	rcx, [rbp + 248]
    mov	edx, 1
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" ; Function call
    .Ltmp397:
    jmp	.LBB537_70                                     ; Jump instruction
    .LBB537_70:
    mov	qword ptr [rbp + 240], 0                       ; Move 64-bit value
    .LBB537_71:                             # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp398:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp399:
    mov	byte ptr [rbp + 52], al         # 1-byte Spill
    jmp	.LBB537_72                                     ; Jump instruction
    .LBB537_72:                             #   in Loop: Header=BB537_71 Depth=1
    mov	al, byte ptr [rbp + 52]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_73                                     ; Jump instruction
    jmp	.LBB537_97                                     ; Jump instruction
    .LBB537_73:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp400:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp401:
    mov	byte ptr [rbp + 51], al         # 1-byte Spill
    jmp	.LBB537_74                                     ; Jump instruction
    .LBB537_74:                             #   in Loop: Header=BB537_71 Depth=1
    .Ltmp402:
    mov	dl, byte ptr [rbp + 51]         # 1-byte Reload
    lea	rcx, [rbp + 384]
    call	"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z" ; Function call
    .Ltmp403:
    mov	qword ptr [rbp + 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_75                                     ; Jump instruction
    .LBB537_75:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 232], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 232]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 288]                     ; Compare values
    jae	.LBB537_87                                     ; Jump instruction
# %bb.76:                               #   in Loop: Header=BB537_71 Depth=1
    mov	byte ptr [rbp + 324], 1
    mov	eax, dword ptr [rbp + 308]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 524]                     ; Compare values
    jl	.LBB537_80                                      ; Jump instruction
# %bb.77:                               #   in Loop: Header=BB537_71 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    cmp	qword ptr [rbp + 232], 0                       ; Compare values
    jbe	.LBB537_79                                     ; Jump instruction
# %bb.78:                               #   in Loop: Header=BB537_71 Depth=1
    mov	byte ptr [rbp + 315], 1
    .LBB537_79:                             #   in Loop: Header=BB537_71 Depth=1
    jmp	.LBB537_84                                     ; Jump instruction
    .LBB537_80:                             #   in Loop: Header=BB537_71 Depth=1
    cmp	qword ptr [rbp + 232], 0                       ; Compare values
    jne	.LBB537_82                                     ; Jump instruction
# %bb.81:                               #   in Loop: Header=BB537_71 Depth=1
    cmp	dword ptr [rbp + 308], 0                       ; Compare values
    je	.LBB537_83                                      ; Jump instruction
    .LBB537_82:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rcx, qword ptr [rbp + 232]                     ; Move 64-bit value
    lea	rax, [rip + "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"]
    mov	cl, byte ptr [rax + rcx]
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rbp + 504], rdx                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	eax, dword ptr [rbp + 308]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 308], eax                     ; Move 32-bit value
    .LBB537_83:                             #   in Loop: Header=BB537_71 Depth=1
    jmp	.LBB537_84                                     ; Jump instruction
    .LBB537_84:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rdx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rcx, [rbp + 248]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 127                                       ; Compare values
    je	.LBB537_86                                      ; Jump instruction
# %bb.85:                               #   in Loop: Header=BB537_71 Depth=1
    mov	rdx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rcx, [rbp + 248]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	cl, byte ptr [rax]
    add	cl, 1
    mov	byte ptr [rax], cl
    .LBB537_86:                             #   in Loop: Header=BB537_71 Depth=1
    jmp	.LBB537_95                                     ; Jump instruction
    .LBB537_87:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp404:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp405:
    mov	byte ptr [rbp + 39], al         # 1-byte Spill
    jmp	.LBB537_88                                     ; Jump instruction
    .LBB537_88:                             #   in Loop: Header=BB537_71 Depth=1
    mov	al, byte ptr [rbp + 39]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 327]
    cmp	eax, ecx                                       ; Compare values
    je	.LBB537_90                                      ; Jump instruction
# %bb.89:
    jmp	.LBB537_97                                     ; Jump instruction
    .LBB537_90:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rdx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rcx, [rbp + 248]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB537_92                                     ; Jump instruction
# %bb.91:                               #   in Loop: Header=BB537_71 Depth=1
    mov	byte ptr [rbp + 326], 1
    jmp	.LBB537_94                                     ; Jump instruction
    .LBB537_92:                             #   in Loop: Header=BB537_71 Depth=1
    .Ltmp406:
    xor	eax, eax
    mov	dl, al
    lea	rcx, [rbp + 248]
    call	"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
    .Ltmp407:
    jmp	.LBB537_93                                     ; Jump instruction
    .LBB537_93:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rax, qword ptr [rbp + 240]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 240], rax                     ; Move 64-bit value
    .LBB537_94:                             #   in Loop: Header=BB537_71 Depth=1
    jmp	.LBB537_95                                     ; Jump instruction
    .LBB537_95:                             #   in Loop: Header=BB537_71 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp414:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp415:
    jmp	.LBB537_96                                     ; Jump instruction
    .LBB537_96:                             #   in Loop: Header=BB537_71 Depth=1
    jmp	.LBB537_71                                     ; Jump instruction
    .LBB537_97:
    cmp	qword ptr [rbp + 240], 0                       ; Compare values
    je	.LBB537_102                                     ; Jump instruction
# %bb.98:
    mov	rdx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rcx, [rbp + 248]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 0                                         ; Compare values
    jle	.LBB537_100                                    ; Jump instruction
# %bb.99:
    mov	rax, qword ptr [rbp + 240]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 240], rax                     ; Move 64-bit value
    jmp	.LBB537_101                                    ; Jump instruction
    .LBB537_100:
    mov	byte ptr [rbp + 326], 1
    .LBB537_101:
    jmp	.LBB537_102                                    ; Jump instruction
    .LBB537_102:
    jmp	.LBB537_103                                    ; Jump instruction
    .LBB537_103:                            # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp408:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp409:
    mov	byte ptr [rbp + 38], al         # 1-byte Spill
    jmp	.LBB537_104                                    ; Jump instruction
    .LBB537_104:                            #   in Loop: Header=BB537_103 Depth=1
    mov	cl, byte ptr [rbp + 38]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp + 37], al         # 1-byte Spill
    jne	.LBB537_105                                    ; Jump instruction
    jmp	.LBB537_107                                    ; Jump instruction
    .LBB537_105:                            #   in Loop: Header=BB537_103 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp410:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp411:
    mov	byte ptr [rbp + 36], al         # 1-byte Spill
    jmp	.LBB537_106                                    ; Jump instruction
    .LBB537_106:                            #   in Loop: Header=BB537_103 Depth=1
    mov	al, byte ptr [rbp + 36]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 327]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp + 37], al         # 1-byte Spill
    .LBB537_107:                            #   in Loop: Header=BB537_103 Depth=1
    mov	al, byte ptr [rbp + 37]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_108                                    ; Jump instruction
    jmp	.LBB537_110                                    ; Jump instruction
    .LBB537_108:                            #   in Loop: Header=BB537_103 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp412:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp413:
    jmp	.LBB537_109                                    ; Jump instruction
    .LBB537_109:                            #   in Loop: Header=BB537_103 Depth=1
    mov	byte ptr [rbp + 326], 1
    jmp	.LBB537_103                                    ; Jump instruction
    .LBB537_110:
    lea	rcx, [rbp + 328]
    call	"?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	qword ptr [rbp + 224], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 224]                     ; Move 64-bit value
    mov	qword ptr [rbp + 24], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 328]
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    add	rax, rcx
    mov	qword ptr [rbp + 216], rax                     ; Move 64-bit value
    mov	byte ptr [rbp + 215], 0
    .LBB537_111:                            # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	byte ptr [rbp + 326], 1                       ; Test values
    mov	byte ptr [rbp + 23], al         # 1-byte Spill
    jne	.LBB537_113                                    ; Jump instruction
# %bb.112:                              #   in Loop: Header=BB537_111 Depth=1
    cmp	qword ptr [rbp + 240], 0                       ; Compare values
    seta	al
    mov	byte ptr [rbp + 23], al         # 1-byte Spill
    .LBB537_113:                            #   in Loop: Header=BB537_111 Depth=1
    mov	al, byte ptr [rbp + 23]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_114                                    ; Jump instruction
    jmp	.LBB537_124                                    ; Jump instruction
    .LBB537_114:                            #   in Loop: Header=BB537_111 Depth=1
    mov	rax, qword ptr [rbp + 224]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 216]                     ; Compare values
    je	.LBB537_116                                     ; Jump instruction
# %bb.115:                              #   in Loop: Header=BB537_111 Depth=1
    mov	rax, qword ptr [rbp + 224]                     ; Move 64-bit value
    mov	al, byte ptr [rax]
    mov	byte ptr [rbp + 215], al
    mov	rax, qword ptr [rbp + 224]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 224], rax                     ; Move 64-bit value
    .LBB537_116:                            #   in Loop: Header=BB537_111 Depth=1
    mov	rax, qword ptr [rbp + 240]                     ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp + 240], rax                     ; Move 64-bit value
    movsx	eax, byte ptr [rbp + 215]
    cmp	eax, 0                                         ; Compare values
    jle	.LBB537_123                                    ; Jump instruction
# %bb.117:                              #   in Loop: Header=BB537_111 Depth=1
    movsx	eax, byte ptr [rbp + 215]
    cmp	eax, 127                                       ; Compare values
    je	.LBB537_123                                     ; Jump instruction
# %bb.118:                              #   in Loop: Header=BB537_111 Depth=1
    cmp	qword ptr [rbp + 240], 0                       ; Compare values
    jbe	.LBB537_120                                    ; Jump instruction
# %bb.119:                              #   in Loop: Header=BB537_111 Depth=1
    mov	rdx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rcx, [rbp + 248]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    movsx	ecx, byte ptr [rbp + 215]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_122                                    ; Jump instruction
    .LBB537_120:                            #   in Loop: Header=BB537_111 Depth=1
    cmp	qword ptr [rbp + 240], 0                       ; Compare values
    jne	.LBB537_123                                    ; Jump instruction
# %bb.121:                              #   in Loop: Header=BB537_111 Depth=1
    mov	rdx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rcx, [rbp + 248]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    movsx	ecx, byte ptr [rbp + 215]
    cmp	eax, ecx                                       ; Compare values
    jle	.LBB537_123                                    ; Jump instruction
    .LBB537_122:                            #   in Loop: Header=BB537_111 Depth=1
    mov	byte ptr [rbp + 326], 1
    .LBB537_123:                            #   in Loop: Header=BB537_111 Depth=1
    jmp	.LBB537_111                                    ; Jump instruction
    .LBB537_124:
    lea	rcx, [rbp + 248]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB537_126                                    ; Jump instruction
    .LBB537_126:
    test	byte ptr [rbp + 325], 1                       ; Test values
    je	.LBB537_130                                     ; Jump instruction
# %bb.127:
    test	byte ptr [rbp + 324], 1                       ; Test values
    je	.LBB537_130                                     ; Jump instruction
# %bb.128:
    cmp	dword ptr [rbp + 308], 0                       ; Compare values
    jne	.LBB537_130                                    ; Jump instruction
# %bb.129:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rbp + 504], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 48
    .LBB537_130:
    .Ltmp424:
    call	localeconv                                    ; Function call
    .Ltmp425:
    mov	qword ptr [rbp + 8], rax        # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_131                                    ; Jump instruction
    .LBB537_131:
    mov	rax, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	al, byte ptr [rax]
    mov	byte ptr [rbp + 214], al
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp426:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp427:
    mov	byte ptr [rbp + 7], al          # 1-byte Spill
    jmp	.LBB537_132                                    ; Jump instruction
    .LBB537_132:
    mov	al, byte ptr [rbp + 7]          # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_133                                    ; Jump instruction
    jmp	.LBB537_138                                    ; Jump instruction
    .LBB537_133:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp428:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp429:
    mov	byte ptr [rbp + 6], al          # 1-byte Spill
    jmp	.LBB537_134                                    ; Jump instruction
    .LBB537_134:
    mov	al, byte ptr [rbp + 6]          # 1-byte Reload
    movsx	eax, al
    mov	dword ptr [rbp], eax            # 4-byte Spill ; Move 32-bit value
    mov	rcx, qword ptr [rbp + 360]                     ; Move 64-bit value
    .Ltmp430:
    call	"?decimal_point@?$numpunct@D@std@@QEBADXZ"    ; Function call
    .Ltmp431:
    mov	byte ptr [rbp + 5], al          # 1-byte Spill
    jmp	.LBB537_135                                    ; Jump instruction
    .LBB537_135:
    mov	eax, dword ptr [rbp]            # 4-byte Reload ; Move 32-bit value
    mov	cl, byte ptr [rbp + 5]          # 1-byte Reload
    movsx	ecx, cl
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_138                                    ; Jump instruction
# %bb.136:
    mov	cl, byte ptr [rbp + 214]
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rdx, rax
    inc	rdx
    mov	qword ptr [rbp + 504], rdx                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp432:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp433:
    jmp	.LBB537_137                                    ; Jump instruction
    .LBB537_137:
    jmp	.LBB537_138                                    ; Jump instruction
    .LBB537_138:
    cmp	dword ptr [rbp + 308], 0                       ; Compare values
    jne	.LBB537_148                                    ; Jump instruction
# %bb.139:
    jmp	.LBB537_140                                    ; Jump instruction
    .LBB537_140:                            # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp434:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp435:
    mov	byte ptr [rbp - 1], al          # 1-byte Spill
    jmp	.LBB537_141                                    ; Jump instruction
    .LBB537_141:                            #   in Loop: Header=BB537_140 Depth=1
    mov	cl, byte ptr [rbp - 1]          # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 2], al          # 1-byte Spill
    jne	.LBB537_142                                    ; Jump instruction
    jmp	.LBB537_144                                    ; Jump instruction
    .LBB537_142:                            #   in Loop: Header=BB537_140 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp436:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp437:
    mov	byte ptr [rbp - 3], al          # 1-byte Spill
    jmp	.LBB537_143                                    ; Jump instruction
    .LBB537_143:                            #   in Loop: Header=BB537_140 Depth=1
    mov	al, byte ptr [rbp - 3]          # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 373]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp - 2], al          # 1-byte Spill
    .LBB537_144:                            #   in Loop: Header=BB537_140 Depth=1
    mov	al, byte ptr [rbp - 2]          # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_145                                    ; Jump instruction
    jmp	.LBB537_147                                    ; Jump instruction
    .LBB537_145:                            #   in Loop: Header=BB537_140 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    dec	rax
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    mov	byte ptr [rbp + 324], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp480:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp481:
    jmp	.LBB537_146                                    ; Jump instruction
    .LBB537_146:                            #   in Loop: Header=BB537_140 Depth=1
    jmp	.LBB537_140                                    ; Jump instruction
    .LBB537_147:
    jmp	.LBB537_148                                    ; Jump instruction
    .LBB537_148:
    jmp	.LBB537_149                                    ; Jump instruction
    .LBB537_149:                            # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp438:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp439:
    mov	byte ptr [rbp - 4], al          # 1-byte Spill
    jmp	.LBB537_150                                    ; Jump instruction
    .LBB537_150:                            #   in Loop: Header=BB537_149 Depth=1
    mov	cl, byte ptr [rbp - 4]          # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 5], al          # 1-byte Spill
    jne	.LBB537_151                                    ; Jump instruction
    jmp	.LBB537_154                                    ; Jump instruction
    .LBB537_151:                            #   in Loop: Header=BB537_149 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp440:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp441:
    mov	byte ptr [rbp - 6], al          # 1-byte Spill
    jmp	.LBB537_152                                    ; Jump instruction
    .LBB537_152:                            #   in Loop: Header=BB537_149 Depth=1
    .Ltmp442:
    mov	dl, byte ptr [rbp - 6]          # 1-byte Reload
    lea	rcx, [rbp + 384]
    call	"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z" ; Function call
    .Ltmp443:
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_153                                    ; Jump instruction
    .LBB537_153:                            #   in Loop: Header=BB537_149 Depth=1
    mov	rax, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 200], rax                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 288]                     ; Compare values
    setb	al
    mov	byte ptr [rbp - 5], al          # 1-byte Spill
    .LBB537_154:                            #   in Loop: Header=BB537_149 Depth=1
    mov	al, byte ptr [rbp - 5]          # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_155                                    ; Jump instruction
    jmp	.LBB537_162                                    ; Jump instruction
    .LBB537_155:                            #   in Loop: Header=BB537_149 Depth=1
    mov	eax, dword ptr [rbp + 308]                     ; Move 32-bit value
    cmp	eax, dword ptr [rbp + 524]                     ; Compare values
    jge	.LBB537_157                                    ; Jump instruction
# %bb.156:                              #   in Loop: Header=BB537_149 Depth=1
    mov	rcx, qword ptr [rbp + 200]                     ; Move 64-bit value
    lea	rax, [rip + "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"]
    mov	cl, byte ptr [rax + rcx]
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rbp + 504], rdx                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	eax, dword ptr [rbp + 308]                     ; Move 32-bit value
    add	eax, 1
    mov	dword ptr [rbp + 308], eax                     ; Move 32-bit value
    jmp	.LBB537_160                                    ; Jump instruction
    .LBB537_157:                            #   in Loop: Header=BB537_149 Depth=1
    cmp	qword ptr [rbp + 200], 0                       ; Compare values
    jbe	.LBB537_159                                    ; Jump instruction
# %bb.158:                              #   in Loop: Header=BB537_149 Depth=1
    mov	byte ptr [rbp + 315], 1
    .LBB537_159:                            #   in Loop: Header=BB537_149 Depth=1
    jmp	.LBB537_160                                    ; Jump instruction
    .LBB537_160:                            #   in Loop: Header=BB537_149 Depth=1
    mov	byte ptr [rbp + 324], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp478:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp479:
    jmp	.LBB537_161                                    ; Jump instruction
    .LBB537_161:                            #   in Loop: Header=BB537_149 Depth=1
    jmp	.LBB537_149                                    ; Jump instruction
    .LBB537_162:
    test	byte ptr [rbp + 315], 1                       ; Test values
    je	.LBB537_170                                     ; Jump instruction
# %bb.163:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax - 1]
    movsx	ecx, byte ptr [rbp + 214]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_165                                    ; Jump instruction
# %bb.164:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    add	rax, -2
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_166                                    ; Jump instruction
    .LBB537_165:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    .LBB537_166:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 192], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 192]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 48                                        ; Compare values
    je	.LBB537_168                                     ; Jump instruction
# %bb.167:
    mov	rax, qword ptr [rbp + 192]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    mov	dword ptr [rbp - 32], eax       # 4-byte Spill ; Move 32-bit value
    mov	cl, byte ptr [rbp + 325]
    mov	al, 56
    mov	dl, 53
    mov	byte ptr [rbp - 26], dl         # 1-byte Spill
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 25], al         # 1-byte Spill
    jne	.LBB537_264                                    ; Jump instruction
# %bb.263:
    mov	al, byte ptr [rbp - 26]         # 1-byte Reload
    mov	byte ptr [rbp - 25], al         # 1-byte Spill
    .LBB537_264:
    mov	eax, dword ptr [rbp - 32]       # 4-byte Reload ; Move 32-bit value
    mov	cl, byte ptr [rbp - 25]         # 1-byte Reload
    movsx	ecx, cl
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_169                                    ; Jump instruction
    .LBB537_168:
    mov	rax, qword ptr [rbp + 192]                     ; Move 64-bit value
    mov	cl, byte ptr [rax]
    add	cl, 1
    mov	byte ptr [rax], cl
    .LBB537_169:
    jmp	.LBB537_170                                    ; Jump instruction
    .LBB537_170:
    mov	dl, byte ptr [rbp + 325]
    mov	eax, 20
    mov	ecx, 27
    test	dl, 1                                         ; Test values
    cmovne	rax, rcx
    mov	al, byte ptr [rbp + rax + 384]
    mov	byte ptr [rbp + 191], al
    mov	dl, byte ptr [rbp + 325]
    mov	eax, 14
    mov	ecx, 26
    test	dl, 1                                         ; Test values
    cmovne	rax, rcx
    mov	al, byte ptr [rbp + rax + 384]
    mov	byte ptr [rbp + 190], al
    mov	byte ptr [rbp + 189], 0
    mov	qword ptr [rbp + 176], 0                       ; Move 64-bit value
    test	byte ptr [rbp + 324], 1                       ; Test values
    je	.LBB537_215                                     ; Jump instruction
# %bb.171:
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp444:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp445:
    mov	byte ptr [rbp - 33], al         # 1-byte Spill
    jmp	.LBB537_172                                    ; Jump instruction
    .LBB537_172:
    mov	al, byte ptr [rbp - 33]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_173                                    ; Jump instruction
    jmp	.LBB537_215                                    ; Jump instruction
    .LBB537_173:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp446:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp447:
    mov	byte ptr [rbp - 34], al         # 1-byte Spill
    jmp	.LBB537_174                                    ; Jump instruction
    .LBB537_174:
    mov	al, byte ptr [rbp - 34]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 191]
    cmp	eax, ecx                                       ; Compare values
    je	.LBB537_177                                     ; Jump instruction
# %bb.175:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp448:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp449:
    mov	byte ptr [rbp - 35], al         # 1-byte Spill
    jmp	.LBB537_176                                    ; Jump instruction
    .LBB537_176:
    mov	al, byte ptr [rbp - 35]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 190]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_215                                    ; Jump instruction
    .LBB537_177:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp450:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp451:
    jmp	.LBB537_178                                    ; Jump instruction
    .LBB537_178:
    mov	byte ptr [rbp + 324], 0
    mov	dword ptr [rbp + 308], 0                       ; Move 32-bit value
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp452:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp453:
    mov	byte ptr [rbp - 36], al         # 1-byte Spill
    jmp	.LBB537_179                                    ; Jump instruction
    .LBB537_179:
    mov	al, byte ptr [rbp - 36]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_180                                    ; Jump instruction
    jmp	.LBB537_190                                    ; Jump instruction
    .LBB537_180:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp454:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp455:
    mov	byte ptr [rbp - 37], al         # 1-byte Spill
    jmp	.LBB537_181                                    ; Jump instruction
    .LBB537_181:
    mov	al, byte ptr [rbp - 37]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 375]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_184                                    ; Jump instruction
# %bb.182:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp460:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp461:
    jmp	.LBB537_183                                    ; Jump instruction
    .LBB537_183:
    jmp	.LBB537_189                                    ; Jump instruction
    .LBB537_184:
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp456:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp457:
    mov	byte ptr [rbp - 38], al         # 1-byte Spill
    jmp	.LBB537_185                                    ; Jump instruction
    .LBB537_185:
    mov	al, byte ptr [rbp - 38]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 374]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB537_188                                    ; Jump instruction
# %bb.186:
    mov	byte ptr [rbp + 189], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp458:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp459:
    jmp	.LBB537_187                                    ; Jump instruction
    .LBB537_187:
    jmp	.LBB537_188                                    ; Jump instruction
    .LBB537_188:
    jmp	.LBB537_189                                    ; Jump instruction
    .LBB537_189:
    jmp	.LBB537_190                                    ; Jump instruction
    .LBB537_190:
    jmp	.LBB537_191                                    ; Jump instruction
    .LBB537_191:                            # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp462:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp463:
    mov	byte ptr [rbp - 39], al         # 1-byte Spill
    jmp	.LBB537_192                                    ; Jump instruction
    .LBB537_192:                            #   in Loop: Header=BB537_191 Depth=1
    mov	cl, byte ptr [rbp - 39]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 40], al         # 1-byte Spill
    jne	.LBB537_193                                    ; Jump instruction
    jmp	.LBB537_195                                    ; Jump instruction
    .LBB537_193:                            #   in Loop: Header=BB537_191 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp464:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp465:
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    jmp	.LBB537_194                                    ; Jump instruction
    .LBB537_194:                            #   in Loop: Header=BB537_191 Depth=1
    mov	al, byte ptr [rbp - 41]         # 1-byte Reload
    movsx	eax, al
    movsx	ecx, byte ptr [rbp + 373]
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rbp - 40], al         # 1-byte Spill
    .LBB537_195:                            #   in Loop: Header=BB537_191 Depth=1
    mov	al, byte ptr [rbp - 40]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_196                                    ; Jump instruction
    jmp	.LBB537_198                                    ; Jump instruction
    .LBB537_196:                            #   in Loop: Header=BB537_191 Depth=1
    mov	byte ptr [rbp + 324], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp476:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp477:
    jmp	.LBB537_197                                    ; Jump instruction
    .LBB537_197:                            #   in Loop: Header=BB537_191 Depth=1
    jmp	.LBB537_191                                    ; Jump instruction
    .LBB537_198:
    jmp	.LBB537_199                                    ; Jump instruction
    .LBB537_199:                            # =>This Inner Loop Header: Depth=1
    mov	rdx, qword ptr [rbp + 536]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp466:
    call	"??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp467:
    mov	byte ptr [rbp - 42], al         # 1-byte Spill
    jmp	.LBB537_200                                    ; Jump instruction
    .LBB537_200:                            #   in Loop: Header=BB537_199 Depth=1
    mov	cl, byte ptr [rbp - 42]         # 1-byte Reload
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 43], al         # 1-byte Spill
    jne	.LBB537_201                                    ; Jump instruction
    jmp	.LBB537_204                                    ; Jump instruction
    .LBB537_201:                            #   in Loop: Header=BB537_199 Depth=1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp468:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp469:
    mov	byte ptr [rbp - 44], al         # 1-byte Spill
    jmp	.LBB537_202                                    ; Jump instruction
    .LBB537_202:                            #   in Loop: Header=BB537_199 Depth=1
    .Ltmp470:
    mov	dl, byte ptr [rbp - 44]         # 1-byte Reload
    lea	rcx, [rbp + 384]
    call	"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z" ; Function call
    .Ltmp471:
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_203                                    ; Jump instruction
    .LBB537_203:                            #   in Loop: Header=BB537_199 Depth=1
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 168], rax                     ; Move 64-bit value
    cmp	rax, 10                                        ; Compare values
    setb	al
    mov	byte ptr [rbp - 43], al         # 1-byte Spill
    .LBB537_204:                            #   in Loop: Header=BB537_199 Depth=1
    mov	al, byte ptr [rbp - 43]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB537_205                                    ; Jump instruction
    jmp	.LBB537_212                                    ; Jump instruction
    .LBB537_205:                            #   in Loop: Header=BB537_199 Depth=1
    movabs	rax, 922337203685477580
    cmp	qword ptr [rbp + 176], rax                     ; Compare values
    jl	.LBB537_208                                     ; Jump instruction
# %bb.206:                              #   in Loop: Header=BB537_199 Depth=1
    movabs	rax, 922337203685477580
    cmp	qword ptr [rbp + 176], rax                     ; Compare values
    jne	.LBB537_209                                    ; Jump instruction
# %bb.207:                              #   in Loop: Header=BB537_199 Depth=1
    cmp	qword ptr [rbp + 168], 7                       ; Compare values
    jg	.LBB537_209                                     ; Jump instruction
    .LBB537_208:                            #   in Loop: Header=BB537_199 Depth=1
    imul	rax, qword ptr [rbp + 176], 10
    add	rax, qword ptr [rbp + 168]
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    jmp	.LBB537_210                                    ; Jump instruction
    .LBB537_209:                            #   in Loop: Header=BB537_199 Depth=1
    movabs	rax, 9223372036854775807
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    .LBB537_210:                            #   in Loop: Header=BB537_199 Depth=1
    mov	byte ptr [rbp + 324], 1
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp474:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp475:
    jmp	.LBB537_211                                    ; Jump instruction
    .LBB537_211:                            #   in Loop: Header=BB537_199 Depth=1
    jmp	.LBB537_199                                    ; Jump instruction
    .LBB537_212:
    test	byte ptr [rbp + 189], 1                       ; Test values
    je	.LBB537_214                                     ; Jump instruction
# %bb.213:
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rbp + 176]
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    .LBB537_214:
    jmp	.LBB537_215                                    ; Jump instruction
    .LBB537_215:
    test	byte ptr [rbp + 324], 1                       ; Test values
    jne	.LBB537_217                                    ; Jump instruction
# %bb.216:
    mov	byte ptr [rbp + 550], 0
    mov	byte ptr [rbp + 551], 0
    mov	dword ptr [rbp + 316], 1                       ; Move 32-bit value
    jmp	.LBB537_261                                    ; Jump instruction
    .LBB537_217:
    mov	dword ptr [rbp + 164], 1100                    ; Move 32-bit value
    mov	dword ptr [rbp + 160], 4200                    ; Move 32-bit value
    mov	dl, byte ptr [rbp + 325]
    mov	eax, 1100
    mov	ecx, 4200
    test	dl, 1                                         ; Test values
    cmovne	eax, ecx
    cdqe
    mov	qword ptr [rbp + 152], rax                     ; Move 64-bit value
    mov	dl, byte ptr [rbp + 325]
    mov	eax, 1100
    mov	ecx, 1050
    test	dl, 1                                         ; Test values
    cmovne	eax, ecx
    cdqe
    mov	qword ptr [rbp + 144], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    mov	qword ptr [rbp + 136], rax                     ; Move 64-bit value
    .LBB537_218:                            # =>This Inner Loop Header: Depth=1
    cmp	qword ptr [rbp + 176], 0                       ; Compare values
    jl	.LBB537_223                                     ; Jump instruction
# %bb.219:                              #   in Loop: Header=BB537_218 Depth=1
    cmp	qword ptr [rbp + 136], 0                       ; Compare values
    jl	.LBB537_223                                     ; Jump instruction
# %bb.220:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 176]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 152]                     ; Compare values
    jge	.LBB537_222                                    ; Jump instruction
# %bb.221:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 144]                     ; Compare values
    jl	.LBB537_223                                     ; Jump instruction
    .LBB537_222:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    jmp	.LBB537_252                                    ; Jump instruction
    .LBB537_223:                            #   in Loop: Header=BB537_218 Depth=1
    cmp	qword ptr [rbp + 176], 0                       ; Compare values
    jg	.LBB537_228                                     ; Jump instruction
# %bb.224:                              #   in Loop: Header=BB537_218 Depth=1
    cmp	qword ptr [rbp + 136], 0                       ; Compare values
    jg	.LBB537_228                                     ; Jump instruction
# %bb.225:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 176]                     ; Move 64-bit value
    xor	ecx, ecx
# kill: def $rcx killed $ecx
    sub	rcx, qword ptr [rbp + 152]
    cmp	rax, rcx                                       ; Compare values
    jle	.LBB537_227                                    ; Jump instruction
# %bb.226:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    xor	ecx, ecx
# kill: def $rcx killed $ecx
    sub	rcx, qword ptr [rbp + 144]
    cmp	rax, rcx                                       ; Compare values
    jg	.LBB537_228                                     ; Jump instruction
    .LBB537_227:
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rbp + 152]
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    jmp	.LBB537_252                                    ; Jump instruction
    .LBB537_228:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?abs@@YA_J_J@Z"                              ; Function call
    cmp	rax, qword ptr [rbp + 152]                     ; Compare values
    jg	.LBB537_239                                     ; Jump instruction
# %bb.229:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rcx, qword ptr [rbp + 136]                     ; Move 64-bit value
    call	"?abs@@YA_J_J@Z"                              ; Function call
    cmp	rax, qword ptr [rbp + 144]                     ; Compare values
    jg	.LBB537_239                                     ; Jump instruction
# %bb.230:
    test	byte ptr [rbp + 325], 1                       ; Test values
    je	.LBB537_232                                     ; Jump instruction
# %bb.231:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    shl	rax, 2
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_233                                    ; Jump instruction
    .LBB537_232:
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    .LBB537_233:
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    add	rax, qword ptr [rbp + 176]
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 176]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 152]                     ; Compare values
    jle	.LBB537_235                                    ; Jump instruction
# %bb.234:
    mov	rax, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    jmp	.LBB537_238                                    ; Jump instruction
    .LBB537_235:
    mov	rax, qword ptr [rbp + 176]                     ; Move 64-bit value
    xor	ecx, ecx
# kill: def $rcx killed $ecx
    sub	rcx, qword ptr [rbp + 152]
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB537_237                                    ; Jump instruction
# %bb.236:
    xor	eax, eax
# kill: def $rax killed $eax
    sub	rax, qword ptr [rbp + 152]
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    .LBB537_237:
    jmp	.LBB537_238                                    ; Jump instruction
    .LBB537_238:
    jmp	.LBB537_252                                    ; Jump instruction
    .LBB537_239:                            #   in Loop: Header=BB537_218 Depth=1
    test	byte ptr [rbp + 325], 1                       ; Test values
    je	.LBB537_241                                     ; Jump instruction
# %bb.240:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?abs@@YA_J_J@Z"                              ; Function call
    sub	rax, 1
    mov	ecx, 4
    cqo
    idiv	rcx
    add	rax, 1
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_242                                    ; Jump instruction
    .LBB537_241:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?abs@@YA_J_J@Z"                              ; Function call
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    .LBB537_242:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 128], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 296]                     ; Move 64-bit value
    call	"?abs@@YA_J_J@Z"                              ; Function call
    mov	qword ptr [rbp + 112], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 128]
    lea	rdx, [rbp + 112]
    call	"??$min@_J@std@@YAAEB_JAEB_J0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp + 120], rax                     ; Move 64-bit value
    cmp	qword ptr [rbp + 176], 0                       ; Compare values
    jl	.LBB537_247                                     ; Jump instruction
# %bb.243:                              #   in Loop: Header=BB537_218 Depth=1
    test	byte ptr [rbp + 325], 1                       ; Test values
    je	.LBB537_245                                     ; Jump instruction
# %bb.244:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    shl	rax, 2
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_246                                    ; Jump instruction
    .LBB537_245:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    .LBB537_246:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 176]                     ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    add	rax, qword ptr [rbp + 136]
    mov	qword ptr [rbp + 136], rax                     ; Move 64-bit value
    jmp	.LBB537_251                                    ; Jump instruction
    .LBB537_247:                            #   in Loop: Header=BB537_218 Depth=1
    test	byte ptr [rbp + 325], 1                       ; Test values
    je	.LBB537_249                                     ; Jump instruction
# %bb.248:                              #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    shl	rax, 2
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB537_250                                    ; Jump instruction
    .LBB537_249:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    .LBB537_250:                            #   in Loop: Header=BB537_218 Depth=1
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    add	rax, qword ptr [rbp + 176]
    mov	qword ptr [rbp + 176], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 136]                     ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rbp + 136], rax                     ; Move 64-bit value
    .LBB537_251:                            #   in Loop: Header=BB537_218 Depth=1
    jmp	.LBB537_218                                    ; Jump instruction
    .LBB537_252:
    cmp	qword ptr [rbp + 176], 0                       ; Compare values
    je	.LBB537_260                                     ; Jump instruction
# %bb.253:
    mov	cl, byte ptr [rbp + 325]
    mov	al, 112
    mov	dl, 101
    mov	byte ptr [rbp - 90], dl         # 1-byte Spill
    test	cl, 1                                         ; Test values
    mov	byte ptr [rbp - 89], al         # 1-byte Spill
    jne	.LBB537_266                                    ; Jump instruction
# %bb.265:
    mov	al, byte ptr [rbp - 90]         # 1-byte Reload
    mov	byte ptr [rbp - 89], al         # 1-byte Spill
    .LBB537_266:
    mov	cl, byte ptr [rbp - 89]         # 1-byte Reload
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rbp + 504], rdx                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    cmp	qword ptr [rbp + 176], 0                       ; Compare values
    jge	.LBB537_255                                    ; Jump instruction
# %bb.254:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rbp + 504], rcx                     ; Move 64-bit value
    mov	byte ptr [rax], 45
    .LBB537_255:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	qword ptr [rbp + 104], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?abs@@YA_J_J@Z"                              ; Function call
    mov	qword ptr [rbp + 96], rax                      ; Move 64-bit value
    .LBB537_256:                            # =>This Inner Loop Header: Depth=1
    cmp	qword ptr [rbp + 96], 0                        ; Compare values
    je	.LBB537_258                                     ; Jump instruction
# %bb.257:                              #   in Loop: Header=BB537_256 Depth=1
    mov	rax, qword ptr [rbp + 96]                      ; Move 64-bit value
    mov	ecx, 10
    cqo
    idiv	rcx
    add	rdx, 48
    mov	cl, dl
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rbp + 504], rdx                     ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	rax, qword ptr [rbp + 96]                      ; Move 64-bit value
    mov	ecx, 10
    cqo
    idiv	rcx
    mov	qword ptr [rbp + 96], rax                      ; Move 64-bit value
    jmp	.LBB537_256                                    ; Jump instruction
    .LBB537_258:
    mov	rdx, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    .Ltmp472:
    call	"??$reverse@PEAD@std@@YAXQEAD0@Z"             ; Function call
    .Ltmp473:
    jmp	.LBB537_259                                    ; Jump instruction
    .LBB537_259:
    jmp	.LBB537_260                                    ; Jump instruction
    .LBB537_260:
    mov	rax, qword ptr [rbp + 504]                     ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	dl, byte ptr [rbp + 325]
    mov	eax, 10
    mov	ecx, 16
    test	dl, 1                                         ; Test values
    cmovne	eax, ecx
# kill: def $al killed $al killed $eax
    mov	byte ptr [rbp + 550], al
    mov	al, byte ptr [rbp + 326]
    and	al, 1
    mov	byte ptr [rbp + 551], al
    mov	dword ptr [rbp + 316], 1                       ; Move 32-bit value
    .LBB537_261:
    lea	rcx, [rbp + 328]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	ax, word ptr [rbp + 550]
    add	rsp, 688
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$125@?0???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z@4HA":
    .seh_proc "?dtor$125@?0???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z@4HA"
    .LBB537_125:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 248]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$262@?0???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z@4HA":
    .seh_proc "?dtor$262@?0???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z@4HA"
    .LBB537_262:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 328]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end52:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z")@IMGREL # IPToStateXData
    .long	680                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z":
    .long	-1                              # ToState
    .long	"?dtor$262@?0???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$125@?0???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z":
    .long	.Lfunc_begin52@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp360@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp398@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp424@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp473@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .section	.text,"xr",discard,"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
.globl	"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z" # -- Begin function ?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z
    .p2align	4, 0x90
    "?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z": # @"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .Lfunc_begin53:
    .seh_proc "?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 112
    .seh_stackalloc 112
    lea	rbp, [rsp + 112]
    .seh_setframe rbp, 112
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    .Ltmp484:
    call	_errno                                        ; Function call
    .Ltmp485:
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB538_1                                      ; Jump instruction
    .LBB538_1:
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rbp - 44], eax                      ; Move 32-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	dword ptr [rax], 0                             ; Move 32-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    .Ltmp486:
    call	strtod                                        ; Function call
    .Ltmp487:
    movsd	qword ptr [rbp - 72], xmm0      # 8-byte Spill ; Load 64-bit double
    jmp	.LBB538_2                                      ; Jump instruction
    .LBB538_2:
    movsd	xmm0, qword ptr [rbp - 72]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    movsd	qword ptr [rbp - 56], xmm0                   ; Load 64-bit double
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	ecx, dword ptr [rbp - 44]                      ; Move 32-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    movsd	xmm0, qword ptr [rbp - 56]      # xmm0 = mem[0],zero ; Load 64-bit double
    add	rsp, 112
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z")@IMGREL
    .section	.text,"xr",discard,"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z@4HA":
    .seh_proc "?dtor$3@?0??_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z@4HA"
    .LBB538_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end53:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z")@IMGREL # IPToStateXData
    .long	104                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z@4HA"@IMGREL # Action
    "$ip2state$?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z":
    .long	.Lfunc_begin53@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp484@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp487@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .section	.text,"xr",discard,"??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
.globl	"??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z" # -- Begin function ??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z
    .p2align	4, 0x90
    "??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z": # @"??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
    .seh_proc "??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rax, 29
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
.globl	"??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z" # -- Begin function ??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z
    .p2align	4, 0x90
    "??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z": # @"??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
    .seh_proc "??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z"
.globl	"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z" # -- Begin function ??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z
    .p2align	4, 0x90
    "??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z": # @"??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z"
    .seh_proc "??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rdx, 28
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    lea	r8, [rsp + 55]
    call	"??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    sub	rax, rcx
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?decimal_point@?$numpunct@D@std@@QEBADXZ"
.globl	"?decimal_point@?$numpunct@D@std@@QEBADXZ" # -- Begin function ?decimal_point@?$numpunct@D@std@@QEBADXZ
    .p2align	4, 0x90
    "?decimal_point@?$numpunct@D@std@@QEBADXZ": # @"?decimal_point@?$numpunct@D@std@@QEBADXZ"
    .seh_proc "?decimal_point@?$numpunct@D@std@@QEBADXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 24]                          ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?abs@@YA_J_J@Z"
.globl	"?abs@@YA_J_J@Z"                # -- Begin function ?abs@@YA_J_J@Z
    .p2align	4, 0x90
    "?abs@@YA_J_J@Z":                       # @"?abs@@YA_J_J@Z"
    .seh_proc "?abs@@YA_J_J@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, rax
    neg	rcx
    cmovns	rax, rcx
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$min@_J@std@@YAAEB_JAEB_J0@Z"
.globl	"??$min@_J@std@@YAAEB_JAEB_J0@Z" # -- Begin function ??$min@_J@std@@YAAEB_JAEB_J0@Z
    .p2align	4, 0x90
    "??$min@_J@std@@YAAEB_JAEB_J0@Z":       # @"??$min@_J@std@@YAAEB_JAEB_J0@Z"
    .seh_proc "??$min@_J@std@@YAAEB_JAEB_J0@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jge	.LBB544_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    jmp	.LBB544_3                                      ; Jump instruction
    .LBB544_2:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    .LBB544_3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$reverse@PEAD@std@@YAXQEAD0@Z"
.globl	"??$reverse@PEAD@std@@YAXQEAD0@Z" # -- Begin function ??$reverse@PEAD@std@@YAXQEAD0@Z
    .p2align	4, 0x90
    "??$reverse@PEAD@std@@YAXQEAD0@Z":      # @"??$reverse@PEAD@std@@YAXQEAD0@Z"
    .seh_proc "??$reverse@PEAD@std@@YAXQEAD0@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 72]
    lea	rdx, [rsp + 80]
    call	"??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z" ; Function call
    lea	rcx, [rsp + 72]
    call	"??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z" ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 80]
    call	"??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	byte ptr [rsp + 55], 1
    mov	qword ptr [rsp + 40], 1                        ; Move 64-bit value
    lea	rcx, [rsp + 56]
    call	"??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z" ; Function call
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 64]
    call	"??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z" ; Function call
    mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z"  ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z"
.globl	"??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z" # -- Begin function ??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z": # @"??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z"
    .seh_proc "??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z"
.globl	"??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z" # -- Begin function ??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z": # @"??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z"
    .seh_proc "??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z"
.globl	"??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z" # -- Begin function ??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z
    .p2align	4, 0x90
    "??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z": # @"??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z"
    .seh_proc "??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	__std_reverse_trivially_swappable_1           ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z"
.globl	"??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z" # -- Begin function ??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z
    .p2align	4, 0x90
    "??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z": # @"??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z"
    .seh_proc "??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
.globl	"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z" # -- Begin function ?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z
    .p2align	4, 0x90
    "?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z": # @"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .Lfunc_begin54:
    .seh_proc "?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    .Ltmp488:
    call	_errno                                        ; Function call
    .Ltmp489:
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB550_1                                      ; Jump instruction
    .LBB550_1:
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rbp - 44], eax                      ; Move 32-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	dword ptr [rax], 0                             ; Move 32-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    .Ltmp490:
    call	strtof                                        ; Function call
    .Ltmp491:
    movss	dword ptr [rbp - 60], xmm0      # 4-byte Spill ; Move 32-bit value
    jmp	.LBB550_2                                      ; Jump instruction
    .LBB550_2:
    movss	xmm0, dword ptr [rbp - 60]      # 4-byte Reload ; Move 32-bit value
# xmm0 = mem[0],zero,zero,zero
    movss	dword ptr [rbp - 48], xmm0                   ; Move 32-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	ecx, dword ptr [rax]                           ; Move 32-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	ecx, dword ptr [rbp - 44]                      ; Move 32-bit value
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    movss	xmm0, dword ptr [rbp - 48]      # xmm0 = mem[0],zero,zero,zero ; Move 32-bit value
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z")@IMGREL
    .section	.text,"xr",discard,"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z@4HA":
    .seh_proc "?dtor$3@?0??_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z@4HA"
    .LBB550_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end54:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z@4HA"@IMGREL # Action
    "$ip2state$?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z":
    .long	.Lfunc_begin54@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp488@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp491@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .section	.text,"xr",discard,"?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 48]                          ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z"
.globl	"??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z" # -- Begin function ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
    .p2align	4, 0x90
    "??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z": # @"??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z"
    .seh_proc "??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 56]                          ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
.globl	"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z" # -- Begin function ??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z
    .p2align	4, 0x90
    "??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z": # @"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .Lfunc_begin55:
    .seh_proc "??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 272
    .seh_stackalloc 272
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 136], -2                      ; Move 64-bit value
    mov	al, byte ptr [rbp + 192]
    and	al, 1
    mov	byte ptr [rbp + 135], al
    mov	qword ptr [rbp + 120], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 112], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 96], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp + 88], 0                        ; Move 64-bit value
    .LBB554_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 88]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    cmp	eax, 0                                         ; Compare values
    je	.LBB554_5                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB554_1 Depth=1
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 88]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    mov	rcx, qword ptr [rbp + 120]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rcx]
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB554_4                                      ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB554_1 Depth=1
    mov	rax, qword ptr [rbp + 112]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 112], rax                     ; Move 64-bit value
    .LBB554_4:                              #   in Loop: Header=BB554_1 Depth=1
    mov	rax, qword ptr [rbp + 88]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    jmp	.LBB554_1                                      ; Jump instruction
    .LBB554_5:
    mov	rdx, qword ptr [rbp + 112]                     ; Move 64-bit value
    xor	eax, eax
    mov	r8b, al
    lea	rcx, [rbp + 56]
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" ; Function call
    lea	rcx, [rbp + 32]
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0locale@std@@QEAA@XZ"                      ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    .Ltmp492:
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp493:
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB554_6                                      ; Jump instruction
    .LBB554_6:
    lea	rcx, [rbp + 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 48], rax                      ; Move 64-bit value
    mov	dword ptr [rbp + 28], -2                       ; Move 32-bit value
    mov	qword ptr [rbp + 16], 1                        ; Move 64-bit value
    .LBB554_7:                              # =>This Loop Header: Depth=1
#     Child Loop BB554_8 Depth 2
#       Child Loop BB554_10 Depth 3
    mov	byte ptr [rbp + 15], 0
    mov	qword ptr [rbp], 0                             ; Move 64-bit value
    mov	qword ptr [rbp - 8], 0                         ; Move 64-bit value
    .LBB554_8:                              #   Parent Loop BB554_7 Depth=1
# =>  This Loop Header: Depth=2
#       Child Loop BB554_10 Depth 3
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 112]                     ; Compare values
    jae	.LBB554_40                                     ; Jump instruction
# %bb.9:                                #   in Loop: Header=BB554_8 Depth=2
    jmp	.LBB554_10                                     ; Jump instruction
    .LBB554_10:                             #   Parent Loop BB554_7 Depth=1
#     Parent Loop BB554_8 Depth=2
# =>    This Inner Loop Header: Depth=3
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp]                           ; Move 64-bit value
    movsx	ecx, byte ptr [rax + rcx]
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	ecx, 0                                         ; Compare values
    mov	byte ptr [rbp - 25], al         # 1-byte Spill
    je	.LBB554_12                                      ; Jump instruction
# %bb.11:                               #   in Loop: Header=BB554_10 Depth=3
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp]                           ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    mov	rcx, qword ptr [rbp + 120]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rcx]
    cmp	eax, ecx                                       ; Compare values
    setne	al
    mov	byte ptr [rbp - 25], al         # 1-byte Spill
    .LBB554_12:                             #   in Loop: Header=BB554_10 Depth=3
    mov	al, byte ptr [rbp - 25]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB554_13                                     ; Jump instruction
    jmp	.LBB554_15                                     ; Jump instruction
    .LBB554_13:                             #   in Loop: Header=BB554_10 Depth=3
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp], rax                           ; Move 64-bit value
    jmp	.LBB554_10                                     ; Jump instruction
    .LBB554_15:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	eax, byte ptr [rax]
    cmp	eax, 0                                         ; Compare values
    je	.LBB554_17                                      ; Jump instruction
# %bb.16:                               #   in Loop: Header=BB554_8 Depth=2
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsx	rax, byte ptr [rax]
    add	rax, qword ptr [rbp]
    mov	qword ptr [rbp], rax                           ; Move 64-bit value
    jmp	.LBB554_39                                     ; Jump instruction
    .LBB554_17:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 16]                      ; Move 64-bit value
    add	rcx, qword ptr [rbp]
    mov	qword ptr [rbp], rcx                           ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    mov	rcx, qword ptr [rbp + 120]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rcx]
    cmp	eax, ecx                                       ; Compare values
    je	.LBB554_19                                      ; Jump instruction
# %bb.18:                               #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp]                           ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB554_23                                     ; Jump instruction
    .LBB554_19:                             #   in Loop: Header=BB554_8 Depth=2
    cmp	qword ptr [rbp + 16], 127                      ; Compare values
    jae	.LBB554_21                                     ; Jump instruction
# %bb.20:                               #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB554_22                                     ; Jump instruction
    .LBB554_21:                             #   in Loop: Header=BB554_8 Depth=2
    mov	eax, 127
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB554_22                                     ; Jump instruction
    .LBB554_22:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
# kill: def $al killed $al killed $rax
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	cl, byte ptr [rbp - 41]         # 1-byte Reload
    mov	byte ptr [rax], cl
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
# kill: def $eax killed $eax killed $rax
    mov	dword ptr [rbp + 28], eax                      ; Move 32-bit value
    jmp	.LBB554_38                                     ; Jump instruction
    .LBB554_23:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rdx, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 96]                      ; Move 64-bit value
    .Ltmp498:
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp499:
    mov	byte ptr [rbp - 42], al         # 1-byte Spill
    jmp	.LBB554_24                                     ; Jump instruction
    .LBB554_24:                             #   in Loop: Header=BB554_8 Depth=2
    mov	al, byte ptr [rbp - 42]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB554_32                                     ; Jump instruction
    jmp	.LBB554_25                                     ; Jump instruction
    .LBB554_25:                             #   in Loop: Header=BB554_8 Depth=2
    test	byte ptr [rbp + 135], 1                       ; Test values
    je	.LBB554_28                                      ; Jump instruction
# %bb.26:                               #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp]                           ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    mov	dword ptr [rbp - 48], eax       # 4-byte Spill ; Move 32-bit value
    mov	rcx, qword ptr [rbp + 96]                      ; Move 64-bit value
    .Ltmp506:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp507:
    mov	byte ptr [rbp - 43], al         # 1-byte Spill
    jmp	.LBB554_27                                     ; Jump instruction
    .LBB554_27:                             #   in Loop: Header=BB554_8 Depth=2
    mov	eax, dword ptr [rbp - 48]       # 4-byte Reload ; Move 32-bit value
    mov	cl, byte ptr [rbp - 43]         # 1-byte Reload
    movsx	ecx, cl
    cmp	eax, ecx                                       ; Compare values
    jne	.LBB554_32                                     ; Jump instruction
    jmp	.LBB554_36                                     ; Jump instruction
    .LBB554_28:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rcx, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 120]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp]                           ; Move 64-bit value
    mov	dl, byte ptr [rax + rdx]
    .Ltmp500:
    call	"?tolower@?$ctype@D@std@@QEBADD@Z"            ; Function call
    .Ltmp501:
    mov	byte ptr [rbp - 49], al         # 1-byte Spill
    jmp	.LBB554_29                                     ; Jump instruction
    .LBB554_29:                             #   in Loop: Header=BB554_8 Depth=2
    mov	al, byte ptr [rbp - 49]         # 1-byte Reload
    movsx	eax, al
    mov	dword ptr [rbp - 68], eax       # 4-byte Spill ; Move 32-bit value
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 96]                      ; Move 64-bit value
    .Ltmp502:
    call	"??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ" ; Function call
    .Ltmp503:
    mov	byte ptr [rbp - 50], al         # 1-byte Spill
    jmp	.LBB554_30                                     ; Jump instruction
    .LBB554_30:                             #   in Loop: Header=BB554_8 Depth=2
    .Ltmp504:
    mov	dl, byte ptr [rbp - 50]         # 1-byte Reload
    mov	rcx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    call	"?tolower@?$ctype@D@std@@QEBADD@Z"            ; Function call
    .Ltmp505:
    mov	byte ptr [rbp - 69], al         # 1-byte Spill
    jmp	.LBB554_31                                     ; Jump instruction
    .LBB554_31:                             #   in Loop: Header=BB554_8 Depth=2
    mov	eax, dword ptr [rbp - 68]       # 4-byte Reload ; Move 32-bit value
    mov	cl, byte ptr [rbp - 69]         # 1-byte Reload
    movsx	ecx, cl
    cmp	eax, ecx                                       ; Compare values
    je	.LBB554_36                                      ; Jump instruction
    .LBB554_32:                             #   in Loop: Header=BB554_8 Depth=2
    cmp	qword ptr [rbp + 16], 127                      ; Compare values
    jae	.LBB554_34                                     ; Jump instruction
# %bb.33:                               #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB554_35                                     ; Jump instruction
    .LBB554_34:                             #   in Loop: Header=BB554_8 Depth=2
    mov	eax, 127
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB554_35                                     ; Jump instruction
    .LBB554_35:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
# kill: def $al killed $al killed $rax
    mov	byte ptr [rbp - 81], al         # 1-byte Spill
    mov	rdx, qword ptr [rbp - 8]                       ; Move 64-bit value
    lea	rcx, [rbp + 56]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	cl, byte ptr [rbp - 81]         # 1-byte Reload
    mov	byte ptr [rax], cl
    jmp	.LBB554_37                                     ; Jump instruction
    .LBB554_36:                             #   in Loop: Header=BB554_8 Depth=2
    mov	byte ptr [rbp + 15], 1
    .LBB554_37:                             #   in Loop: Header=BB554_8 Depth=2
    jmp	.LBB554_38                                     ; Jump instruction
    .LBB554_38:                             #   in Loop: Header=BB554_8 Depth=2
    jmp	.LBB554_39                                     ; Jump instruction
    .LBB554_39:                             #   in Loop: Header=BB554_8 Depth=2
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp - 8], rax                       ; Move 64-bit value
    jmp	.LBB554_8                                      ; Jump instruction
    .LBB554_40:                             #   in Loop: Header=BB554_7 Depth=1
    test	byte ptr [rbp + 15], 1                        ; Test values
    je	.LBB554_43                                      ; Jump instruction
# %bb.41:                               #   in Loop: Header=BB554_7 Depth=1
    mov	rdx, qword ptr [rbp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 96]                      ; Move 64-bit value
    .Ltmp494:
    call	"??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z" ; Function call
    .Ltmp495:
    mov	byte ptr [rbp - 82], al         # 1-byte Spill
    jmp	.LBB554_42                                     ; Jump instruction
    .LBB554_42:                             #   in Loop: Header=BB554_7 Depth=1
    mov	al, byte ptr [rbp - 82]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB554_43                                     ; Jump instruction
    jmp	.LBB554_44                                     ; Jump instruction
    .LBB554_43:
    mov	eax, dword ptr [rbp + 28]                      ; Move 32-bit value
    mov	dword ptr [rbp - 88], eax       # 4-byte Spill ; Move 32-bit value
    lea	rcx, [rbp + 56]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	eax, dword ptr [rbp - 88]       # 4-byte Reload ; Move 32-bit value
    add	rsp, 272
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .LBB554_44:                             #   in Loop: Header=BB554_7 Depth=1
    mov	rax, qword ptr [rbp + 16]                      ; Move 64-bit value
    inc	rax
    mov	qword ptr [rbp + 16], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 96]                      ; Move 64-bit value
    .Ltmp496:
    call	"??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    .Ltmp497:
    jmp	.LBB554_45                                     ; Jump instruction
    .LBB554_45:                             #   in Loop: Header=BB554_7 Depth=1
    mov	dword ptr [rbp + 28], -1                       ; Move 32-bit value
    jmp	.LBB554_7                                      ; Jump instruction
    .seh_handlerdata
    .long	("$cppxdata$??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$14@?0???$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z@4HA":
    .seh_proc "?dtor$14@?0???$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z@4HA"
    .LBB554_14:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$46@?0???$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z@4HA":
    .seh_proc "?dtor$46@?0???$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z@4HA"
    .LBB554_46:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 56]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end55:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z")@IMGREL # IPToStateXData
    .long	264                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$46@?0???$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$14@?0???$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z":
    .long	.Lfunc_begin55@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp492@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp498@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp497@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .section	.text,"xr",discard,"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
.globl	"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" # -- Begin function ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
    .p2align	4, 0x90
    "?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ": # @"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
    .seh_proc "?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z"
.globl	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z" # -- Begin function ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
    .p2align	4, 0x90
    "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z": # @"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z"
    .seh_proc "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z"
.globl	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z" # -- Begin function ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
    .p2align	4, 0x90
    "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z": # @"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z"
    .seh_proc "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 24]                      ; Move 64-bit value
    sub	rcx, qword ptr [rsp + 64]
    cmp	rax, rcx                                       ; Compare values
    ja	.LBB557_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 88]
    mov	qword ptr [rcx + 16], rax                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 64]
    call	"?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	byte ptr [rsp + 55], 0
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 88]
    add	rcx, rax
    lea	rdx, [rsp + 55]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    jmp	.LBB557_3                                      ; Jump instruction
    .LBB557_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	r9, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 54]
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    .LBB557_3:
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
.globl	"?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" # -- Begin function ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
    .p2align	4, 0x90
    "?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z": # @"?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
    .seh_proc "?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    shl	r8, 0
    call	memmove                                       ; Function call
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z
    .p2align	4, 0x90
    "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
    .seh_proc "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
# %bb.0:
    sub	rsp, 184
    .seh_stackalloc 184
    .seh_endprologue
    mov	rax, qword ptr [rsp + 224]                     ; Move 64-bit value
    mov	byte ptr [rsp + 183], r8b
    mov	qword ptr [rsp + 168], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 160], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 152], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 152]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 144], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rax                     ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    sub	rax, qword ptr [rsp + 136]
    cmp	rax, qword ptr [rsp + 160]                     ; Compare values
    jae	.LBB559_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB559_2:
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    add	rax, qword ptr [rsp + 160]
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 24]                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 128]                     ; Move 64-bit value
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    lea	rdx, [rsp + 112]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 120], 15                      ; Compare values
    jbe	.LBB559_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 224]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 168]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rsp + 56]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    call	"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z" ; Function call
    mov	r8, qword ptr [rsp + 120]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB559_5                                      ; Jump instruction
    .LBB559_4:
    mov	rax, qword ptr [rsp + 224]                     ; Move 64-bit value
    mov	r9, qword ptr [rsp + 168]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 136]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    call	"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z" ; Function call
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    lea	rdx, [rsp + 96]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    .LBB559_5:
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 184
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z"
.globl	"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z" # -- Begin function ??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z
    .p2align	4, 0x90
    "??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z": # @"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z"
    .seh_proc "??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	r8, qword ptr [rsp + 112]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 56]
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	byte ptr [rsp + 39], 0
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 112]
    add	rcx, rax
    lea	rdx, [rsp + 39]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0locale@std@@QEAA@XZ"
.globl	"??0locale@std@@QEAA@XZ"        # -- Begin function ??0locale@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0locale@std@@QEAA@XZ":               # @"??0locale@std@@QEAA@XZ"
    .Lfunc_begin56:
    .seh_proc "??0locale@std@@QEAA@XZ"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    .Ltmp508:
    mov	cl, 1
    call	"?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z"    ; Function call
    .Ltmp509:
    mov	qword ptr [rbp - 24], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB561_1                                      ; Jump instruction
    .LBB561_1:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rcx], rdx                           ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0locale@std@@QEAA@XZ")@IMGREL
    .section	.text,"xr",discard,"??0locale@std@@QEAA@XZ"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0locale@std@@QEAA@XZ@4HA":
    .seh_proc "?dtor$2@?0???0locale@std@@QEAA@XZ@4HA"
    .LBB561_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end56:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0locale@std@@QEAA@XZ"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0locale@std@@QEAA@XZ"
    .p2align	2, 0x0
    "$cppxdata$??0locale@std@@QEAA@XZ":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0locale@std@@QEAA@XZ")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0locale@std@@QEAA@XZ")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0locale@std@@QEAA@XZ":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0locale@std@@QEAA@XZ@4HA"@IMGREL # Action
    "$ip2state$??0locale@std@@QEAA@XZ":
    .long	.Lfunc_begin56@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp508@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp509@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0locale@std@@QEAA@XZ"
    .section	.text,"xr",discard,"?tolower@?$ctype@D@std@@QEBADD@Z"
.globl	"?tolower@?$ctype@D@std@@QEBADD@Z" # -- Begin function ?tolower@?$ctype@D@std@@QEBADD@Z
    .p2align	4, 0x90
    "?tolower@?$ctype@D@std@@QEBADD@Z":     # @"?tolower@?$ctype@D@std@@QEBADD@Z"
    .seh_proc "?tolower@?$ctype@D@std@@QEBADD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 32]                          ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0locale@std@@QEAA@AEBV01@@Z"
.globl	"??0locale@std@@QEAA@AEBV01@@Z" # -- Begin function ??0locale@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0locale@std@@QEAA@AEBV01@@Z":        # @"??0locale@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0locale@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
.globl	"?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" # -- Begin function ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
    .p2align	4, 0x90
    "?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z": # @"?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
    .seh_proc "?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    and	r8b, 1
    mov	byte ptr [rsp + 55], r8b
    mov	dword ptr [rsp + 48], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 55]
    mov	edx, dword ptr [rsp + 48]                      ; Move 32-bit value
    mov	r10, qword ptr [rcx + 72]                      ; Move 64-bit value
    mov	eax, 4
    xor	r9d, r9d
    cmp	r10, 0                                         ; Compare values
    cmovne	eax, r9d
    or	edx, eax
    and	r8b, 1
    call	"?clear@ios_base@std@@QEAAXH_N@Z"             ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?clear@ios_base@std@@QEAAXH_N@Z"
.globl	"?clear@ios_base@std@@QEAAXH_N@Z" # -- Begin function ?clear@ios_base@std@@QEAAXH_N@Z
    .p2align	4, 0x90
    "?clear@ios_base@std@@QEAAXH_N@Z":      # @"?clear@ios_base@std@@QEAAXH_N@Z"
    .seh_proc "?clear@ios_base@std@@QEAAXH_N@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    and	r8b, 1
    mov	byte ptr [rsp + 119], r8b
    mov	dword ptr [rsp + 112], edx                     ; Move 32-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	eax, dword ptr [rsp + 112]                     ; Move 32-bit value
    and	eax, 23
    mov	dword ptr [rsp + 112], eax                     ; Move 32-bit value
    mov	eax, dword ptr [rsp + 112]                     ; Move 32-bit value
    mov	dword ptr [rcx + 16], eax                      ; Move 32-bit value
    mov	eax, dword ptr [rsp + 112]                     ; Move 32-bit value
    and	eax, dword ptr [rcx + 20]
    mov	dword ptr [rsp + 100], eax                     ; Move 32-bit value
    cmp	dword ptr [rsp + 100], 0                       ; Compare values
    je	.LBB565_10                                      ; Jump instruction
# %bb.1:
    test	byte ptr [rsp + 119], 1                       ; Test values
    je	.LBB565_3                                       ; Jump instruction
# %bb.2:
    xor	eax, eax
    mov	edx, eax
    mov	rcx, rdx
    call	_CxxThrowException                            ; Function call
    .LBB565_3:
    mov	eax, dword ptr [rsp + 100]                     ; Move 32-bit value
    and	eax, 4
    cmp	eax, 0                                         ; Compare values
    je	.LBB565_5                                       ; Jump instruction
# %bb.4:
    lea	rax, [rip + "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"]
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB565_9                                      ; Jump instruction
    .LBB565_5:
    mov	eax, dword ptr [rsp + 100]                     ; Move 32-bit value
    and	eax, 2
    cmp	eax, 0                                         ; Compare values
    je	.LBB565_7                                       ; Jump instruction
# %bb.6:
    lea	rax, [rip + "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"]
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB565_8                                      ; Jump instruction
    .LBB565_7:
    lea	rax, [rip + "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"]
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    .LBB565_8:
    jmp	.LBB565_9                                      ; Jump instruction
    .LBB565_9:
    lea	rcx, [rsp + 32]
    mov	edx, 1
    call	"?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 88]                      ; Move 64-bit value
    lea	rcx, [rsp + 48]
    lea	r8, [rsp + 32]
    call	"??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z" ; Function call
    lea	rcx, [rsp + 48]
    lea	rdx, [rip + "_TI5?AVfailure@ios_base@std@@"]
    call	_CxxThrowException                            ; Function call
    .LBB565_10:
    nop
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z"
.globl	"?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z" # -- Begin function ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
    .p2align	4, 0x90
    "?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z": # @"?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z"
    .seh_proc "?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    call	"?iostream_category@std@@YAAEBVerror_category@1@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	edx, dword ptr [rsp + 60]                      ; Move 32-bit value
    call	"??0error_code@std@@QEAA@HAEBVerror_category@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z"
.globl	"??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z" # -- Begin function ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z
    .p2align	4, 0x90
    "??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z": # @"??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z"
    .seh_proc "??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    lea	rdx, [rsp + 48]
    call	"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7failure@ios_base@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0failure@ios_base@std@@QEAA@AEBV012@@Z"
.globl	"??0failure@ios_base@std@@QEAA@AEBV012@@Z" # -- Begin function ??0failure@ios_base@std@@QEAA@AEBV012@@Z
    .p2align	4, 0x90
    "??0failure@ios_base@std@@QEAA@AEBV012@@Z": # @"??0failure@ios_base@std@@QEAA@AEBV012@@Z"
    .seh_proc "??0failure@ios_base@std@@QEAA@AEBV012@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0system_error@std@@QEAA@AEBV01@@Z"         ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7failure@ios_base@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0system_error@std@@QEAA@AEBV01@@Z"
.globl	"??0system_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0system_error@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0system_error@std@@QEAA@AEBV01@@Z":  # @"??0system_error@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0system_error@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0_System_error@std@@QEAA@AEBV01@@Z"        ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7system_error@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_System_error@std@@QEAA@AEBV01@@Z"
.globl	"??0_System_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0_System_error@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0_System_error@std@@QEAA@AEBV01@@Z": # @"??0_System_error@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0_System_error@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0runtime_error@std@@QEAA@AEBV01@@Z"        ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7_System_error@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 24], rdx                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 32]                      ; Move 64-bit value
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0runtime_error@std@@QEAA@AEBV01@@Z"
.globl	"??0runtime_error@std@@QEAA@AEBV01@@Z" # -- Begin function ??0runtime_error@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0runtime_error@std@@QEAA@AEBV01@@Z": # @"??0runtime_error@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0runtime_error@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0exception@std@@QEAA@AEBV01@@Z"            ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7runtime_error@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1failure@ios_base@std@@UEAA@XZ"
.globl	"??1failure@ios_base@std@@UEAA@XZ" # -- Begin function ??1failure@ios_base@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1failure@ios_base@std@@UEAA@XZ":     # @"??1failure@ios_base@std@@UEAA@XZ"
    .seh_proc "??1failure@ios_base@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1system_error@std@@UEAA@XZ"                ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?iostream_category@std@@YAAEBVerror_category@1@XZ"
.globl	"?iostream_category@std@@YAAEBVerror_category@1@XZ" # -- Begin function ?iostream_category@std@@YAAEBVerror_category@1@XZ
    .p2align	4, 0x90
    "?iostream_category@std@@YAAEBVerror_category@1@XZ": # @"?iostream_category@std@@YAAEBVerror_category@1@XZ"
    .seh_proc "?iostream_category@std@@YAAEBVerror_category@1@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    call	"??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0error_code@std@@QEAA@HAEBVerror_category@1@@Z"
.globl	"??0error_code@std@@QEAA@HAEBVerror_category@1@@Z" # -- Begin function ??0error_code@std@@QEAA@HAEBVerror_category@1@@Z
    .p2align	4, 0x90
    "??0error_code@std@@QEAA@HAEBVerror_category@1@@Z": # @"??0error_code@std@@QEAA@HAEBVerror_category@1@@Z"
    .seh_proc "??0error_code@std@@QEAA@HAEBVerror_category@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	dword ptr [rsp + 12], edx                      ; Move 32-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	ecx, dword ptr [rsp + 12]                      ; Move 32-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ"
.globl	"??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ" # -- Begin function ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ
    .p2align	4, 0x90
    "??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ": # @"??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ"
    .seh_proc "??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	eax, dword ptr [rip + "?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"] ; Move 32-bit value
    mov	ecx, dword ptr [rip + _tls_index]              ; Move 32-bit value
    mov	edx, ecx
    mov	rcx, qword ptr gs:[88]                         ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8*rdx]                   ; Move 64-bit value
    mov	ecx, dword ptr [rcx + _Init_thread_epoch@SECREL32] ; Move 32-bit value
    cmp	eax, ecx                                       ; Compare values
    jle	.LBB575_3                                      ; Jump instruction
# %bb.1:
    lea	rcx, [rip + "?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"]
    call	_Init_thread_header                           ; Function call
    cmp	dword ptr [rip + "?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"], -1 ; Compare values
    jne	.LBB575_3                                      ; Jump instruction
# %bb.2:
    lea	rcx, [rip + "??__F_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@YAXXZ"]
    call	atexit                                        ; Function call
    lea	rcx, [rip + "?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"]
    call	_Init_thread_footer                           ; Function call
    .LBB575_3:
    lea	rax, [rip + "?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A"]
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1_Iostream_error_category2@std@@UEAA@XZ"
.globl	"??1_Iostream_error_category2@std@@UEAA@XZ" # -- Begin function ??1_Iostream_error_category2@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1_Iostream_error_category2@std@@UEAA@XZ": # @"??1_Iostream_error_category2@std@@UEAA@XZ"
    .seh_proc "??1_Iostream_error_category2@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1error_category@std@@UEAA@XZ"              ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??__F_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@YAXXZ
    "??__F_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@YAXXZ": # @"??__F_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@YAXXZ"
    .seh_proc "??__F_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@YAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A"]
    call	"??1_Iostream_error_category2@std@@UEAA@XZ"   ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_G_Iostream_error_category2@std@@UEAAPEAXI@Z"
.globl	"??_G_Iostream_error_category2@std@@UEAAPEAXI@Z" # -- Begin function ??_G_Iostream_error_category2@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G_Iostream_error_category2@std@@UEAAPEAXI@Z": # @"??_G_Iostream_error_category2@std@@UEAAPEAXI@Z"
    .seh_proc "??_G_Iostream_error_category2@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1_Iostream_error_category2@std@@UEAA@XZ"   ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB578_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB578_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?name@_Iostream_error_category2@std@@UEBAPEBDXZ"
.globl	"?name@_Iostream_error_category2@std@@UEBAPEBDXZ" # -- Begin function ?name@_Iostream_error_category2@std@@UEBAPEBDXZ
    .p2align	4, 0x90
    "?name@_Iostream_error_category2@std@@UEBAPEBDXZ": # @"?name@_Iostream_error_category2@std@@UEBAPEBDXZ"
    .seh_proc "?name@_Iostream_error_category2@std@@UEBAPEBDXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    lea	rax, [rip + "??_C@_08LLGCOLLL@iostream?$AA@"]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
.globl	"?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z" # -- Begin function ?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
    .p2align	4, 0x90
    "?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z": # @"?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
    .seh_proc "?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	dword ptr [rsp + 76], r8d                      ; Move 32-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    cmp	dword ptr [rsp + 76], 1                        ; Compare values
    jne	.LBB580_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 56], 21                       ; Move 64-bit value
    lea	rdx, [rip + "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"]
    mov	r8d, 21
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z" ; Function call
    jmp	.LBB580_3                                      ; Jump instruction
    .LBB580_2:
    mov	ecx, dword ptr [rsp + 76]                      ; Move 32-bit value
    call	"?_Syserror_map@std@@YAPEBDH@Z"               ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z" ; Function call
    .LBB580_3:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z"
.globl	"?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z" # -- Begin function ?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
    .p2align	4, 0x90
    "?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z": # @"?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z"
    .seh_proc "?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rcx
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	dword ptr [rsp + 60], r8d                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	edx, dword ptr [rsp + 60]                      ; Move 32-bit value
    call	"??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z"
.globl	"?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z" # -- Begin function ?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
    .p2align	4, 0x90
    "?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z": # @"?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z"
    .seh_proc "?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 68], r8d                      ; Move 32-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?category@error_code@std@@QEBAAEBVerror_category@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??8error_category@std@@QEBA_NAEBV01@@Z"      ; Function call
    mov	cl, al
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    jne	.LBB582_1                                      ; Jump instruction
    jmp	.LBB582_2                                      ; Jump instruction
    .LBB582_1:
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?value@error_code@std@@QEBAHXZ"              ; Function call
    cmp	eax, dword ptr [rsp + 68]                      ; Compare values
    sete	al
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    .LBB582_2:
    mov	al, byte ptr [rsp + 47]         # 1-byte Reload
    and	al, 1
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z"
.globl	"?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z" # -- Begin function ?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
    .p2align	4, 0x90
    "?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z": # @"?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z"
    .seh_proc "?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	dword ptr [rsp + 76], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	r8d, dword ptr [rsp + 76]                      ; Move 32-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    lea	rdx, [rsp + 48]
    call	qword ptr [rax + 24]                          ; Function call
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rsp + 48]
    call	"??8std@@YA_NAEBVerror_condition@0@0@Z"       ; Function call
    and	al, 1
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1error_category@std@@UEAA@XZ"
.globl	"??1error_category@std@@UEAA@XZ" # -- Begin function ??1error_category@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1error_category@std@@UEAA@XZ":       # @"??1error_category@std@@UEAA@XZ"
    .seh_proc "??1error_category@std@@UEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
    .p2align	4, 0x90
    "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
    .Lfunc_begin57:
    .seh_proc "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rbp - 33]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    .Ltmp510:
    call	"??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z" ; Function call
    .Ltmp511:
    jmp	.LBB585_1                                      ; Jump instruction
    .LBB585_1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA"
    .LBB585_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end57:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z":
    .long	.Lfunc_begin57@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp510@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp511@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z"
    .section	.text,"xr",discard,"??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z"
.globl	"??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z" # -- Begin function ??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z
    .p2align	4, 0x90
    "??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z": # @"??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z"
    .seh_proc "??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	dword ptr [rsp + 12], edx                      ; Move 32-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	ecx, dword ptr [rsp + 12]                      ; Move 32-bit value
    mov	dword ptr [rax], ecx                           ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??8error_category@std@@QEBA_NAEBV01@@Z"
.globl	"??8error_category@std@@QEBA_NAEBV01@@Z" # -- Begin function ??8error_category@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??8error_category@std@@QEBA_NAEBV01@@Z": # @"??8error_category@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??8error_category@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, 8
    call	"??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z" ; Function call
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rcx, 8
    call	"??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    sete	al
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?category@error_code@std@@QEBAAEBVerror_category@2@XZ"
.globl	"?category@error_code@std@@QEBAAEBVerror_category@2@XZ" # -- Begin function ?category@error_code@std@@QEBAAEBVerror_category@2@XZ
    .p2align	4, 0x90
    "?category@error_code@std@@QEBAAEBVerror_category@2@XZ": # @"?category@error_code@std@@QEBAAEBVerror_category@2@XZ"
    .seh_proc "?category@error_code@std@@QEBAAEBVerror_category@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?value@error_code@std@@QEBAHXZ"
.globl	"?value@error_code@std@@QEBAHXZ" # -- Begin function ?value@error_code@std@@QEBAHXZ
    .p2align	4, 0x90
    "?value@error_code@std@@QEBAHXZ":       # @"?value@error_code@std@@QEBAHXZ"
    .seh_proc "?value@error_code@std@@QEBAHXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z"
.globl	"??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z" # -- Begin function ??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z
    .p2align	4, 0x90
    "??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z": # @"??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z"
    .seh_proc "??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??8std@@YA_NAEBVerror_condition@0@0@Z"
.globl	"??8std@@YA_NAEBVerror_condition@0@0@Z" # -- Begin function ??8std@@YA_NAEBVerror_condition@0@0@Z
    .p2align	4, 0x90
    "??8std@@YA_NAEBVerror_condition@0@0@Z": # @"??8std@@YA_NAEBVerror_condition@0@0@Z"
    .seh_proc "??8std@@YA_NAEBVerror_condition@0@0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?category@error_condition@std@@QEBAAEBVerror_category@2@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?category@error_condition@std@@QEBAAEBVerror_category@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??8error_category@std@@QEBA_NAEBV01@@Z"      ; Function call
    mov	cl, al
    xor	eax, eax
# kill: def $al killed $al killed $eax
    test	cl, 1                                         ; Test values
    mov	byte ptr [rsp + 55], al         # 1-byte Spill
    jne	.LBB591_1                                      ; Jump instruction
    jmp	.LBB591_2                                      ; Jump instruction
    .LBB591_1:
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?value@error_condition@std@@QEBAHXZ"         ; Function call
    mov	dword ptr [rsp + 36], eax       # 4-byte Spill ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?value@error_condition@std@@QEBAHXZ"         ; Function call
    mov	ecx, eax
    mov	eax, dword ptr [rsp + 36]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, ecx                                       ; Compare values
    sete	al
    mov	byte ptr [rsp + 55], al         # 1-byte Spill
    .LBB591_2:
    mov	al, byte ptr [rsp + 55]         # 1-byte Reload
    and	al, 1
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?category@error_condition@std@@QEBAAEBVerror_category@2@XZ"
.globl	"?category@error_condition@std@@QEBAAEBVerror_category@2@XZ" # -- Begin function ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ
    .p2align	4, 0x90
    "?category@error_condition@std@@QEBAAEBVerror_category@2@XZ": # @"?category@error_condition@std@@QEBAAEBVerror_category@2@XZ"
    .seh_proc "?category@error_condition@std@@QEBAAEBVerror_category@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?value@error_condition@std@@QEBAHXZ"
.globl	"?value@error_condition@std@@QEBAHXZ" # -- Begin function ?value@error_condition@std@@QEBAHXZ
    .p2align	4, 0x90
    "?value@error_condition@std@@QEBAHXZ":  # @"?value@error_condition@std@@QEBAHXZ"
    .seh_proc "?value@error_condition@std@@QEBAHXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
.globl	"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z" # -- Begin function ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
    .p2align	4, 0x90
    "??0system_error@std@@QEAA@Verror_code@1@PEBD@Z": # @"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
    .Lfunc_begin58:
    .seh_proc "??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 144
    .seh_stackalloc 144
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 88], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp], r8                            ; Move 64-bit value
    mov	qword ptr [rbp - 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp]                           ; Move 64-bit value
    lea	rcx, [rbp - 48]
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z" ; Function call
    mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 72]        # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rdx]
    movaps	xmmword ptr [rbp - 64], xmm0
    .Ltmp512:
    lea	rdx, [rbp - 64]
    call	"??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z" ; Function call
    .Ltmp513:
    jmp	.LBB594_1                                      ; Jump instruction
    .LBB594_1:
    lea	rcx, [rbp - 48]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7system_error@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 144
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z")@IMGREL
    .section	.text,"xr",discard,"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA":
    .seh_proc "?dtor$2@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA"
    .LBB594_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 48]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end58:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
    .p2align	2, 0x0
    "$cppxdata$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z")@IMGREL # IPToStateXData
    .long	136                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA"@IMGREL # Action
    "$ip2state$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z":
    .long	.Lfunc_begin58@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp512@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp513@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0system_error@std@@QEAA@Verror_code@1@PEBD@Z"
    .section	.text,"xr",discard,"??_Gfailure@ios_base@std@@UEAAPEAXI@Z"
.globl	"??_Gfailure@ios_base@std@@UEAAPEAXI@Z" # -- Begin function ??_Gfailure@ios_base@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gfailure@ios_base@std@@UEAAPEAXI@Z": # @"??_Gfailure@ios_base@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gfailure@ios_base@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1failure@ios_base@std@@UEAA@XZ"            ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB595_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 40
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB595_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
.globl	"??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z" # -- Begin function ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
    .p2align	4, 0x90
    "??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z": # @"??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
    .seh_proc "??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
# %bb.0:
    sub	rsp, 152
    .seh_stackalloc 152
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 144], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 128], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 144]                     ; Move 64-bit value
    lea	rcx, [rsp + 64]
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z" ; Function call
    mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rdx]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 96]
    lea	rdx, [rsp + 48]
    lea	r8, [rsp + 64]
    call	"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rsp + 96]
    call	"??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z" ; Function call
    lea	rcx, [rsp + 96]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7_System_error@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rdx]                           ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 32], rcx                      ; Move 64-bit value
    add	rsp, 152
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_Gsystem_error@std@@UEAAPEAXI@Z"
.globl	"??_Gsystem_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Gsystem_error@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gsystem_error@std@@UEAAPEAXI@Z":    # @"??_Gsystem_error@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gsystem_error@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1system_error@std@@UEAA@XZ"                ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB597_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 40
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB597_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
.globl	"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z" # -- Begin function ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
    .p2align	4, 0x90
    "?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z": # @"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .Lfunc_begin59:
    .seh_proc "?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 88], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 96], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rcx
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	r8, rax
    mov	qword ptr [rbp - 72], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rdx                      ; Move 64-bit value
    call	"?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB598_3                                      ; Jump instruction
# %bb.1:
    .Ltmp514:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "??_C@_02LMMGGCAJ@?3?5?$AA@"]
    call	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z" ; Function call
    .Ltmp515:
    jmp	.LBB598_2                                      ; Jump instruction
    .LBB598_2:
    jmp	.LBB598_3                                      ; Jump instruction
    .LBB598_3:
    .Ltmp516:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp - 64]
    call	"?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp517:
    jmp	.LBB598_4                                      ; Jump instruction
    .LBB598_4:
    .Ltmp518:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rbp - 64]
    call	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z" ; Function call
    .Ltmp519:
    jmp	.LBB598_5                                      ; Jump instruction
    .LBB598_5:
    lea	rcx, [rbp - 64]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z")@IMGREL
    .section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
    .seh_proc "?dtor$6@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA"
    .LBB598_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$7@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA":
    .seh_proc "?dtor$7@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA"
    .LBB598_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end59:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
    .long	-1                              # ToState
    .long	"?dtor$7@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$6@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA"@IMGREL # Action
    "$ip2state$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z":
    .long	.Lfunc_begin59@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp514@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp518@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp519@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
    .Lfunc_begin60:
    .seh_proc "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ" ; Function call
    mov	rdx, rax
    lea	rcx, [rbp - 25]
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z" ; Function call
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	dl, byte ptr [rbp - 26]
    call	"??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ" ; Function call
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 40]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    .Ltmp520:
    call	"??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z" ; Function call
    .Ltmp521:
    jmp	.LBB599_1                                      ; Jump instruction
    .LBB599_1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA"
    .LBB599_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end60:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z":
    .long	.Lfunc_begin60@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp520@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp521@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z"
    .section	.text,"xr",discard,"??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
.globl	"??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z" # -- Begin function ??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
    .p2align	4, 0x90
    "??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z": # @"??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
    .seh_proc "??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??0exception@std@@QEAA@QEBD@Z"               ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    lea	rcx, [rip + "??_7runtime_error@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_G_System_error@std@@UEAAPEAXI@Z"
.globl	"??_G_System_error@std@@UEAAPEAXI@Z" # -- Begin function ??_G_System_error@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G_System_error@std@@UEAAPEAXI@Z":   # @"??_G_System_error@std@@UEAAPEAXI@Z"
    .seh_proc "??_G_System_error@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1_System_error@std@@UEAA@XZ"               ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB601_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 40
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB601_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z"
.globl	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z" # -- Begin function ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
    .p2align	4, 0x90
    "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z": # @"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z"
    .seh_proc "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z" ; Function call
    mov	rcx, rax
    call	"??$_Convert_size@_K_K@std@@YA_K_K@Z"         ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
.globl	"?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" # -- Begin function ?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
    .p2align	4, 0x90
    "?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ": # @"?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .seh_proc "?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 56], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?category@error_code@std@@QEBAAEBVerror_category@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?value@error_code@std@@QEBAHXZ"              ; Function call
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8d, eax
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 16]                          ; Function call
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z"
.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
    .p2align	4, 0x90
    "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z"
    .seh_proc "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	dl, byte ptr [rsp + 55]
    call	"??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z"
.globl	"??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z" # -- Begin function ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
    .p2align	4, 0x90
    "??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z": # @"??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z"
    .seh_proc "??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z"
.globl	"?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z" # -- Begin function ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
    .p2align	4, 0x90
    "?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z": # @"?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z"
    .seh_proc "?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rdx                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 24], 15                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ" ; Function call
    mov	byte ptr [rsp + 39], 0
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    lea	rdx, [rsp + 39]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
.globl	"?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ" # -- Begin function ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ": # @"?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
    .seh_proc "?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rax                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z"
.globl	"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z" # -- Begin function ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
    .p2align	4, 0x90
    "?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z": # @"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z"
    .seh_proc "?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
.globl	"??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z" # -- Begin function ??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
    .p2align	4, 0x90
    "??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z": # @"??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
    .seh_proc "??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 128], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB609_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB609_2:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    lea	rax, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 104]                      ; Move 64-bit value
    lea	rcx, [rsp + 87]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rsp + 128], 15                      ; Compare values
    ja	.LBB609_4                                       ; Jump instruction
# %bb.3:
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], 15                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	r8d, 16
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    lea	rcx, [rsp + 87]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    jmp	.LBB609_5                                      ; Jump instruction
    .LBB609_4:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	r8, rax
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	edx, 15
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z" ; Function call
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    lea	rdx, [rsp + 72]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    lea	rdx, [rsp + 64]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	rdx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    lea	rcx, [rsp + 87]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    .LBB609_5:
    nop
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
.globl	"??0exception@std@@QEAA@QEBD@Z" # -- Begin function ??0exception@std@@QEAA@QEBD@Z
    .p2align	4, 0x90
    "??0exception@std@@QEAA@QEBD@Z":        # @"??0exception@std@@QEAA@QEBD@Z"
    .Lfunc_begin61:
    .seh_proc "??0exception@std@@QEAA@QEBD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rip + "??_7exception@std@@6B@"]
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 8
    xorps	xmm0, xmm0
    movups	xmmword ptr [rax + 8], xmm0
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	byte ptr [rbp - 32], 1
    .Ltmp522:
    lea	rcx, [rbp - 40]
    call	__std_exception_copy                          ; Function call
    .Ltmp523:
    jmp	.LBB610_1                                      ; Jump instruction
    .LBB610_1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0exception@std@@QEAA@QEBD@Z")@IMGREL
    .section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0exception@std@@QEAA@QEBD@Z@4HA":
    .seh_proc "?dtor$2@?0???0exception@std@@QEAA@QEBD@Z@4HA"
    .LBB610_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end61:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0exception@std@@QEAA@QEBD@Z"
    .p2align	2, 0x0
    "$cppxdata$??0exception@std@@QEAA@QEBD@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0exception@std@@QEAA@QEBD@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0exception@std@@QEAA@QEBD@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0exception@std@@QEAA@QEBD@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0exception@std@@QEAA@QEBD@Z@4HA"@IMGREL # Action
    "$ip2state$??0exception@std@@QEAA@QEBD@Z":
    .long	.Lfunc_begin61@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp522@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp523@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0exception@std@@QEAA@QEBD@Z"
    .section	.text,"xr",discard,"??_Gruntime_error@std@@UEAAPEAXI@Z"
.globl	"??_Gruntime_error@std@@UEAAPEAXI@Z" # -- Begin function ??_Gruntime_error@std@@UEAAPEAXI@Z
    .p2align	4, 0x90
    "??_Gruntime_error@std@@UEAAPEAXI@Z":   # @"??_Gruntime_error@std@@UEAAPEAXI@Z"
    .seh_proc "??_Gruntime_error@std@@UEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1runtime_error@std@@UEAA@XZ"               ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB611_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 24
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB611_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1runtime_error@std@@UEAA@XZ"
.globl	"??1runtime_error@std@@UEAA@XZ" # -- Begin function ??1runtime_error@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1runtime_error@std@@UEAA@XZ":        # @"??1runtime_error@std@@UEAA@XZ"
    .seh_proc "??1runtime_error@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1exception@std@@UEAA@XZ"                   ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1_System_error@std@@UEAA@XZ"
.globl	"??1_System_error@std@@UEAA@XZ" # -- Begin function ??1_System_error@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1_System_error@std@@UEAA@XZ":        # @"??1_System_error@std@@UEAA@XZ"
    .seh_proc "??1_System_error@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1runtime_error@std@@UEAA@XZ"               ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1system_error@std@@UEAA@XZ"
.globl	"??1system_error@std@@UEAA@XZ"  # -- Begin function ??1system_error@std@@UEAA@XZ
    .p2align	4, 0x90
    "??1system_error@std@@UEAA@XZ":         # @"??1system_error@std@@UEAA@XZ"
    .seh_proc "??1system_error@std@@UEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1_System_error@std@@UEAA@XZ"               ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
.globl	"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z" # -- Begin function ??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z
    .p2align	4, 0x90
    "??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z": # @"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .Lfunc_begin62:
    .seh_proc "??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 88], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 72], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx       # 8-byte Spill ; Move 64-bit value
    mov	dword ptr [rbp + 68], 0                        ; Move 32-bit value
    lea	rcx, [rbp + 48]
    xor	r8d, r8d
    call	"??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@_N@Z" ; Function call
    lea	rcx, [rbp + 48]
    call	"??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB615_1                                      ; Jump instruction
    jmp	.LBB615_9                                      ; Jump instruction
    .LBB615_1:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    lea	rdx, [rbp + 32]
    mov	qword ptr [rbp - 40], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    .Ltmp524:
    call	"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp525:
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB615_2                                      ; Jump instruction
    .LBB615_2:
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 80]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    movsxd	rcx, dword ptr [rcx + 4]                    ; Move 32-bit value
    add	rax, rcx
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 16]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rbp
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@1@@Z" ; Function call
    mov	r10, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rbp - 48]        # 8-byte Reload ; Move 64-bit value
    .Ltmp526:
    mov	rax, rsp
    mov	qword ptr [rax + 48], r10                      ; Move 64-bit value
    lea	r10, [rbp + 68]
    mov	qword ptr [rax + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp - 16]
    call	"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z" ; Function call
    .Ltmp527:
    jmp	.LBB615_3                                      ; Jump instruction
    .LBB615_3:
    lea	rcx, [rbp + 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    jmp	.LBB615_8                                      ; Jump instruction
    .LBB615_7:                              # Block address taken
    $ehgcr_615_7:
    jmp	.LBB615_8                                      ; Jump instruction
    .LBB615_8:
    jmp	.LBB615_9                                      ; Jump instruction
    .LBB615_9:
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp + 68]                      ; Move 32-bit value
    .Ltmp530:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp531:
    jmp	.LBB615_10                                     ; Jump instruction
    .LBB615_10:
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$4@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA":
    .seh_proc "?dtor$4@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"
    .LBB615_4:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 32]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$5@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA":
    .seh_proc "?catch$5@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB615_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rdx + 128]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp528:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp529:
    jmp	.LBB615_6                                      ; Jump instruction
    .LBB615_6:
    lea	rax, [rip + .LBB615_7]
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$11@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA":
    .seh_proc "?dtor$11@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"
    .LBB615_11:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 48]
    call	"??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end62:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z":
    .long	429065506                       # MagicNumber
    .long	4                               # MaxState
    .long	("$stateUnwindMap$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z")@IMGREL # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z")@IMGREL # IPToStateXData
    .long	216                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z":
    .long	-1                              # ToState
    .long	"?dtor$11@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	1                               # ToState
    .long	"?dtor$4@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    "$tryMap$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z":
    .long	1                               # TryLow
    .long	2                               # TryHigh
    .long	3                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z")@IMGREL # HandlerArray
    "$handlerMap$0$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$5@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"@IMGREL # Handler
    .long	88                              # ParentFrameOffset
    "$ip2state$??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z":
    .long	.Lfunc_begin62@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp524@IMGREL+1               # IP
    .long	2                               # ToState
    .long	.Ltmp530@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp531@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$5@?0???$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z@4HA"@IMGREL # IP
    .long	3                               # ToState
    .section	.text,"xr",discard,"??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .section	.text,"xr",discard,"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
.globl	"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z" # -- Begin function ?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z
    .p2align	4, 0x90
    "?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z": # @"?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
    .seh_proc "?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	qword ptr [rsp + 120], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	r10, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	r11, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	rsi, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	rax, qword ptr [r9]                            ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r9 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    lea	r8, [rsp + 64]
    lea	r9, [rsp + 80]
    mov	qword ptr [rsp + 32], rsi                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], r11                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], r10                      ; Move 64-bit value
    call	qword ptr [rax + 32]                          ; Function call
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z"
.globl	"??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z" # -- Begin function ??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z
    .p2align	4, 0x90
    "??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z": # @"??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z"
    .seh_proc "??$?0AEBV?$allocator@UPoint@@@std@@$$V@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@UPoint@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
.globl	"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" # -- Begin function ??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z": # @"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .Lfunc_begin63:
    .seh_proc "??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 112
    .seh_stackalloc 112
    lea	rbp, [rsp + 112]
    .seh_setframe rbp, 112
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    lea	rcx, [rbp - 49]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rbp - 16], 0                        ; Compare values
    je	.LBB618_4                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp532:
    call	"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z" ; Function call
    .Ltmp533:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB618_2                                      ; Jump instruction
    .LBB618_2:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp - 64], 0                        ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB618_4                                      ; Jump instruction
    .LBB618_4:
    lea	rcx, [rbp - 49]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 112
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0???$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z@4HA":
    .seh_proc "?dtor$3@?0???$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z@4HA"
    .LBB618_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end63:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z")@IMGREL # IPToStateXData
    .long	104                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0???$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z":
    .long	.Lfunc_begin63@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp532@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp533@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .section	.text,"xr",discard,"?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
.globl	"?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z": # @"?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB619_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ" ; Function call
    .LBB619_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
.globl	"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z" # -- Begin function ??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z": # @"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .Lfunc_begin64:
    .seh_proc "??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    lea	rcx, [rbp - 56]
    call	"??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z" ; Function call
    .LBB620_1:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rbp - 24]                      ; Compare values
    jae	.LBB620_4                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB620_1 Depth=1
    .Ltmp534:
    lea	rcx, [rbp - 56]
    call	"??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ" ; Function call
    .Ltmp535:
    jmp	.LBB620_3                                      ; Jump instruction
    .LBB620_3:                              #   in Loop: Header=BB620_1 Depth=1
    mov	rax, qword ptr [rbp - 24]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp - 24], rax                      ; Move 64-bit value
    jmp	.LBB620_1                                      ; Jump instruction
    .LBB620_4:
    lea	rcx, [rbp - 56]
    call	"?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ" ; Function call
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 56]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0???$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z@4HA":
    .seh_proc "?dtor$5@?0???$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z@4HA"
    .LBB620_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    lea	rcx, [rbp - 56]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end64:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$5@?0???$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z":
    .long	.Lfunc_begin64@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp534@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp535@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .section	.text,"xr",discard,"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB621_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ" ; Function call
    .LBB621_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
.globl	"?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z": # @"?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, rax
    lea	rdx, [rsp + 80]
    call	"??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    imul	rax, qword ptr [rsp + 80], 24
    add	rcx, rax
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z"
.globl	"??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z" # -- Begin function ??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z": # @"??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z"
    .seh_proc "??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ"
.globl	"??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ" # -- Begin function ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ
    .p2align	4, 0x90
    "??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ": # @"??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ"
    .seh_proc "??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z" ; Function call
    mov	rdx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    call	"??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 24
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ"
.globl	"?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ" # -- Begin function ?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ
    .p2align	4, 0x90
    "?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ": # @"?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ"
    .seh_proc "?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ": # @"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	r8, qword ptr [rax + 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z"
.globl	"??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z" # -- Begin function ??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z
    .p2align	4, 0x90
    "??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z": # @"??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z"
    .seh_proc "??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    xor	edx, edx
    mov	r8d, 24
    call	memset                                        ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z"
.globl	"??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z" # -- Begin function ??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z
    .p2align	4, 0x90
    "??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z": # @"??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z"
    .seh_proc "??0?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 54]
    lea	r9, [rsp + 55]
    call	"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z": # @"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	byte ptr [rsp + 87], dl
    mov	qword ptr [rsp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
.globl	"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ" # -- Begin function ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ
    .p2align	4, 0x90
    "?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ": # @"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .seh_proc "?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    lea	rax, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    lea	rcx, [rsp + 47]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    lea	rcx, [rsp + 47]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z": # @"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ"
.globl	"??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ" # -- Begin function ??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ": # @"??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ"
.globl	"??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ": # @"??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
.globl	"??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" # -- Begin function ??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z": # @"??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .seh_proc "??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	edx, 1
    call	"?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    lea	rdx, [rsp + 40]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, 8
    lea	rdx, [rsp + 40]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, 16
    lea	rdx, [rsp + 40]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	byte ptr [rax + 25], 1
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
.globl	"?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" # -- Begin function ?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z": # @"?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
    .seh_proc "?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z"       ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z"
.globl	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z" # -- Begin function ??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z": # @"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z"
    .seh_proc "??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z": # @"??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	byte ptr [rsp + 47], 1
    movabs	rax, 329406144173384850
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    movabs	rax, 329406144173384850
    cmp	qword ptr [rsp + 48], rax                      ; Compare values
    jbe	.LBB637_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB637_2:
    imul	rax, qword ptr [rsp + 48], 56
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z
    "??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z": # @"??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z"
    .seh_proc "??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    call	"??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAUPoint@@PEBU_Container_base0@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z"
.globl	"??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z" # -- Begin function ??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z": # @"??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z"
    .seh_proc "??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 232
    .seh_stackalloc 232
    .seh_endprologue
    mov	qword ptr [rsp + 56], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 224], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 216], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 208], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	qword ptr [rsp + 200], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 216]                     ; Move 64-bit value
    call	"?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 160], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rsp + 160]                      ; Move 64-bit value
    lea	rdx, [rsp + 136]
    call	"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	qword ptr [rsp + 176], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 184], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 152]                     ; Move 64-bit value
    mov	qword ptr [rsp + 192], rax                     ; Move 64-bit value
    mov	r8, qword ptr [rsp + 160]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 192]                     ; Move 64-bit value
    call	"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB639_1                                      ; Jump instruction
    jmp	.LBB639_2                                      ; Jump instruction
    .LBB639_1:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rsp + 176]
    add	rdx, 16
    mov	byte ptr [rsp + 135], 0
    lea	r8, [rsp + 135]
    call	"??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z" ; Function call
    jmp	.LBB639_3                                      ; Jump instruction
    .LBB639_2:
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    call	"?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ" ; Function call
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 216]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 200]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" ; Function call
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    lea	rcx, [rsp + 112]
    call	"??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z" ; Function call
    lea	rcx, [rsp + 112]
    call	"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ" ; Function call
    mov	qword ptr [rsp + 168], rax                     ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 200]                     ; Move 64-bit value
    mov	r8, qword ptr [rsp + 168]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    lea	rdx, [rsp + 88]
    call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	byte ptr [rsp + 87], 1
    lea	rdx, [rsp + 104]
    lea	r8, [rsp + 87]
    call	"??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z" ; Function call
    .LBB639_3:
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 232
    ret                                                ; Return from function
    .seh_endproc
    .text
    .p2align	4, 0x90                         # -- Begin function ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z
    "??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z": # @"??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z"
    .seh_proc "??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    call	"??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z"
.globl	"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z" # -- Begin function ??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z
    .p2align	4, 0x90
    "??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z": # @"??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z"
    .seh_proc "??$?0V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@AEB_N$0A@@?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@std@@QEAA@$$QEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@1@AEB_N@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	cl, byte ptr [rcx]
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z"
.globl	"?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z" # -- Begin function ?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z
    .p2align	4, 0x90
    "?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z": # @"?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z"
    .seh_proc "?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z"
.globl	"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z" # -- Begin function ??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z": # @"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z"
    .seh_proc "??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 112], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rdx], rax                           ; Move 64-bit value
    mov	dword ptr [rdx + 8], 0                         ; Move 32-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rdx + 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rdx]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB643_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    setne	al
    xor	al, -1
    test	al, 1                                         ; Test values
    jne	.LBB643_2                                      ; Jump instruction
    jmp	.LBB643_6                                      ; Jump instruction
    .LBB643_2:                              #   in Loop: Header=BB643_1 Depth=1
    mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    call	"?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rcx, 32
    call	"?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??RCompare@Point@@QEBA_NAEBU1@0@Z"           ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB643_3                                      ; Jump instruction
    jmp	.LBB643_4                                      ; Jump instruction
    .LBB643_3:                              #   in Loop: Header=BB643_1 Depth=1
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	dword ptr [rax + 8], 0                         ; Move 32-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB643_5                                      ; Jump instruction
    .LBB643_4:                              #   in Loop: Header=BB643_1 Depth=1
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	dword ptr [rax + 8], 1                         ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB643_5:                              #   in Loop: Header=BB643_1 Depth=1
    jmp	.LBB643_1                                      ; Jump instruction
    .LBB643_6:
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
.globl	"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z" # -- Begin function ??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z": # @"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
    .seh_proc "??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	byte ptr [rcx + 25], 0                         ; Compare values
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    jne	.LBB644_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rcx, 32
    call	"?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??RCompare@Point@@QEBA_NAEBU1@0@Z"           ; Function call
    xor	al, -1
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    .LBB644_2:
    mov	al, byte ptr [rsp + 63]         # 1-byte Reload
    and	al, 1
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z"
.globl	"??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z" # -- Begin function ??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z
    .p2align	4, 0x90
    "??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z": # @"??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z"
    .seh_proc "??$?0AEAPEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@AEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	cl, byte ptr [rcx]
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
.globl	"?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ" # -- Begin function ?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ
    .p2align	4, 0x90
    "?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ": # @"?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .seh_proc "?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    jne	.LBB646_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_tree_length_error@std@@YAXXZ"        ; Function call
    .LBB646_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
.globl	"??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z" # -- Begin function ??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z": # @"??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
    .seh_proc "??$?0AEBUPoint@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rdx, 32
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    lea	rdx, [rsp + 56]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 8
    lea	rdx, [rsp + 56]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 16
    lea	rdx, [rsp + 56]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rcx + 24], 0
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rcx + 25], 0
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ"
.globl	"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ" # -- Begin function ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ
    .p2align	4, 0x90
    "?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ": # @"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ"
    .seh_proc "?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], 0                        ; Move 64-bit value
    add	rcx, 8
    lea	rdx, [rsp + 40]
    call	"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB649_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 8
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 16
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rdx, 32
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z" ; Function call
    .LBB649_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z"
.globl	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z" # -- Begin function ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z
    .p2align	4, 0x90
    "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z": # @"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z"
    .seh_proc "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 1
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rdx]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rdx]                           ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 80]                      ; Compare values
    jne	.LBB650_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    jmp	.LBB650_26                                     ; Jump instruction
    .LBB650_2:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    cmp	dword ptr [rax + 8], 0                         ; Compare values
    jne	.LBB650_6                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rcx + 16], rdx                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    jne	.LBB650_5                                      ; Jump instruction
# %bb.4:
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    .LBB650_5:
    jmp	.LBB650_9                                      ; Jump instruction
    .LBB650_6:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rcx], rdx                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB650_8                                      ; Jump instruction
# %bb.7:
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB650_8:
    jmp	.LBB650_9                                      ; Jump instruction
    .LBB650_9:
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    .LBB650_10:                             # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    movsx	eax, byte ptr [rax + 24]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB650_25                                     ; Jump instruction
# %bb.11:                               #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB650_18                                     ; Jump instruction
# %bb.12:                               #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax + 24]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB650_14                                     ; Jump instruction
# %bb.13:                               #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    jmp	.LBB650_17                                     ; Jump instruction
    .LBB650_14:                             #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    jne	.LBB650_16                                     ; Jump instruction
# %bb.15:                               #   in Loop: Header=BB650_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z" ; Function call
    .LBB650_16:                             #   in Loop: Header=BB650_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z" ; Function call
    .LBB650_17:                             #   in Loop: Header=BB650_10 Depth=1
    jmp	.LBB650_24                                     ; Jump instruction
    .LBB650_18:                             #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax + 24]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB650_20                                     ; Jump instruction
# %bb.19:                               #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    jmp	.LBB650_23                                     ; Jump instruction
    .LBB650_20:                             #   in Loop: Header=BB650_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB650_22                                     ; Jump instruction
# %bb.21:                               #   in Loop: Header=BB650_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z" ; Function call
    .LBB650_22:                             #   in Loop: Header=BB650_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z" ; Function call
    .LBB650_23:                             #   in Loop: Header=BB650_10 Depth=1
    jmp	.LBB650_24                                     ; Jump instruction
    .LBB650_24:                             #   in Loop: Header=BB650_10 Depth=1
    jmp	.LBB650_10                                     ; Jump instruction
    .LBB650_25:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    .LBB650_26:
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z"
.globl	"??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z" # -- Begin function ??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z
    .p2align	4, 0x90
    "??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z": # @"??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z"
    .seh_proc "??$?0PEAU?$_Tree_node@UPoint@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@UPoint@@PEAX@1@$$QEA_N@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	cl, byte ptr [rcx]
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
.globl	"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ" # -- Begin function ?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ": # @"?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
    .seh_proc "?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
.globl	"?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ" # -- Begin function ?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ
    .p2align	4, 0x90
    "?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ": # @"?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
    .seh_proc "?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??RCompare@Point@@QEBA_NAEBU1@0@Z"
.globl	"??RCompare@Point@@QEBA_NAEBU1@0@Z" # -- Begin function ??RCompare@Point@@QEBA_NAEBU1@0@Z
    .p2align	4, 0x90
    "??RCompare@Point@@QEBA_NAEBU1@0@Z":    # @"??RCompare@Point@@QEBA_NAEBU1@0@Z"
    .seh_proc "??RCompare@Point@@QEBA_NAEBU1@0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    subsd	xmm0, qword ptr [rax]                        ; Subtract two doubles
    call	"?abs@@YAOO@Z"                                ; Function call
    movsd	xmm1, qword ptr [rip + __real@3e112e0be826d695] # xmm1 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB654_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax]           # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax]           # xmm0 = mem[0],zero ; Load 64-bit double
    ucomisd	xmm0, xmm1
    seta	al
    and	al, 1
    mov	byte ptr [rsp + 71], al
    jmp	.LBB654_5                                      ; Jump instruction
    .LBB654_2:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    subsd	xmm0, qword ptr [rax + 8]                    ; Subtract two doubles
    call	"?abs@@YAOO@Z"                                ; Function call
    movsd	xmm1, qword ptr [rip + __real@3e112e0be826d695] # xmm1 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB654_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax + 8]       # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 8]       # xmm0 = mem[0],zero ; Load 64-bit double
    ucomisd	xmm0, xmm1
    seta	al
    and	al, 1
    mov	byte ptr [rsp + 71], al
    jmp	.LBB654_5                                      ; Jump instruction
    .LBB654_4:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm1, qword ptr [rax + 16]      # xmm1 = mem[0],zero ; Load 64-bit double
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rax + 16]      # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	xmm2, qword ptr [rip + __real@3e112e0be826d695] # xmm2 = [1.0000000000000001E-9,0.0E+0] ; Load 64-bit double
    subsd	xmm0, xmm2                                   ; Subtract two doubles
    ucomisd	xmm0, xmm1
    seta	al
    and	al, 1
    mov	byte ptr [rsp + 71], al
    .LBB654_5:
    mov	al, byte ptr [rsp + 71]
    and	al, 1
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z"
.globl	"?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z" # -- Begin function ?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z
    .p2align	4, 0x90
    "?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z": # @"?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z"
    .seh_proc "?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
.globl	"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ": # @"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ"
.globl	"?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ": # @"?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Throw_tree_length_error@std@@YAXXZ"
.globl	"?_Throw_tree_length_error@std@@YAXXZ" # -- Begin function ?_Throw_tree_length_error@std@@YAXXZ
    .p2align	4, 0x90
    "?_Throw_tree_length_error@std@@YAXXZ": # @"?_Throw_tree_length_error@std@@YAXXZ"
    .seh_proc "?_Throw_tree_length_error@std@@YAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 329406144173384850
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
.globl	"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" # -- Begin function ?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ": # @"?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .seh_proc "?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
.globl	"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" # -- Begin function ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z": # @"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .Lfunc_begin65:
    .seh_proc "??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    .Ltmp536:
    call	"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ" ; Function call
    .Ltmp537:
    jmp	.LBB662_1                                      ; Jump instruction
    .LBB662_1:
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z@4HA"
    .LBB662_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end65:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z":
    .long	.Lfunc_begin65@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp536@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp537@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .section	.text,"xr",discard,"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z"
.globl	"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z" # -- Begin function ??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z
    .p2align	4, 0x90
    "??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z": # @"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z"
    .seh_proc "??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z"
.globl	"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z" # -- Begin function ??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z": # @"??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z"
    .seh_proc "??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
.globl	"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z" # -- Begin function ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z": # @"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .seh_proc "??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ"
.globl	"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ" # -- Begin function ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ": # @"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ"
    .seh_proc "?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	edx, 1
    call	"?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB668_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	r8d, 1
    call	"?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" ; Function call
    .LBB668_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
.globl	"?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z" # -- Begin function ?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z": # @"?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
    .seh_proc "?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    imul	rdx, qword ptr [rsp + 48], 56
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
.globl	"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z" # -- Begin function ??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z
    .p2align	4, 0x90
    "??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z": # @"??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
    .seh_proc "??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
.globl	"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z" # -- Begin function ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z
    .p2align	4, 0x90
    "?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z": # @"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
    .seh_proc "?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
# %bb.0:
    sub	rsp, 32
    .seh_stackalloc 32
    .seh_endprologue
    mov	qword ptr [rsp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    jne	.LBB671_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    .LBB671_2:
    mov	rcx, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    jne	.LBB671_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    jmp	.LBB671_8                                      ; Jump instruction
    .LBB671_4:
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB671_6                                      ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB671_7                                      ; Jump instruction
    .LBB671_6:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    .LBB671_7:
    jmp	.LBB671_8                                      ; Jump instruction
    .LBB671_8:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 32
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
.globl	"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z" # -- Begin function ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z
    .p2align	4, 0x90
    "?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z": # @"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
    .seh_proc "?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
# %bb.0:
    sub	rsp, 32
    .seh_stackalloc 32
    .seh_endprologue
    mov	qword ptr [rsp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    jne	.LBB672_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    .LBB672_2:
    mov	rcx, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    jne	.LBB672_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    jmp	.LBB672_8                                      ; Jump instruction
    .LBB672_4:
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    jne	.LBB672_6                                      ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    jmp	.LBB672_7                                      ; Jump instruction
    .LBB672_6:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB672_7:
    jmp	.LBB672_8                                      ; Jump instruction
    .LBB672_8:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 32
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z"
.globl	"??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z" # -- Begin function ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z": # @"??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z"
    .seh_proc "??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"    ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z"
.globl	"??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z" # -- Begin function ??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z": # @"??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z"
    .seh_proc "??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z"
.globl	"??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z" # -- Begin function ??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z": # @"??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	rax, rdx
    mov	rdx, rcx
    mov	rcx, rdx
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
.globl	"??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z" # -- Begin function ??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z
    .p2align	4, 0x90
    "??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z": # @"??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
    .seh_proc "??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    lea	rcx, [rsp + 64]
    lea	rdx, [rsp + 56]
    call	"??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z" ; Function call
    lea	rcx, [rsp + 64]
    call	"??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z" ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 56]
    call	"??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z" ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], 0                        ; Move 64-bit value
    .LBB676_1:                              # =>This Inner Loop Header: Depth=1
    lea	rcx, [rsp + 48]
    lea	rdx, [rsp + 40]
    call	"??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB676_2                                      ; Jump instruction
    jmp	.LBB676_4                                      ; Jump instruction
    .LBB676_2:                              #   in Loop: Header=BB676_1 Depth=1
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
# %bb.3:                                #   in Loop: Header=BB676_1 Depth=1
    lea	rcx, [rsp + 48]
    call	"??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB676_1                                      ; Jump instruction
    .LBB676_4:
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
.globl	"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z" # -- Begin function ??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z
    .p2align	4, 0x90
    "??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z": # @"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .Lfunc_begin66:
    .seh_proc "??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 144
    .seh_stackalloc 144
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp], r9                            ; Move 64-bit value
    mov	qword ptr [rbp - 8], r8                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    lea	rcx, [rbp - 49]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rbp - 16], 0                        ; Compare values
    je	.LBB677_4                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rbp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 80]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 72]                      ; Move 64-bit value
    .Ltmp538:
    call	"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z" ; Function call
    .Ltmp539:
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB677_2                                      ; Jump instruction
    .LBB677_2:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp - 64], 0                        ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB677_4                                      ; Jump instruction
    .LBB677_4:
    lea	rcx, [rbp - 49]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 144
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0???$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z@4HA":
    .seh_proc "?dtor$3@?0???$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z@4HA"
    .LBB677_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$_Tidy_guard@V?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end66:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z")@IMGREL # IPToStateXData
    .long	136                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0???$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z":
    .long	.Lfunc_begin66@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp538@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp539@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .section	.text,"xr",discard,"?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ"
.globl	"?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ" # -- Begin function ?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ
    .p2align	4, 0x90
    "?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ": # @"?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ"
    .seh_proc "?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAA@PEAU?$_Tree_node@UPoint@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ"
.globl	"?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ" # -- Begin function ?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ
    .p2align	4, 0x90
    "?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ": # @"?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ"
    .seh_proc "?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    xor	eax, eax
# kill: def $rax killed $eax
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
.globl	"??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z" # -- Begin function ??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z
    .p2align	4, 0x90
    "??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z": # @"??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
    .seh_proc "??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
.globl	"??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z" # -- Begin function ??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z": # @"??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
    .seh_proc "??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
.globl	"??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z" # -- Begin function ??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z": # @"??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z" ; Function call
    xor	al, -1
    and	al, 1
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ"
.globl	"??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ": # @"??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    je	.LBB683_7                                       ; Jump instruction
# %bb.1:
    jmp	.LBB683_2                                      ; Jump instruction
    .LBB683_2:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	byte ptr [rcx + 25], 0                         ; Compare values
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    jne	.LBB683_4                                      ; Jump instruction
# %bb.3:                                #   in Loop: Header=BB683_2 Depth=1
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    sete	al
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    .LBB683_4:                              #   in Loop: Header=BB683_2 Depth=1
    mov	al, byte ptr [rsp + 47]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB683_5                                      ; Jump instruction
    jmp	.LBB683_6                                      ; Jump instruction
    .LBB683_5:                              #   in Loop: Header=BB683_2 Depth=1
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB683_2                                      ; Jump instruction
    .LBB683_6:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB683_8                                      ; Jump instruction
    .LBB683_7:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    call	"?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB683_8:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
.globl	"??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z" # -- Begin function ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z
    .p2align	4, 0x90
    "??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z": # @"??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
    .seh_proc "??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    sete	al
    and	al, 1
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z"
.globl	"?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z" # -- Begin function ?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z
    .p2align	4, 0x90
    "?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z": # @"?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z"
    .seh_proc "?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    .LBB685_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    setne	al
    xor	al, -1
    test	al, 1                                         ; Test values
    jne	.LBB685_2                                      ; Jump instruction
    jmp	.LBB685_3                                      ; Jump instruction
    .LBB685_2:                              #   in Loop: Header=BB685_1 Depth=1
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    jmp	.LBB685_1                                      ; Jump instruction
    .LBB685_3:
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
.globl	"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z" # -- Begin function ??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z": # @"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .Lfunc_begin67:
    .seh_proc "??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], r9                       ; Move 64-bit value
    mov	qword ptr [rbp - 40], r8                       ; Move 64-bit value
    lea	rcx, [rbp - 16]
    call	"??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z" ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    lea	rcx, [rbp - 24]
    call	"??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z" ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	byte ptr [rbp - 57], 0
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    lea	rcx, [rbp - 88]
    call	"??0?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@PEAUPoint@@AEAV?$allocator@UPoint@@@1@@Z" ; Function call
    .LBB686_1:                              # =>This Inner Loop Header: Depth=1
    lea	rcx, [rbp - 48]
    lea	rdx, [rbp - 56]
    call	"??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB686_2                                      ; Jump instruction
    jmp	.LBB686_4                                      ; Jump instruction
    .LBB686_2:                              #   in Loop: Header=BB686_1 Depth=1
    lea	rcx, [rbp - 48]
    call	"??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ" ; Function call
    mov	rdx, rax
    .Ltmp540:
    lea	rcx, [rbp - 88]
    call	"??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z" ; Function call
    .Ltmp541:
    jmp	.LBB686_3                                      ; Jump instruction
    .LBB686_3:                              #   in Loop: Header=BB686_1 Depth=1
    lea	rcx, [rbp - 48]
    call	"??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB686_1                                      ; Jump instruction
    .LBB686_4:
    lea	rcx, [rbp - 88]
    call	"?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ" ; Function call
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 88]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0???$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z@4HA":
    .seh_proc "?dtor$5@?0???$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z@4HA"
    .LBB686_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 88]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end67:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$5@?0???$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z":
    .long	.Lfunc_begin67@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp540@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp541@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .section	.text,"xr",discard,"??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
.globl	"??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z" # -- Begin function ??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z": # @"??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
    .seh_proc "??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z"
.globl	"??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z" # -- Begin function ??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z": # @"??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z"
    .seh_proc "??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z" ; Function call
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    call	"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 24
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ"
.globl	"??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ" # -- Begin function ??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ
    .p2align	4, 0x90
    "??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ": # @"??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ"
    .seh_proc "??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rax, 32
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z"
.globl	"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z" # -- Begin function ??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z
    .p2align	4, 0x90
    "??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z": # @"??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z"
    .seh_proc "??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z"
.globl	"??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z" # -- Begin function ??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z
    .p2align	4, 0x90
    "??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z": # @"??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z"
    .seh_proc "??0?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEAA@AEBUCompare@Point@@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 54]
    lea	r9, [rsp + 55]
    call	"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z": # @"??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0AEBUCompare@Point@@U_Zero_then_variadic_args_t@std@@@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBUCompare@Point@@$$QEAU_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	byte ptr [rsp + 87], dl
    mov	qword ptr [rsp + 72], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
.globl	"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ" # -- Begin function ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ
    .p2align	4, 0x90
    "?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ": # @"?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .seh_proc "?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    lea	rax, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    lea	rcx, [rsp + 47]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    lea	rcx, [rsp + 47]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
.globl	"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" # -- Begin function ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z": # @"??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
    .seh_proc "??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ"
.globl	"??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ" # -- Begin function ??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ": # @"??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
.globl	"??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ": # @"??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
.globl	"??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" # -- Begin function ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z": # @"??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .seh_proc "??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	edx, 1
    call	"?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    lea	rdx, [rsp + 40]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, 8
    lea	rdx, [rsp + 40]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, 16
    lea	rdx, [rsp + 40]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	byte ptr [rax + 25], 1
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
.globl	"?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" # -- Begin function ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z": # @"?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
    .seh_proc "?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z"       ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z"
.globl	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z" # -- Begin function ??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z": # @"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z"
    .seh_proc "??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z": # @"??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	byte ptr [rsp + 47], 1
    movabs	rax, 288230376151711743
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    movabs	rax, 288230376151711743
    cmp	qword ptr [rsp + 48], rax                      ; Compare values
    jbe	.LBB700_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB700_2:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rax, 6
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
.globl	"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z" # -- Begin function ??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z
    .p2align	4, 0x90
    "??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z": # @"??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
    .seh_proc "??$?0AEBV?$allocator@H@std@@$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@H@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
.globl	"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z" # -- Begin function ??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z": # @"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .Lfunc_begin68:
    .seh_proc "??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 112
    .seh_stackalloc 112
    lea	rbp, [rsp + 112]
    .seh_setframe rbp, 112
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 72], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 48]                       ; Move 64-bit value
    lea	rcx, [rbp - 49]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rbp - 16], 0                        ; Compare values
    je	.LBB702_4                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp542:
    call	"??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z" ; Function call
    .Ltmp543:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB702_2                                      ; Jump instruction
    .LBB702_2:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp - 64], 0                        ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB702_4                                      ; Jump instruction
    .LBB702_4:
    lea	rcx, [rbp - 49]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 112
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0???$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z@4HA":
    .seh_proc "?dtor$3@?0???$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z@4HA"
    .LBB702_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end68:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z")@IMGREL # IPToStateXData
    .long	104                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0???$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z":
    .long	.Lfunc_begin68@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp542@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp543@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
.globl	"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ": # @"??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ"
.globl	"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ" # -- Begin function ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ": # @"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ"
    .seh_proc "?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
.globl	"?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z": # @"?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB705_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ" ; Function call
    .LBB705_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z"
.globl	"??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z" # -- Begin function ??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z": # @"??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z"
    .seh_proc "??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??$_Unfancy@H@std@@YAPEAHPEAH@Z"             ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    shl	rax, 2
    add	rdx, rax
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z"      ; Function call
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    shl	rcx, 2
    add	rax, rcx
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tidy_guard@V?$vector@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB707_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" ; Function call
    .LBB707_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
.globl	"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ": # @"?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
.globl	"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
    .p2align	4, 0x90
    "?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ": # @"?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
    .seh_proc "?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
.globl	"?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z": # @"?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ" ; Function call
    mov	rcx, rax
    lea	rdx, [rsp + 80]
    call	"??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    shl	rax, 2
    add	rcx, rax
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 4611686018427387903
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ"
.globl	"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ" # -- Begin function ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ": # @"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ"
    .seh_proc "?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z"
.globl	"??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z" # -- Begin function ??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z": # @"??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z"
    .seh_proc "??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"   ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
.globl	"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z" # -- Begin function ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@H@std@@QEAAPEAH_K@Z": # @"?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
    .seh_proc "?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$03@std@@YA_K_K@Z"         ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
.globl	"??$_Get_size_of_n@$03@std@@YA_K_K@Z" # -- Begin function ??$_Get_size_of_n@$03@std@@YA_K_K@Z
    .p2align	4, 0x90
    "??$_Get_size_of_n@$03@std@@YA_K_K@Z":  # @"??$_Get_size_of_n@$03@std@@YA_K_K@Z"
    .seh_proc "??$_Get_size_of_n@$03@std@@YA_K_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	byte ptr [rsp + 47], 1
    movabs	rax, 4611686018427387903
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    movabs	rax, 4611686018427387903
    cmp	qword ptr [rsp + 48], rax                      ; Compare values
    jbe	.LBB717_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_bad_array_new_length@std@@YAXXZ"     ; Function call
    .LBB717_2:
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rax, 2
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy@H@std@@YAPEAHPEAH@Z"
.globl	"??$_Unfancy@H@std@@YAPEAHPEAH@Z" # -- Begin function ??$_Unfancy@H@std@@YAPEAHPEAH@Z
    .p2align	4, 0x90
    "??$_Unfancy@H@std@@YAPEAHPEAH@Z":      # @"??$_Unfancy@H@std@@YAPEAHPEAH@Z"
    .seh_proc "??$_Unfancy@H@std@@YAPEAHPEAH@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z"
.globl	"??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z" # -- Begin function ??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
    .p2align	4, 0x90
    "??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z": # @"??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z"
    .seh_proc "??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 56]
    call	"??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z" ; Function call
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 64]
    call	"??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 40]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    sub	r8, rax
    xor	edx, edx
    call	memset                                        ; Function call
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z"
.globl	"??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z" # -- Begin function ??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z
    .p2align	4, 0x90
    "??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z": # @"??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z"
    .seh_proc "??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
.globl	"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ": # @"?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
    .seh_proc "?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB721_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    sub	r8, rax
    sar	r8, 2
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    .LBB721_2:
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z"
.globl	"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z" # -- Begin function ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z": # @"??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z"
    .seh_proc "??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
.globl	"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z" # -- Begin function ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z": # @"?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
    .seh_proc "?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rdx, 2
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z"
.globl	"??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z" # -- Begin function ??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z": # @"??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z"
    .seh_proc "??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 232
    .seh_stackalloc 232
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 224], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 216], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 208], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 208]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rsp + 216]                      ; Move 64-bit value
    lea	rdx, [rsp + 184]
    call	"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 216]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 200]                     ; Move 64-bit value
    call	"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB724_1                                      ; Jump instruction
    jmp	.LBB724_2                                      ; Jump instruction
    .LBB724_1:
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    lea	rdx, [rsp + 184]
    add	rdx, 16
    mov	byte ptr [rsp + 183], 0
    lea	r8, [rsp + 183]
    call	"??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z" ; Function call
    jmp	.LBB724_3                                      ; Jump instruction
    .LBB724_2:
    mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    call	"?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ" ; Function call
    mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" ; Function call
    mov	qword ptr [rsp + 168], rax                     ; Move 64-bit value
    lea	rcx, [rsp + 143]
    call	"??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ" ; Function call
    mov	rdx, qword ptr [rsp + 216]                     ; Move 64-bit value
    lea	rcx, [rsp + 128]
    call	"??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 168]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" ; Function call
    mov	r8, qword ptr [rsp + 56]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    lea	rcx, [rsp + 144]
    lea	r9, [rip + "?piecewise_construct@std@@3Upiecewise_construct_t@1@B"]
    lea	r10, [rsp + 128]
    lea	rax, [rsp + 143]
    mov	qword ptr [rsp + 32], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z" ; Function call
    lea	rcx, [rsp + 144]
    call	"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ" ; Function call
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 144]
    call	"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 160], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 168]                     ; Move 64-bit value
    mov	r8, qword ptr [rsp + 160]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    lea	rdx, [rsp + 104]
    call	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 120], rax                     ; Move 64-bit value
    mov	byte ptr [rsp + 103], 1
    lea	rdx, [rsp + 120]
    lea	r8, [rsp + 103]
    call	"??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z" ; Function call
    .LBB724_3:
    mov	rax, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 232
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z"
.globl	"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z" # -- Begin function ??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z": # @"??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z"
    .seh_proc "??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 112], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" ; Function call
    mov	rdx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rdx], rax                           ; Move 64-bit value
    mov	dword ptr [rdx + 8], 0                         ; Move 32-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rdx + 16], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rdx]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB725_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    setne	al
    xor	al, -1
    test	al, 1                                         ; Test values
    jne	.LBB725_2                                      ; Jump instruction
    jmp	.LBB725_6                                      ; Jump instruction
    .LBB725_2:                              #   in Loop: Header=BB725_1 Depth=1
    mov	rcx, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    call	"?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rcx, 32
    call	"??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    call	"??RCompare@Point@@QEBA_NAEBU1@0@Z"           ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB725_3                                      ; Jump instruction
    jmp	.LBB725_4                                      ; Jump instruction
    .LBB725_3:                              #   in Loop: Header=BB725_1 Depth=1
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	dword ptr [rax + 8], 0                         ; Move 32-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB725_5                                      ; Jump instruction
    .LBB725_4:                              #   in Loop: Header=BB725_1 Depth=1
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	dword ptr [rax + 8], 1                         ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB725_5:                              #   in Loop: Header=BB725_1 Depth=1
    jmp	.LBB725_1                                      ; Jump instruction
    .LBB725_6:
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z"
.globl	"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z" # -- Begin function ??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z": # @"??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z"
    .seh_proc "??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	byte ptr [rcx + 25], 0                         ; Compare values
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    jne	.LBB726_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rcx, 32
    call	"??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??RCompare@Point@@QEBA_NAEBU1@0@Z"           ; Function call
    xor	al, -1
    mov	byte ptr [rsp + 63], al         # 1-byte Spill
    .LBB726_2:
    mov	al, byte ptr [rsp + 63]         # 1-byte Reload
    and	al, 1
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z"
.globl	"??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z" # -- Begin function ??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z
    .p2align	4, 0x90
    "??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z": # @"??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z"
    .seh_proc "??$?0AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@AEBQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	cl, byte ptr [rcx]
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
.globl	"?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ" # -- Begin function ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ
    .p2align	4, 0x90
    "?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ": # @"?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .seh_proc "?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    call	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    jne	.LBB728_2                                      ; Jump instruction
# %bb.1:
    call	"?_Throw_tree_length_error@std@@YAXXZ"        ; Function call
    .LBB728_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ"
.globl	"??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ" # -- Begin function ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
    .p2align	4, 0x90
    "??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ": # @"??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ"
    .seh_proc "??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z"
.globl	"??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z" # -- Begin function ??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z": # @"??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z"
    .seh_proc "??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
.globl	"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z" # -- Begin function ??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z
    .p2align	4, 0x90
    "??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z": # @"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .Lfunc_begin69:
    .seh_proc "??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	rax, qword ptr [rbp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 16], r9                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    call	"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	r10, qword ptr [rbp + 56]                      ; Move 64-bit value
    mov	r9, qword ptr [rbp + 48]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rdx, 32
    .Ltmp544:
    mov	rax, rsp
    mov	qword ptr [rax + 32], r10                      ; Move 64-bit value
    call	"??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z" ; Function call
    .Ltmp545:
    jmp	.LBB731_1                                      ; Jump instruction
    .LBB731_1:
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    lea	rdx, [rbp - 24]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z" ; Function call
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 8
    lea	rdx, [rbp - 24]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z" ; Function call
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 16
    lea	rdx, [rbp - 24]
    call	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z" ; Function call
    mov	rax, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rcx + 24], 0
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rcx + 25], 0
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z")@IMGREL
    .section	.text,"xr",discard,"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z@4HA":
    .seh_proc "?dtor$2@?0???$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z@4HA"
    .LBB731_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 96]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end69:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z@4HA"@IMGREL # Action
    "$ip2state$??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z":
    .long	.Lfunc_begin69@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp544@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp545@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$?0AEBUpiecewise_construct_t@std@@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .section	.text,"xr",discard,"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ"
.globl	"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ" # -- Begin function ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ
    .p2align	4, 0x90
    "?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ": # @"?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ"
    .seh_proc "?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], 0                        ; Move 64-bit value
    add	rcx, 8
    lea	rdx, [rsp + 40]
    call	"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB733_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 8
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 16
    call	"??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rdx, 32
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z" ; Function call
    .LBB733_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z"
.globl	"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z" # -- Begin function ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z
    .p2align	4, 0x90
    "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z": # @"?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z"
    .seh_proc "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 40], rdx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 1
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rdx]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rdx]                           ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 80]                      ; Compare values
    jne	.LBB734_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    jmp	.LBB734_26                                     ; Jump instruction
    .LBB734_2:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    cmp	dword ptr [rax + 8], 0                         ; Compare values
    jne	.LBB734_6                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rcx + 16], rdx                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    jne	.LBB734_5                                      ; Jump instruction
# %bb.4:
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    .LBB734_5:
    jmp	.LBB734_9                                      ; Jump instruction
    .LBB734_6:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rcx], rdx                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB734_8                                      ; Jump instruction
# %bb.7:
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB734_8:
    jmp	.LBB734_9                                      ; Jump instruction
    .LBB734_9:
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    .LBB734_10:                             # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    movsx	eax, byte ptr [rax + 24]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB734_25                                     ; Jump instruction
# %bb.11:                               #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB734_18                                     ; Jump instruction
# %bb.12:                               #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax + 24]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB734_14                                     ; Jump instruction
# %bb.13:                               #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    jmp	.LBB734_17                                     ; Jump instruction
    .LBB734_14:                             #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    jne	.LBB734_16                                     ; Jump instruction
# %bb.15:                               #   in Loop: Header=BB734_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z" ; Function call
    .LBB734_16:                             #   in Loop: Header=BB734_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z" ; Function call
    .LBB734_17:                             #   in Loop: Header=BB734_10 Depth=1
    jmp	.LBB734_24                                     ; Jump instruction
    .LBB734_18:                             #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax + 24]
    cmp	eax, 0                                         ; Compare values
    jne	.LBB734_20                                     ; Jump instruction
# %bb.19:                               #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    jmp	.LBB734_23                                     ; Jump instruction
    .LBB734_20:                             #   in Loop: Header=BB734_10 Depth=1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB734_22                                     ; Jump instruction
# %bb.21:                               #   in Loop: Header=BB734_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z" ; Function call
    .LBB734_22:                             #   in Loop: Header=BB734_10 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 0
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z" ; Function call
    .LBB734_23:                             #   in Loop: Header=BB734_10 Depth=1
    jmp	.LBB734_24                                     ; Jump instruction
    .LBB734_24:                             #   in Loop: Header=BB734_10 Depth=1
    jmp	.LBB734_10                                     ; Jump instruction
    .LBB734_25:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	byte ptr [rax + 24], 1
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    .LBB734_26:
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z"
.globl	"??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z" # -- Begin function ??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z
    .p2align	4, 0x90
    "??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z": # @"??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z"
    .seh_proc "??$?0PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N$0A@@?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@std@@QEAA@$$QEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@$$QEA_N@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	cl, byte ptr [rcx]
    and	cl, 1
    mov	byte ptr [rax + 8], cl
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
.globl	"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ" # -- Begin function ?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ": # @"?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
    .seh_proc "?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
.globl	"?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ" # -- Begin function ?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ
    .p2align	4, 0x90
    "?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ": # @"?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
    .seh_proc "?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z"
.globl	"??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z" # -- Begin function ??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z
    .p2align	4, 0x90
    "??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z": # @"??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z"
    .seh_proc "??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
.globl	"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ": # @"?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ"
.globl	"?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ": # @"?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 288230376151711743
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
.globl	"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" # -- Begin function ?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ": # @"?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .seh_proc "?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
.globl	"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z" # -- Begin function ??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z": # @"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .Lfunc_begin70:
    .seh_proc "??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 80
    .seh_stackalloc 80
    lea	rbp, [rsp + 80]
    .seh_setframe rbp, 80
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    mov	dl, byte ptr [rbp - 25]
    .Ltmp546:
    call	"??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z" ; Function call
    .Ltmp547:
    jmp	.LBB744_1                                      ; Jump instruction
    .LBB744_1:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 80
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z")@IMGREL
    .section	.text,"xr",discard,"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z@4HA":
    .seh_proc "?dtor$2@?0???$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z@4HA"
    .LBB744_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 80]
    .seh_endprologue
    call	__std_terminate                               ; Function call
    int3
    .Lfunc_end70:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z")@IMGREL # IPToStateXData
    .long	72                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z@4HA"@IMGREL # Action
    "$ip2state$??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z":
    .long	.Lfunc_begin70@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp546@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp547@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$?0AEBUPoint@@$0A@@?$tuple@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .section	.text,"xr",discard,"??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z"
.globl	"??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z" # -- Begin function ??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z": # @"??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z"
    .seh_proc "??$?0U_Exact_args_t@std@@AEBUPoint@@$$V$0A@@?$tuple@AEBUPoint@@@std@@QEAA@U_Exact_args_t@1@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z"
.globl	"??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z" # -- Begin function ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z
    .p2align	4, 0x90
    "??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z": # @"??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z"
    .seh_proc "??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QEAA@U_Exact_args_t@1@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	byte ptr [rsp + 15], dl
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
.globl	"??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z" # -- Begin function ??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z
    .p2align	4, 0x90
    "??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z": # @"??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
    .seh_proc "??$?0AEBUPoint@@@?$_Tuple_val@AEBUPoint@@@std@@QEAA@AEBUPoint@@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
.globl	"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" # -- Begin function ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z": # @"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .Lfunc_begin71:
    .seh_proc "??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 64
    .seh_stackalloc 64
    lea	rbp, [rsp + 64]
    .seh_setframe rbp, 64
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    call	"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    .Ltmp548:
    call	"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ" ; Function call
    .Ltmp549:
    jmp	.LBB748_1                                      ; Jump instruction
    .LBB748_1:
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 64
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z")@IMGREL
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$2@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z@4HA":
    .seh_proc "?dtor$2@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z@4HA"
    .LBB748_2:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 64]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    call	"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end71:
    .seh_handlerdata
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .p2align	2, 0x0
    "$cppxdata$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z")@IMGREL # IPToStateXData
    .long	56                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z":
    .long	-1                              # ToState
    .long	"?dtor$2@?0???0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z@4HA"@IMGREL # Action
    "$ip2state$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z":
    .long	.Lfunc_begin71@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp548@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp549@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .section	.text,"xr",discard,"??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
.globl	"??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z" # -- Begin function ??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z
    .p2align	4, 0x90
    "??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z": # @"??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .seh_proc "??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 144]                     ; Move 64-bit value
    lea	rcx, [rsp + 71]
    call	"??0?$tuple@$$V@std@@QEAA@AEBV01@@Z"          ; Function call
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    lea	rcx, [rsp + 56]
    call	"??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    lea	r8, [rsp + 56]
    lea	r9, [rsp + 71]
    call	"??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z" ; Function call
    nop
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z"
.globl	"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z" # -- Begin function ??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z
    .p2align	4, 0x90
    "??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z": # @"??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z"
    .seh_proc "??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
.globl	"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z" # -- Begin function ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z": # @"??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .seh_proc "??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ"
.globl	"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ" # -- Begin function ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ
    .p2align	4, 0x90
    "?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ": # @"?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ"
    .seh_proc "?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	edx, 1
    call	"?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB754_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	r8d, 1
    call	"?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" ; Function call
    .LBB754_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
.globl	"?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z" # -- Begin function ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z": # @"?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
    .seh_proc "?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    shl	rdx, 6
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$tuple@$$V@std@@QEAA@AEBV01@@Z"
.globl	"??0?$tuple@$$V@std@@QEAA@AEBV01@@Z" # -- Begin function ??0?$tuple@$$V@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0?$tuple@$$V@std@@QEAA@AEBV01@@Z":   # @"??0?$tuple@$$V@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0?$tuple@$$V@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z"
.globl	"??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z" # -- Begin function ??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z
    .p2align	4, 0x90
    "??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z": # @"??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z"
    .seh_proc "??0?$tuple@AEBUPoint@@@std@@QEAA@$$QEAV01@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0?$tuple@$$V@std@@QEAA@AEBV01@@Z"          ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z"
.globl	"??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z" # -- Begin function ??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z
    .p2align	4, 0x90
    "??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z": # @"??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z"
    .seh_proc "??$?0AEBUPoint@@$$Z$$V@?$pair@$$CBUPoint@@H@std@@QEAA@Upiecewise_construct_t@1@V?$tuple@AEBUPoint@@@1@V?$tuple@$$V@1@@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 40], r9        # 8-byte Spill ; Move 64-bit value
    mov	rax, r8
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	al, dl
    mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rsp + 103], al
    mov	qword ptr [rsp + 88], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	r9b, byte ptr [rsp + 70]
    mov	al, byte ptr [rsp + 71]
    mov	byte ptr [rsp + 32], al
    call	"??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z"
.globl	"??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z" # -- Begin function ??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z
    .p2align	4, 0x90
    "??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z": # @"??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z"
    .seh_proc "??$?0V?$tuple@AEBUPoint@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBUPoint@@H@std@@QEAA@AEAV?$tuple@AEBUPoint@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	al, byte ptr [rsp + 112]
    mov	byte ptr [rsp + 71], r9b
    mov	byte ptr [rsp + 70], al
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rax], rdx                           ; Move 64-bit value
    mov	rdx, qword ptr [rcx + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	dword ptr [rax + 24], 0                        ; Move 32-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z"
.globl	"??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z" # -- Begin function ??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z
    .p2align	4, 0x90
    "??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z": # @"??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z"
    .seh_proc "??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
.globl	"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z" # -- Begin function ??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z
    .p2align	4, 0x90
    "??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z": # @"??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
    .seh_proc "??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp], rax                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
.globl	"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z" # -- Begin function ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z
    .p2align	4, 0x90
    "?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z": # @"?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
    .seh_proc "?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
# %bb.0:
    sub	rsp, 32
    .seh_stackalloc 32
    .seh_endprologue
    mov	qword ptr [rsp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    jne	.LBB762_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    .LBB762_2:
    mov	rcx, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    jne	.LBB762_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    jmp	.LBB762_8                                      ; Jump instruction
    .LBB762_4:
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx]                           ; Compare values
    jne	.LBB762_6                                      ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB762_7                                      ; Jump instruction
    .LBB762_6:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    .LBB762_7:
    jmp	.LBB762_8                                      ; Jump instruction
    .LBB762_8:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 32
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
.globl	"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z" # -- Begin function ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z
    .p2align	4, 0x90
    "?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z": # @"?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
    .seh_proc "?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
# %bb.0:
    sub	rsp, 32
    .seh_stackalloc 32
    .seh_endprologue
    mov	qword ptr [rsp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp], rax            # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    cmp	byte ptr [rax + 25], 0                         ; Compare values
    jne	.LBB763_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    .LBB763_2:
    mov	rcx, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rdx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 8]                       ; Compare values
    jne	.LBB763_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp]            # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    jmp	.LBB763_8                                      ; Jump instruction
    .LBB763_4:
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 8]                       ; Move 64-bit value
    cmp	rax, qword ptr [rcx + 16]                      ; Compare values
    jne	.LBB763_6                                      ; Jump instruction
# %bb.5:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    jmp	.LBB763_7                                      ; Jump instruction
    .LBB763_6:
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    .LBB763_7:
    jmp	.LBB763_8                                      ; Jump instruction
    .LBB763_8:
    mov	rcx, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 32
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z"
.globl	"??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z" # -- Begin function ??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z
    .p2align	4, 0x90
    "??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z": # @"??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z"
    .seh_proc "??$?0AEBV?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@O@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
.globl	"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z" # -- Begin function ??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z
    .p2align	4, 0x90
    "??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z": # @"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .Lfunc_begin72:
    .seh_proc "??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rbp - 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    lea	rcx, [rbp - 57]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rbp - 24], 0                        ; Compare values
    je	.LBB765_4                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp - 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp550:
    call	"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z" ; Function call
    .Ltmp551:
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB765_2                                      ; Jump instruction
    .LBB765_2:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp - 72], 0                        ; Move 64-bit value
    lea	rcx, [rbp - 72]
    call	"??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB765_4                                      ; Jump instruction
    .LBB765_4:
    lea	rcx, [rbp - 57]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0???$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z@4HA":
    .seh_proc "?dtor$3@?0???$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z@4HA"
    .LBB765_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 72]
    call	"??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end72:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0???$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z":
    .long	.Lfunc_begin72@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp550@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp551@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .section	.text,"xr",discard,"?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
.globl	"?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z": # @"?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB766_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ" ; Function call
    .LBB766_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
.globl	"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z" # -- Begin function ??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z": # @"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .Lfunc_begin73:
    .seh_proc "??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 112
    .seh_stackalloc 112
    lea	rbp, [rsp + 112]
    .seh_setframe rbp, 112
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 24], r9                       ; Move 64-bit value
    mov	qword ptr [rbp - 32], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    call	"??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z"      ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB767_1                                      ; Jump instruction
    jmp	.LBB767_2                                      ; Jump instruction
    .LBB767_1:
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 48]                      ; Move 64-bit value
    call	"??$_Unfancy@O@std@@YAPEAOPEAO@Z"             ; Function call
    mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z"  ; Function call
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 40]                      ; Move 64-bit value
    shl	rcx, 3
    add	rax, rcx
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    jmp	.LBB767_8                                      ; Jump instruction
    .LBB767_2:
    mov	rdx, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 24]                       ; Move 64-bit value
    lea	rcx, [rbp - 72]
    call	"??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z" ; Function call
    .LBB767_3:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rbp - 40]                      ; Compare values
    jae	.LBB767_6                                      ; Jump instruction
# %bb.4:                                #   in Loop: Header=BB767_3 Depth=1
    mov	rdx, qword ptr [rbp - 32]                      ; Move 64-bit value
    .Ltmp552:
    lea	rcx, [rbp - 72]
    call	"??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z" ; Function call
    .Ltmp553:
    jmp	.LBB767_5                                      ; Jump instruction
    .LBB767_5:                              #   in Loop: Header=BB767_3 Depth=1
    mov	rax, qword ptr [rbp - 40]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    jmp	.LBB767_3                                      ; Jump instruction
    .LBB767_6:
    lea	rcx, [rbp - 72]
    call	"?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ" ; Function call
    mov	qword ptr [rbp - 16], rax                      ; Move 64-bit value
    lea	rcx, [rbp - 72]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB767_8                                      ; Jump instruction
    .LBB767_8:
    mov	rax, qword ptr [rbp - 16]                      ; Move 64-bit value
    add	rsp, 112
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$7@?0???$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z@4HA":
    .seh_proc "?dtor$7@?0???$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z@4HA"
    .LBB767_7:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    lea	rcx, [rbp - 72]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end73:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z")@IMGREL # IPToStateXData
    .long	104                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$7@?0???$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z":
    .long	.Lfunc_begin73@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp552@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp553@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .section	.text,"xr",discard,"??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB768_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ" ; Function call
    .LBB768_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
.globl	"?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z": # @"?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	rcx, rax
    lea	rdx, [rsp + 80]
    call	"??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    shl	rax, 3
    add	rcx, rax
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z"
.globl	"??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z" # -- Begin function ??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z
    .p2align	4, 0x90
    "??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z": # @"??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z"
    .seh_proc "??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    xorps	xmm0, xmm0
    movsd	qword ptr [rsp], xmm0                        ; Load 64-bit double
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp]                           ; Move 64-bit value
    sub	rax, rcx
    setne	al
    movzx	eax, al
    cmp	eax, 0                                         ; Compare values
    sete	al
    and	al, 1
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z"
.globl	"??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z" # -- Begin function ??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z
    .p2align	4, 0x90
    "??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z": # @"??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z"
    .seh_proc "??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    lea	rcx, [rsp + 40]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	rcx, rax
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    shl	r8, 3
    xor	edx, edx
    call	memset                                        ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z"
.globl	"??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z" # -- Begin function ??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z
    .p2align	4, 0x90
    "??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z": # @"??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z"
    .seh_proc "??0?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@PEAOAEAV?$allocator@O@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z"
.globl	"??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z" # -- Begin function ??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z
    .p2align	4, 0x90
    "??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z": # @"??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z"
    .seh_proc "??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??$_Unfancy@O@std@@YAPEAOPEAO@Z"             ; Function call
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    call	"??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 8
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ"
.globl	"?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ" # -- Begin function ?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ
    .p2align	4, 0x90
    "?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ": # @"?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ"
    .seh_proc "?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ"
.globl	"??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ": # @"??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	r8, qword ptr [rax + 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z"
.globl	"??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z" # -- Begin function ??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z
    .p2align	4, 0x90
    "??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z": # @"??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z"
    .seh_proc "??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rcx]           # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rax], xmm0                        ; Load 64-bit double
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
.globl	"??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" # -- Begin function ??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z
    .p2align	4, 0x90
    "??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z": # @"??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
    .seh_proc "??$?0AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
.globl	"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z" # -- Begin function ??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z
    .p2align	4, 0x90
    "??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z": # @"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .Lfunc_begin74:
    .seh_proc "??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rbp - 48], rcx                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 56]                       ; Move 64-bit value
    lea	rcx, [rbp - 57]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rbp - 24], 0                        ; Compare values
    je	.LBB778_4                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rbp - 40]                       ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    .Ltmp554:
    call	"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z" ; Function call
    .Ltmp555:
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB778_2                                      ; Jump instruction
    .LBB778_2:
    mov	rcx, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp - 72], 0                        ; Move 64-bit value
    lea	rcx, [rbp - 72]
    call	"??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ" ; Function call
    jmp	.LBB778_4                                      ; Jump instruction
    .LBB778_4:
    lea	rcx, [rbp - 57]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0???$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z@4HA":
    .seh_proc "?dtor$3@?0???$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z@4HA"
    .LBB778_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 72]
    call	"??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end74:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0???$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z":
    .long	.Lfunc_begin74@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp554@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp555@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .section	.text,"xr",discard,"??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ"
.globl	"??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ": # @"??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??0?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	qword ptr [rax + 8], 0                         ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
.globl	"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" # -- Begin function ?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ": # @"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .seh_proc "?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
.globl	"?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z": # @"?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    call	"?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    jbe	.LBB781_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ" ; Function call
    .LBB781_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
.globl	"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z" # -- Begin function ??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z": # @"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .Lfunc_begin75:
    .seh_proc "??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 112
    .seh_stackalloc 112
    lea	rbp, [rsp + 112]
    .seh_setframe rbp, 112
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], r9                       ; Move 64-bit value
    mov	qword ptr [rbp - 24], r8                       ; Move 64-bit value
    mov	qword ptr [rbp - 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp - 40], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]                       ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" ; Function call
    .LBB782_1:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rbp - 32]                      ; Compare values
    jae	.LBB782_4                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB782_1 Depth=1
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    .Ltmp556:
    lea	rcx, [rbp - 64]
    call	"??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z" ; Function call
    .Ltmp557:
    jmp	.LBB782_3                                      ; Jump instruction
    .LBB782_3:                              #   in Loop: Header=BB782_1 Depth=1
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    jmp	.LBB782_1                                      ; Jump instruction
    .LBB782_4:
    lea	rcx, [rbp - 64]
    call	"?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ" ; Function call
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 112
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0???$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z@4HA":
    .seh_proc "?dtor$5@?0???$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z@4HA"
    .LBB782_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 112]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end75:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z")@IMGREL # IPToStateXData
    .long	104                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$5@?0???$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z":
    .long	.Lfunc_begin75@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp556@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp557@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .section	.text,"xr",discard,"??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ": # @"??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Tidy_guard@V?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB783_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ" ; Function call
    .LBB783_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ"
.globl	"?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ" # -- Begin function ?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ
    .p2align	4, 0x90
    "?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ": # @"?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ"
    .seh_proc "?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, rax
    call	"?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"??$_Max_limit@_J@std@@YA_JXZ"                ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 32]
    lea	rdx, [rsp + 40]
    call	"??$min@_K@std@@YAAEB_KAEB_K0@Z"              ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ"
.globl	"?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ" # -- Begin function ?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ
    .p2align	4, 0x90
    "?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ": # @"?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ"
    .seh_proc "?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"]
    call	"?_Xlength_error@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
.globl	"?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z" # -- Begin function ?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z": # @"?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
    .seh_proc "?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, rax
    lea	rdx, [rsp + 80]
    call	"??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    imul	rax, qword ptr [rsp + 80], 24
    add	rcx, rax
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z"
.globl	"?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z" # -- Begin function ?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z
    .p2align	4, 0x90
    "?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z": # @"?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z"
    .seh_proc "?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    movabs	rax, 768614336404564650
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
.globl	"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" # -- Begin function ?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ": # @"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .seh_proc "?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
.globl	"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" # -- Begin function ?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ
    .p2align	4, 0x90
    "?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ": # @"?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .seh_proc "?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z"
.globl	"??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z" # -- Begin function ??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z
    .p2align	4, 0x90
    "??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z": # @"??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z"
    .seh_proc "??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
.globl	"?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z" # -- Begin function ?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z
    .p2align	4, 0x90
    "?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z": # @"?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
    .seh_proc "?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z"       ; Function call
    mov	rcx, rax
    call	"??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
.globl	"??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z" # -- Begin function ??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z": # @"??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
    .seh_proc "??0?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@PEAV?$vector@OV?$allocator@O@std@@@1@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
.globl	"??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z" # -- Begin function ??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z
    .p2align	4, 0x90
    "??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z": # @"??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .seh_proc "??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    call	"??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z" ; Function call
    mov	r8, qword ptr [rsp + 40]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 16]                      ; Move 64-bit value
    call	"??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z" ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    add	rcx, 24
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ"
.globl	"?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ" # -- Begin function ?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ
    .p2align	4, 0x90
    "?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ": # @"?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ"
    .seh_proc "?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ"
.globl	"??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ" # -- Begin function ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ": # @"??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ"
    .seh_proc "??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	r8, qword ptr [rax + 16]                       ; Move 64-bit value
    mov	rdx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z" ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z"
.globl	"??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z" # -- Begin function ??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z
    .p2align	4, 0x90
    "??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z": # @"??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z"
    .seh_proc "??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z"
.globl	"??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z" # -- Begin function ??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z
    .p2align	4, 0x90
    "??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z": # @"??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z"
    .seh_proc "??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z"
.globl	"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z" # -- Begin function ??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z
    .p2align	4, 0x90
    "??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z": # @"??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z"
    .seh_proc "??0?$vector@OV?$allocator@O@std@@@std@@QEAA@AEBV01@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ" ; Function call
    mov	rdx, rax
    lea	rcx, [rsp + 71]
    call	"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	dl, byte ptr [rsp + 70]
    lea	r8, [rsp + 71]
    call	"??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    sar	rax, 3
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rsp + 56]                       ; Move 64-bit value
    add	r9, 8
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z"
.globl	"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z" # -- Begin function ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z
    .p2align	4, 0x90
    "?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z": # @"?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z"
    .seh_proc "?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	rax, rcx
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rsp], rdx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z"
.globl	"??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z" # -- Begin function ??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z
    .p2align	4, 0x90
    "??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z": # @"??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z"
    .seh_proc "??$?0V?$allocator@O@std@@$$V@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@O@1@@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$_Vector_val@U?$_Simple_types@O@std@@@std@@QEAA@XZ" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z"
.globl	"??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z" # -- Begin function ??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z
    .p2align	4, 0x90
    "??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z": # @"??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z"
    .seh_proc "??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z"
# %bb.0:
    sub	rsp, 120
    .seh_stackalloc 120
    .seh_endprologue
    mov	qword ptr [rsp + 112], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    lea	rcx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    lea	rcx, [rsp + 63]
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z" ; Function call
    cmp	qword ptr [rsp + 96], 0                        ; Compare values
    je	.LBB802_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], 0                        ; Move 64-bit value
    lea	rcx, [rsp + 48]
    call	"??1?$_Tidy_guard@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAA@XZ" ; Function call
    .LBB802_2:
    lea	rcx, [rsp + 63]
    call	"?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ" ; Function call
    nop
    add	rsp, 120
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z"
.globl	"??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z" # -- Begin function ??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z
    .p2align	4, 0x90
    "??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z": # @"??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z"
    .seh_proc "??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	qword ptr [rsp + 128], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 112], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    lea	rcx, [rsp + 104]
    call	"??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    call	"??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z" ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	byte ptr [rsp + 87], 1
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    call	"??$_Unfancy@O@std@@YAPEAOPEAO@Z"             ; Function call
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 88]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	qword ptr [rsp + 40], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rsp + 96]
    call	"??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z" ; Function call
    mov	rdx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    call	"??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    sub	rax, rcx
    sar	rax, 3
    shl	rax, 3
    add	rax, qword ptr [rsp + 120]
    mov	qword ptr [rsp + 120], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z"
.globl	"??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z" # -- Begin function ??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z
    .p2align	4, 0x90
    "??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z": # @"??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z"
    .seh_proc "??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
.globl	"??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z" # -- Begin function ??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z
    .p2align	4, 0x90
    "??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z": # @"??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .seh_proc "??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    .LBB805_1:                              # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 40]                      ; Compare values
    je	.LBB805_3                                       ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB805_1 Depth=1
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z" ; Function call
    mov	rdx, rax
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    add	rax, 24
    mov	qword ptr [rsp + 32], rax                      ; Move 64-bit value
    jmp	.LBB805_1                                      ; Jump instruction
    .LBB805_3:
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z"
.globl	"??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z" # -- Begin function ??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z
    .p2align	4, 0x90
    "??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z": # @"??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z"
    .seh_proc "??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??1?$vector@OV?$allocator@O@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ"
.globl	"?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ" # -- Begin function ?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ": # @"?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ"
    .seh_proc "?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 80], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 8
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, 16
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB807_2                                       ; Jump instruction
# %bb.1:
    mov	r8, qword ptr [rsp + 72]                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rcx, qword ptr [rax]                           ; Move 64-bit value
    call	"??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rdx]                           ; Move 64-bit value
    sub	rax, rdx
    mov	r8d, 24
    cqo
    idiv	r8
    mov	r8, rax
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rdx, qword ptr [rax]                           ; Move 64-bit value
    call	"?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax], 0                             ; Move 64-bit value
    .LBB807_2:
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
.globl	"?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z" # -- Begin function ?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z
    .p2align	4, 0x90
    "?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z": # @"?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
    .seh_proc "?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    imul	rdx, qword ptr [rsp + 48], 24
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"       ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?width@ios_base@std@@QEBA_JXZ"
.globl	"?width@ios_base@std@@QEBA_JXZ" # -- Begin function ?width@ios_base@std@@QEBA_JXZ
    .p2align	4, 0x90
    "?width@ios_base@std@@QEBA_JXZ":        # @"?width@ios_base@std@@QEBA_JXZ"
    .seh_proc "?width@ios_base@std@@QEBA_JXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 40]                      ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z"
.globl	"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z" # -- Begin function ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
    .p2align	4, 0x90
    "?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z": # @"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z"
    .seh_proc "?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ" ; Function call
    mov	rcx, rax
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, rcx                                       ; Compare values
    jge	.LBB810_2                                      ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	al, byte ptr [rsp + 71]
    mov	byte ptr [rsp + 43], al         # 1-byte Spill
    call	"?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ" ; Function call
    mov	cl, byte ptr [rsp + 43]         # 1-byte Reload
    mov	byte ptr [rax], cl
    call	"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z" ; Function call
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB810_3                                      ; Jump instruction
    .LBB810_2:
    mov	cl, byte ptr [rsp + 71]
    call	"?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z" ; Function call
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	edx, eax
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 24]                          ; Function call
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    .LBB810_3:
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ"
.globl	"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ" # -- Begin function ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
    .p2align	4, 0x90
    "?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ": # @"?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ"
    .seh_proc "?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	al, byte ptr [rax + 88]
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z"
.globl	"?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z" # -- Begin function ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
    .p2align	4, 0x90
    "?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z": # @"?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z"
    .seh_proc "?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 40], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 72]                          ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?width@ios_base@std@@QEAA_J_J@Z"
.globl	"?width@ios_base@std@@QEAA_J_J@Z" # -- Begin function ?width@ios_base@std@@QEAA_J_J@Z
    .p2align	4, 0x90
    "?width@ios_base@std@@QEAA_J_J@Z":      # @"?width@ios_base@std@@QEAA_J_J@Z"
    .seh_proc "?width@ios_base@std@@QEAA_J_J@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, qword ptr [rax + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rax + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
.globl	"?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ" # -- Begin function ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
    .p2align	4, 0x90
    "?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ": # @"?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
    .seh_proc "?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax        # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rax + 64]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    je	.LBB814_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rax + 88]                      ; Move 64-bit value
    mov	eax, dword ptr [rax]                           ; Move 32-bit value
    mov	dword ptr [rsp + 4], eax        # 4-byte Spill ; Move 32-bit value
    jmp	.LBB814_3                                      ; Jump instruction
    .LBB814_2:
    xor	eax, eax
    mov	dword ptr [rsp + 4], eax        # 4-byte Spill ; Move 32-bit value
    jmp	.LBB814_3                                      ; Jump instruction
    .LBB814_3:
    mov	eax, dword ptr [rsp + 4]        # 4-byte Reload ; Move 32-bit value
    cdqe
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
.globl	"?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ" # -- Begin function ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
    .p2align	4, 0x90
    "?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ": # @"?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
    .seh_proc "?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rcx, qword ptr [rax + 88]                      ; Move 64-bit value
    mov	edx, dword ptr [rcx]                           ; Move 32-bit value
    add	edx, -1
    mov	dword ptr [rcx], edx                           ; Move 32-bit value
    mov	rcx, qword ptr [rax + 64]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rcx], rdx                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
.globl	"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z" # -- Begin function ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
    .p2align	4, 0x90
    "??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z": # @"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .Lfunc_begin76:
    .seh_proc "??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 128
    .seh_stackalloc 128
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	qword ptr [rbp - 16], rcx                      ; Move 64-bit value
    lea	rcx, [rbp - 20]
    xor	edx, edx
    call	"??0_Lockit@std@@QEAA@H@Z"                    ; Function call
    mov	rax, qword ptr [rip + "?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"] ; Move 64-bit value
    mov	qword ptr [rbp - 32], rax                      ; Move 64-bit value
    lea	rcx, [rip + "?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"]
    call	"??Bid@locale@std@@QEAA_KXZ"                  ; Function call
    mov	qword ptr [rbp - 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 16]                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 40]                      ; Move 64-bit value
    .Ltmp558:
    call	"?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z" ; Function call
    .Ltmp559:
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB816_1                                      ; Jump instruction
    .LBB816_1:
    mov	rax, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    cmp	qword ptr [rbp - 48], 0                        ; Compare values
    jne	.LBB816_12                                     ; Jump instruction
# %bb.2:
    cmp	qword ptr [rbp - 32], 0                        ; Compare values
    je	.LBB816_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    jmp	.LBB816_11                                     ; Jump instruction
    .LBB816_4:
    mov	rdx, qword ptr [rbp - 16]                      ; Move 64-bit value
    .Ltmp560:
    lea	rcx, [rbp - 32]
    call	"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" ; Function call
    .Ltmp561:
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB816_5                                      ; Jump instruction
    .LBB816_5:
    mov	rax, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, -1                                        ; Compare values
    jne	.LBB816_8                                      ; Jump instruction
# %bb.6:
    .Ltmp564:
    call	"?_Throw_bad_cast@std@@YAXXZ"                 ; Function call
    .Ltmp565:
    jmp	.LBB816_7                                      ; Jump instruction
    .LBB816_7:
    .LBB816_8:
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 56]                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z" ; Function call
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    .Ltmp562:
    call	"?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z" ; Function call
    .Ltmp563:
    jmp	.LBB816_9                                      ; Jump instruction
    .LBB816_9:
    mov	rcx, qword ptr [rbp - 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 8]                           ; Function call
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rip + "?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"], rax ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]                      ; Move 64-bit value
    mov	qword ptr [rbp - 48], rax                      ; Move 64-bit value
    lea	rcx, [rbp - 64]
    call	"?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ" ; Function call
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB816_11                                     ; Jump instruction
    .LBB816_11:
    jmp	.LBB816_12                                     ; Jump instruction
    .LBB816_12:
    mov	rax, qword ptr [rbp - 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 88], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    mov	rax, qword ptr [rbp - 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 128
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z")@IMGREL
    .section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$10@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$10@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"
    .LBB816_10:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 64]
    call	"??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA":
    .seh_proc "?dtor$13@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"
    .LBB816_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 20]
    call	"??1_Lockit@std@@QEAA@XZ"                     ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end76:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .p2align	2, 0x0
    "$cppxdata$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z")@IMGREL # IPToStateXData
    .long	120                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$10@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA"@IMGREL # Action
    "$ip2state$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z":
    .long	.Lfunc_begin76@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp558@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp562@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp563@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .section	.text,"xr",discard,"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
.globl	"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z" # -- Begin function ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
    .p2align	4, 0x90
    "?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z": # @"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
    .seh_proc "?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	eax, dword ptr [rsp + 152]                     ; Move 32-bit value
    mov	al, byte ptr [rsp + 144]
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	r10d, dword ptr [rsp + 152]                    ; Move 32-bit value
    mov	r11b, byte ptr [rsp + 144]
    mov	r9, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rax, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    lea	r8, [rsp + 56]
    mov	byte ptr [rsp + 32], r11b
    mov	dword ptr [rsp + 40], r10d                     ; Move 32-bit value
    call	qword ptr [rax + 72]                          ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z"
.globl	"??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z" # -- Begin function ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
    .p2align	4, 0x90
    "??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z": # @"??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z"
    .seh_proc "??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	rcx, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
.globl	"?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ" # -- Begin function ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ
    .p2align	4, 0x90
    "?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ": # @"?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
    .seh_proc "?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	al, byte ptr [rax]
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
.globl	"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z" # -- Begin function ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
    .p2align	4, 0x90
    "?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z": # @"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .Lfunc_begin77:
    .seh_proc "?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 176
    .seh_stackalloc 176
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 40], -2                       ; Move 64-bit value
    mov	qword ptr [rbp + 32], rdx                      ; Move 64-bit value
    mov	qword ptr [rbp + 24], rcx                      ; Move 64-bit value
    cmp	qword ptr [rbp + 24], 0                        ; Compare values
    je	.LBB820_9                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    cmp	qword ptr [rax], 0                             ; Compare values
    jne	.LBB820_9                                      ; Jump instruction
# %bb.2:
    mov	ecx, 16
    call	"??2@YAPEAX_K@Z"                              ; Function call
    mov	qword ptr [rbp - 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	byte ptr [rbp - 81], 1
    mov	rcx, qword ptr [rbp + 32]                      ; Move 64-bit value
    call	"?_C_str@locale@std@@QEBAPEBDXZ"              ; Function call
    mov	rdx, rax
    .Ltmp566:
    lea	rcx, [rbp - 80]
    call	"??0_Locinfo@std@@QEAA@PEBD@Z"                ; Function call
    .Ltmp567:
    jmp	.LBB820_3                                      ; Jump instruction
    .LBB820_3:
    .Ltmp568:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    xor	eax, eax
    mov	r8d, eax
    lea	rdx, [rbp - 80]
    call	"??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z" ; Function call
    .Ltmp569:
    jmp	.LBB820_4                                      ; Jump instruction
    .LBB820_4:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rbp - 81], 0
    mov	rax, qword ptr [rbp + 24]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    jmp	.LBB820_9                                      ; Jump instruction
    .LBB820_9:
    mov	eax, 4
    add	rsp, 176
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL
    .section	.text,"xr",discard,"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$5@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$5@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB820_5:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp - 80]
    call	"??1_Locinfo@std@@QEAA@XZ"                    ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA":
    .seh_proc "?dtor$6@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"
    .LBB820_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 128]
    .seh_endprologue
    test	byte ptr [rbp - 81], 1                        ; Test values
    jne	.LBB820_7                                      ; Jump instruction
    jmp	.LBB820_8                                      ; Jump instruction
    .LBB820_7:
    mov	rcx, qword ptr [rbp - 96]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB820_8:
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end77:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z")@IMGREL # IPToStateXData
    .long	168                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	-1                              # ToState
    .long	"?dtor$6@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	"?dtor$5@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA"@IMGREL # Action
    "$ip2state$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z":
    .long	.Lfunc_begin77@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp566@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp568@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp569@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .section	.text,"xr",discard,"??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z"
.globl	"??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z" # -- Begin function ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
    .p2align	4, 0x90
    "??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z": # @"??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z"
    .seh_proc "??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    call	"??0facet@locale@std@@IEAA@_K@Z"              ; Function call
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    lea	rax, [rip + "??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"]
    mov	qword ptr [rcx], rax                           ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
.globl	"?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z" # -- Begin function ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z
    .p2align	4, 0x90
    "?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z": # @"?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
    .seh_proc "?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
.globl	"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z" # -- Begin function ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
    .p2align	4, 0x90
    "??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z": # @"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
    .seh_proc "??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	dword ptr [rsp + 60], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ" ; Function call
    mov	eax, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    cmp	eax, 0                                         ; Compare values
    je	.LBB823_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	edx, 16
    call	"??3@YAXPEAX_K@Z"                             ; Function call
    .LBB823_2:
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z"
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 208
    .seh_stackalloc 208
    .seh_endprologue
    mov	qword ptr [rsp + 64], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 80], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 88], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 264]                     ; Move 64-bit value
    mov	al, byte ptr [rsp + 256]
    mov	qword ptr [rsp + 200], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 192], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 184], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 176], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	r9, qword ptr [rsp + 264]                      ; Move 64-bit value
    lea	rcx, [rsp + 112]
    lea	r8, [rip + "??_C@_02BBAHNLBA@?$CFp?$AA@"]
    mov	edx, 64
    call	sprintf_s                                     ; Function call
    mov	r8, qword ptr [rsp + 64]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    cdqe
    lea	r10, [rsp + 112]
    mov	r11b, byte ptr [rsp + 256]
    mov	r9, qword ptr [rsp + 192]                      ; Move 64-bit value
    mov	rsi, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 96], rsi                      ; Move 64-bit value
    mov	r8, qword ptr [r8 + 8]                         ; Move 64-bit value
    mov	qword ptr [rsp + 104], r8                      ; Move 64-bit value
    lea	r8, [rsp + 96]
    mov	byte ptr [rsp + 32], r11b
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 208
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
.globl	__real@4202a05f20000000         # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
    .section	.rdata,"dr",discard,__real@4202a05f20000000
    .p2align	3, 0x0
    __real@4202a05f20000000:
    .quad	0x4202a05f20000000              # double 1.0E+10
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .Lfunc_begin78:
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    push	rbx                                           ; Push to stack
    .seh_pushreg rbx                                   ; Push to stack
    sub	rsp, 312
    .seh_stackalloc 312
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 176], -2                      ; Move 64-bit value
    mov	qword ptr [rbp], r8             # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp + 8], rdx        # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rbp + 16], rax       # 8-byte Spill ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 248]     # xmm0 = mem[0],zero ; Load 64-bit double
    mov	al, byte ptr [rbp + 240]
    mov	qword ptr [rbp + 168], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 160], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 152], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 144], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rbp + 24], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 112]
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 12288
    mov	dword ptr [rbp + 100], eax                     ; Move 32-bit value
    cmp	dword ptr [rbp + 100], 8192                    ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rbp + 99], al
    cmp	dword ptr [rbp + 100], 12288                   ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rbp + 98], al
    test	byte ptr [rbp + 98], 1                        ; Test values
    je	.LBB825_2                                       ; Jump instruction
# %bb.1:
    mov	rax, -1
    mov	qword ptr [rbp - 8], rax        # 8-byte Spill ; Move 64-bit value
    jmp	.LBB825_3                                      ; Jump instruction
    .LBB825_2:
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    call	"?precision@ios_base@std@@QEBA_JXZ"           ; Function call
    mov	qword ptr [rbp - 8], rax        # 8-byte Spill ; Move 64-bit value
    .LBB825_3:
    mov	rax, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    mov	edx, dword ptr [rbp + 100]                     ; Move 32-bit value
    mov	rcx, qword ptr [rbp + 88]                      ; Move 64-bit value
    call	"??$_Float_put_desired_precision@O@std@@YAH_JH@Z" ; Function call
    mov	dword ptr [rbp + 84], eax                      ; Move 32-bit value
    movsxd	rax, dword ptr [rbp + 84]                   ; Move 32-bit value
    mov	qword ptr [rbp + 72], rax                      ; Move 64-bit value
    test	byte ptr [rbp + 99], 1                        ; Test values
    je	.LBB825_6                                       ; Jump instruction
# %bb.4:
    movsd	xmm0, qword ptr [rbp + 248]     # xmm0 = mem[0],zero ; Load 64-bit double
    movaps	xmm1, xmmword ptr [rip + __xmm@7fffffffffffffff7fffffffffffffff] # xmm1 = [NaN,NaN]
    pand	xmm0, xmm1
    movsd	xmm1, qword ptr [rip + __real@4202a05f20000000] # xmm1 = [1.0E+10,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB825_6                                      ; Jump instruction
# %bb.5:
    movsd	xmm0, qword ptr [rbp + 248]     # xmm0 = mem[0],zero ; Load 64-bit double
    lea	rdx, [rbp + 68]
    call	frexpl                                        ; Function call
    mov	eax, dword ptr [rbp + 68]                      ; Move 32-bit value
    mov	ecx, eax
    neg	ecx
    cmovns	eax, ecx
    imul	eax, eax, 30103
    mov	ecx, 100000
    cdq
    idiv	ecx
    cdqe
    add	rax, qword ptr [rbp + 72]
    mov	qword ptr [rbp + 72], rax                      ; Move 64-bit value
    .LBB825_6:
    mov	rdx, qword ptr [rbp + 72]                      ; Move 64-bit value
    add	rdx, 50
    .Ltmp570:
    xor	eax, eax
    mov	r8b, al
    lea	rcx, [rbp + 112]
    call	"?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z" ; Function call
    .Ltmp571:
    jmp	.LBB825_7                                      ; Jump instruction
    .LBB825_7:
    movsd	xmm0, qword ptr [rbp + 248]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?isfinite@@YA_NO@Z"                          ; Function call
    and	al, 1
    mov	byte ptr [rbp + 67], al
    test	byte ptr [rbp + 67], 1                        ; Test values
    je	.LBB825_9                                       ; Jump instruction
# %bb.8:
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	dword ptr [rbp - 12], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB825_10                                     ; Jump instruction
    .LBB825_9:
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, -17
    mov	dword ptr [rbp - 12], eax       # 4-byte Spill ; Move 32-bit value
    .LBB825_10:
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	eax, dword ptr [rbp - 12]       # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rbp + 60], eax                      ; Move 32-bit value
    movsd	xmm0, qword ptr [rbp + 248]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 48], xmm0      # 8-byte Spill ; Load 64-bit double
    mov	eax, dword ptr [rbp + 88]                      ; Move 32-bit value
    mov	dword ptr [rbp - 20], eax       # 4-byte Spill ; Move 32-bit value
    mov	r9d, dword ptr [rbp + 60]                      ; Move 32-bit value
    lea	rdx, [rbp + 104]
    mov	r8b, 76
    call	"?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z" ; Function call
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 112]
    mov	qword ptr [rbp - 56], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp - 48]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    mov	rdx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 32]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, dword ptr [rbp - 20]       # 4-byte Reload ; Move 32-bit value
    mov	rcx, rax
    .Ltmp572:
    mov	rax, rsp
    movsd	qword ptr [rax + 32], xmm0                   ; Load 64-bit double
    call	sprintf_s                                     ; Function call
    .Ltmp573:
    mov	dword ptr [rbp - 16], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB825_11                                     ; Jump instruction
    .LBB825_11:
    mov	eax, dword ptr [rbp - 16]       # 4-byte Reload ; Move 32-bit value
    cdqe
    mov	qword ptr [rbp + 48], rax                      ; Move 64-bit value
    mov	bl, byte ptr [rbp + 67]
    mov	rax, qword ptr [rbp + 48]                      ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 112]
    call	"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	r11, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	r10, rax
    mov	rax, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    mov	r8b, byte ptr [rbp + 240]
    mov	r9, qword ptr [rbp + 160]                      ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 32], xmm0
    .Ltmp574:
    and	bl, 1
    mov	rax, rsp
    mov	byte ptr [rax + 56], bl
    mov	qword ptr [rax + 48], r11                      ; Move 64-bit value
    mov	qword ptr [rax + 40], r10                      ; Move 64-bit value
    mov	byte ptr [rax + 32], r8b
    lea	r8, [rbp + 32]
    call	"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z" ; Function call
    .Ltmp575:
    jmp	.LBB825_12                                     ; Jump instruction
    .LBB825_12:
    lea	rcx, [rbp + 112]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp + 16]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 312
    pop	rbx                                            ; Pop from stack
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z")@IMGREL
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA":
    .seh_proc "?dtor$13@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA"
    .LBB825_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    push	rbx                                           ; Push to stack
    .seh_pushreg rbx                                   ; Push to stack
    sub	rsp, 72
    .seh_stackalloc 72
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 112]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 72
    pop	rbx                                            ; Pop from stack
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end78:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z")@IMGREL # IPToStateXData
    .long	304                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA"@IMGREL # Action
    "$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z":
    .long	.Lfunc_begin78@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp570@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp575@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .Lfunc_begin79:
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    push	rbx                                           ; Push to stack
    .seh_pushreg rbx                                   ; Push to stack
    sub	rsp, 328
    .seh_stackalloc 328
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 192], -2                      ; Move 64-bit value
    mov	qword ptr [rbp + 16], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp + 24], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rbp + 32], rax       # 8-byte Spill ; Move 64-bit value
    movsd	xmm0, qword ptr [rbp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    mov	al, byte ptr [rbp + 256]
    mov	qword ptr [rbp + 184], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 176], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 168], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 160], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 160]                     ; Move 64-bit value
    mov	qword ptr [rbp + 40], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 128]
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 12288
    mov	dword ptr [rbp + 116], eax                     ; Move 32-bit value
    cmp	dword ptr [rbp + 116], 8192                    ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rbp + 115], al
    cmp	dword ptr [rbp + 116], 12288                   ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rbp + 114], al
    test	byte ptr [rbp + 114], 1                       ; Test values
    je	.LBB826_2                                       ; Jump instruction
# %bb.1:
    mov	rax, -1
    mov	qword ptr [rbp + 8], rax        # 8-byte Spill ; Move 64-bit value
    jmp	.LBB826_3                                      ; Jump instruction
    .LBB826_2:
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?precision@ios_base@std@@QEBA_JXZ"           ; Function call
    mov	qword ptr [rbp + 8], rax        # 8-byte Spill ; Move 64-bit value
    .LBB826_3:
    mov	rax, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 104], rax                     ; Move 64-bit value
    mov	edx, dword ptr [rbp + 116]                     ; Move 32-bit value
    mov	rcx, qword ptr [rbp + 104]                     ; Move 64-bit value
    call	"??$_Float_put_desired_precision@N@std@@YAH_JH@Z" ; Function call
    mov	dword ptr [rbp + 100], eax                     ; Move 32-bit value
    movsxd	rax, dword ptr [rbp + 100]                  ; Move 32-bit value
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    test	byte ptr [rbp + 115], 1                       ; Test values
    je	.LBB826_6                                       ; Jump instruction
# %bb.4:
    movsd	xmm0, qword ptr [rbp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    movaps	xmm1, xmmword ptr [rip + __xmm@7fffffffffffffff7fffffffffffffff] # xmm1 = [NaN,NaN]
    pand	xmm0, xmm1
    movsd	xmm1, qword ptr [rip + __real@4202a05f20000000] # xmm1 = [1.0E+10,0.0E+0] ; Load 64-bit double
    ucomisd	xmm0, xmm1
    jbe	.LBB826_6                                      ; Jump instruction
# %bb.5:
    movsd	xmm0, qword ptr [rbp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    lea	rdx, [rbp + 84]
    call	frexp                                         ; Function call
    mov	eax, dword ptr [rbp + 84]                      ; Move 32-bit value
    mov	ecx, eax
    neg	ecx
    cmovns	eax, ecx
    imul	eax, eax, 30103
    mov	ecx, 100000
    cdq
    idiv	ecx
    cdqe
    add	rax, qword ptr [rbp + 88]
    mov	qword ptr [rbp + 88], rax                      ; Move 64-bit value
    .LBB826_6:
    mov	rdx, qword ptr [rbp + 88]                      ; Move 64-bit value
    add	rdx, 50
    .Ltmp576:
    xor	eax, eax
    mov	r8b, al
    lea	rcx, [rbp + 128]
    call	"?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z" ; Function call
    .Ltmp577:
    jmp	.LBB826_7                                      ; Jump instruction
    .LBB826_7:
    movsd	xmm0, qword ptr [rbp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    call	"?isfinite@@YA_NN@Z"                          ; Function call
    and	al, 1
    mov	byte ptr [rbp + 83], al
    test	byte ptr [rbp + 83], 1                        ; Test values
    je	.LBB826_9                                       ; Jump instruction
# %bb.8:
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	dword ptr [rbp + 4], eax        # 4-byte Spill ; Move 32-bit value
    jmp	.LBB826_10                                     ; Jump instruction
    .LBB826_9:
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, -17
    mov	dword ptr [rbp + 4], eax        # 4-byte Spill ; Move 32-bit value
    .LBB826_10:
    mov	rcx, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	eax, dword ptr [rbp + 4]        # 4-byte Reload ; Move 32-bit value
    mov	dword ptr [rbp + 76], eax                      ; Move 32-bit value
    movsd	xmm0, qword ptr [rbp + 264]     # xmm0 = mem[0],zero ; Load 64-bit double
    movsd	qword ptr [rbp - 32], xmm0      # 8-byte Spill ; Load 64-bit double
    mov	eax, dword ptr [rbp + 104]                     ; Move 32-bit value
    mov	dword ptr [rbp - 4], eax        # 4-byte Spill ; Move 32-bit value
    mov	r9d, dword ptr [rbp + 76]                      ; Move 32-bit value
    xor	eax, eax
    mov	dword ptr [rbp - 36], eax       # 4-byte Spill ; Move 32-bit value
    mov	r8b, al
    lea	rdx, [rbp + 120]
    call	"?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z" ; Function call
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 128]
    mov	qword ptr [rbp - 48], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	eax, dword ptr [rbp - 36]       # 4-byte Reload ; Move 32-bit value
    mov	qword ptr [rbp - 24], rdx       # 8-byte Spill ; Move 64-bit value
    mov	edx, eax
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    movsd	xmm0, qword ptr [rbp - 32]      # 8-byte Reload ; Load 64-bit double
# xmm0 = mem[0],zero
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp - 16]        # 8-byte Reload ; Move 64-bit value
    mov	r9d, dword ptr [rbp - 4]        # 4-byte Reload ; Move 32-bit value
    mov	rcx, rax
    .Ltmp578:
    mov	rax, rsp
    movsd	qword ptr [rax + 32], xmm0                   ; Load 64-bit double
    call	sprintf_s                                     ; Function call
    .Ltmp579:
    mov	dword ptr [rbp], eax            # 4-byte Spill ; Move 32-bit value
    jmp	.LBB826_11                                     ; Jump instruction
    .LBB826_11:
    mov	eax, dword ptr [rbp]            # 4-byte Reload ; Move 32-bit value
    cdqe
    mov	qword ptr [rbp + 64], rax                      ; Move 64-bit value
    mov	bl, byte ptr [rbp + 83]
    mov	rax, qword ptr [rbp + 64]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 128]
    call	"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	r11, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	r10, rax
    mov	rax, qword ptr [rbp + 16]       # 8-byte Reload ; Move 64-bit value
    mov	r8b, byte ptr [rbp + 256]
    mov	r9, qword ptr [rbp + 176]                      ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 48], xmm0
    .Ltmp580:
    and	bl, 1
    mov	rax, rsp
    mov	byte ptr [rax + 56], bl
    mov	qword ptr [rax + 48], r11                      ; Move 64-bit value
    mov	qword ptr [rax + 40], r10                      ; Move 64-bit value
    mov	byte ptr [rax + 32], r8b
    lea	r8, [rbp + 48]
    call	"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z" ; Function call
    .Ltmp581:
    jmp	.LBB826_12                                     ; Jump instruction
    .LBB826_12:
    lea	rcx, [rbp + 128]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 328
    pop	rbx                                            ; Pop from stack
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z")@IMGREL
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$13@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA":
    .seh_proc "?dtor$13@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA"
    .LBB826_13:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    push	rbx                                           ; Push to stack
    .seh_pushreg rbx                                   ; Push to stack
    sub	rsp, 72
    .seh_stackalloc 72
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 128]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 72
    pop	rbx                                            ; Pop from stack
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end79:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z")@IMGREL # IPToStateXData
    .long	320                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z":
    .long	-1                              # ToState
    .long	"?dtor$13@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA"@IMGREL # Action
    "$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z":
    .long	.Lfunc_begin79@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp576@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp581@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z"
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 280]                     ; Move 64-bit value
    mov	al, byte ptr [rsp + 272]
    mov	qword ptr [rsp + 216], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 208], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 200], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 192], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 280]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 208]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    lea	rdx, [rsp + 120]
    lea	r8, [rip + "??_C@_02CLHGNPPK@Lu?$AA@"]
    call	"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z" ; Function call
    mov	r9, qword ptr [rsp + 64]        # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    lea	rcx, [rsp + 128]
    mov	edx, 64
    call	sprintf_s                                     ; Function call
    mov	r8, qword ptr [rsp + 72]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    cdqe
    lea	r10, [rsp + 128]
    mov	r11b, byte ptr [rsp + 272]
    mov	r9, qword ptr [rsp + 208]                      ; Move 64-bit value
    mov	rsi, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 104], rsi                     ; Move 64-bit value
    mov	r8, qword ptr [r8 + 8]                         ; Move 64-bit value
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    lea	r8, [rsp + 104]
    mov	byte ptr [rsp + 32], r11b
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 96]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z"
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 280]                     ; Move 64-bit value
    mov	al, byte ptr [rsp + 272]
    mov	qword ptr [rsp + 216], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 208], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 200], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 192], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 280]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 208]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    lea	rdx, [rsp + 120]
    lea	r8, [rip + "??_C@_02HIKPPMOK@Ld?$AA@"]
    call	"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z" ; Function call
    mov	r9, qword ptr [rsp + 64]        # 8-byte Reload ; Move 64-bit value
    mov	r8, rax
    lea	rcx, [rsp + 128]
    mov	edx, 64
    call	sprintf_s                                     ; Function call
    mov	r8, qword ptr [rsp + 72]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    cdqe
    lea	r10, [rsp + 128]
    mov	r11b, byte ptr [rsp + 272]
    mov	r9, qword ptr [rsp + 208]                      ; Move 64-bit value
    mov	rsi, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 104], rsi                     ; Move 64-bit value
    mov	r8, qword ptr [r8 + 8]                         ; Move 64-bit value
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    lea	r8, [rsp + 104]
    mov	byte ptr [rsp + 32], r11b
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 96]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z"
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	eax, dword ptr [rsp + 280]                     ; Move 32-bit value
    mov	al, byte ptr [rsp + 272]
    mov	qword ptr [rsp + 216], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 208], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 200], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 192], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	eax, dword ptr [rsp + 280]                     ; Move 32-bit value
    mov	dword ptr [rsp + 68], eax       # 4-byte Spill ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 208]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    lea	rdx, [rsp + 122]
    lea	r8, [rip + "??_C@_02BDDLJJBK@lu?$AA@"]
    call	"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z" ; Function call
    mov	r9d, dword ptr [rsp + 68]       # 4-byte Reload ; Move 32-bit value
    mov	r8, rax
    lea	rcx, [rsp + 128]
    mov	edx, 64
    call	sprintf_s                                     ; Function call
    mov	r8, qword ptr [rsp + 72]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    cdqe
    lea	r10, [rsp + 128]
    mov	r11b, byte ptr [rsp + 272]
    mov	r9, qword ptr [rsp + 208]                      ; Move 64-bit value
    mov	rsi, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 104], rsi                     ; Move 64-bit value
    mov	r8, qword ptr [r8 + 8]                         ; Move 64-bit value
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    lea	r8, [rsp + 104]
    mov	byte ptr [rsp + 32], r11b
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 96]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
# %bb.0:
    push	rsi                                           ; Push to stack
    .seh_pushreg rsi                                   ; Push to stack
    sub	rsp, 224
    .seh_stackalloc 224
    .seh_endprologue
    mov	qword ptr [rsp + 72], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 88], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 96], rax       # 8-byte Spill ; Move 64-bit value
    mov	eax, dword ptr [rsp + 280]                     ; Move 32-bit value
    mov	al, byte ptr [rsp + 272]
    mov	qword ptr [rsp + 216], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 208], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 200], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 192], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 192]                     ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	eax, dword ptr [rsp + 280]                     ; Move 32-bit value
    mov	dword ptr [rsp + 68], eax       # 4-byte Spill ; Move 32-bit value
    mov	rcx, qword ptr [rsp + 208]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	r9d, eax
    lea	rdx, [rsp + 122]
    lea	r8, [rip + "??_C@_02EAOCLKAK@ld?$AA@"]
    call	"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z" ; Function call
    mov	r9d, dword ptr [rsp + 68]       # 4-byte Reload ; Move 32-bit value
    mov	r8, rax
    lea	rcx, [rsp + 128]
    mov	edx, 64
    call	sprintf_s                                     ; Function call
    mov	r8, qword ptr [rsp + 72]        # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    cdqe
    lea	r10, [rsp + 128]
    mov	r11b, byte ptr [rsp + 272]
    mov	r9, qword ptr [rsp + 208]                      ; Move 64-bit value
    mov	rsi, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 104], rsi                     ; Move 64-bit value
    mov	r8, qword ptr [r8 + 8]                         ; Move 64-bit value
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    lea	r8, [rsp + 104]
    mov	byte ptr [rsp + 32], r11b
    mov	qword ptr [rsp + 40], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    call	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z" ; Function call
    mov	rax, qword ptr [rsp + 96]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 224
    pop	rsi                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
.globl	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z" # -- Begin function ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
    .p2align	4, 0x90
    "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z": # @"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .Lfunc_begin80:
    .seh_proc "?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 400
    .seh_stackalloc 400
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 264], -2                      ; Move 64-bit value
    mov	qword ptr [rbp - 32], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp - 24], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    mov	al, byte ptr [rbp + 328]
    mov	r10b, byte ptr [rbp + 320]
    mov	qword ptr [rbp + 256], rdx                     ; Move 64-bit value
    and	al, 1
    mov	byte ptr [rbp + 255], al
    mov	qword ptr [rbp + 240], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 232], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 224], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 224]                     ; Move 64-bit value
    mov	qword ptr [rbp - 8], rax        # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 16384
    cmp	eax, 0                                         ; Compare values
    jne	.LBB831_2                                      ; Jump instruction
# %bb.1:
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8b, byte ptr [rbp + 255]
    and	r8b, 1
    movzx	r10d, r8b
    mov	r11b, byte ptr [rbp + 320]
    mov	r9, qword ptr [rbp + 240]                      ; Move 64-bit value
    mov	r8, qword ptr [rax]                            ; Move 64-bit value
    mov	qword ptr [rbp + 208], r8                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	qword ptr [rbp + 216], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    lea	r8, [rbp + 208]
    mov	byte ptr [rsp + 32], r11b
    mov	dword ptr [rsp + 40], r10d                     ; Move 32-bit value
    call	qword ptr [rax + 72]                          ; Function call
    jmp	.LBB831_20                                     ; Jump instruction
    .LBB831_2:
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    lea	rdx, [rbp + 184]
    mov	qword ptr [rbp - 48], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    .Ltmp582:
    call	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp583:
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB831_3                                      ; Jump instruction
    .LBB831_3:
    lea	rcx, [rbp + 184]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 200], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 152]
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    test	byte ptr [rbp + 255], 1                       ; Test values
    je	.LBB831_7                                       ; Jump instruction
# %bb.4:
    mov	rcx, qword ptr [rbp + 200]                     ; Move 64-bit value
    .Ltmp586:
    lea	rdx, [rbp + 120]
    call	"?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp587:
    jmp	.LBB831_5                                      ; Jump instruction
    .LBB831_5:
    lea	rcx, [rbp + 152]
    lea	rdx, [rbp + 120]
    call	"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z" ; Function call
    lea	rcx, [rbp + 120]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB831_9                                      ; Jump instruction
    .LBB831_7:
    mov	rcx, qword ptr [rbp + 200]                     ; Move 64-bit value
    .Ltmp584:
    lea	rdx, [rbp + 88]
    call	"?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp585:
    jmp	.LBB831_8                                      ; Jump instruction
    .LBB831_8:
    lea	rcx, [rbp + 152]
    lea	rdx, [rbp + 88]
    call	"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z" ; Function call
    lea	rcx, [rbp + 88]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    .LBB831_9:
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, 0                                         ; Compare values
    jle	.LBB831_11                                     ; Jump instruction
# %bb.10:
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 152]
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    cmp	rax, rcx                                       ; Compare values
    ja	.LBB831_12                                      ; Jump instruction
    .LBB831_11:
    mov	qword ptr [rbp + 80], 0                        ; Move 64-bit value
    jmp	.LBB831_13                                     ; Jump instruction
    .LBB831_12:
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 152]
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, rax
    mov	rax, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rbp + 80], rax                      ; Move 64-bit value
    .LBB831_13:
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 448
    cmp	eax, 64                                        ; Compare values
    je	.LBB831_16                                      ; Jump instruction
# %bb.14:
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 80]                      ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 320]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 48], xmm0
    .Ltmp588:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 64]
    lea	r8, [rbp + 48]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp589:
    jmp	.LBB831_15                                     ; Jump instruction
    .LBB831_15:
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]                      ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 72]                      ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp + 80], 0                        ; Move 64-bit value
    .LBB831_16:
    lea	rcx, [rbp + 152]
    mov	qword ptr [rbp - 80], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	rcx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    call	"?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ" ; Function call
    mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 16], xmm0
    .Ltmp590:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 32]
    lea	r8, [rbp + 16]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp591:
    jmp	.LBB831_17                                     ; Jump instruction
    .LBB831_17:
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 32]
    movups	xmmword ptr [rax], xmm0
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    call	"?width@ios_base@std@@QEAA_J_J@Z"             ; Function call
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
# kill: def $r8 killed $rax
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 80]                       ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 320]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp], xmm0
    .Ltmp592:
    mov	rax, rsp
    mov	qword ptr [rax + 32], r8                       ; Move 64-bit value
    mov	r8, rbp
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp593:
    jmp	.LBB831_18                                     ; Jump instruction
    .LBB831_18:
    lea	rcx, [rbp + 152]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    jmp	.LBB831_20                                     ; Jump instruction
    .LBB831_20:
    mov	rax, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 400
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z")@IMGREL
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$6@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA":
    .seh_proc "?dtor$6@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA"
    .LBB831_6:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 184]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$19@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA":
    .seh_proc "?dtor$19@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA"
    .LBB831_19:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 152]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end80:
    .seh_handlerdata
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .p2align	2, 0x0
    "$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z":
    .long	429065506                       # MagicNumber
    .long	2                               # MaxState
    .long	("$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	4                               # IPMapEntries
    .long	("$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z")@IMGREL # IPToStateXData
    .long	392                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$6@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA"@IMGREL # Action
    .long	-1                              # ToState
    .long	"?dtor$19@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA"@IMGREL # Action
    "$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z":
    .long	.Lfunc_begin80@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp582@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp586@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp593@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .section	.text,"xr",discard,"??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ"
.globl	"??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ" # -- Begin function ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ
    .p2align	4, 0x90
    "??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ": # @"??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ"
    .seh_proc "??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	qword ptr [rsp + 32], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 32]                      ; Move 64-bit value
    call	"??1facet@locale@std@@MEAA@XZ"                ; Function call
    nop
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
.globl	"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z" # -- Begin function ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
    .p2align	4, 0x90
    "?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z": # @"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .Lfunc_begin81:
    .seh_proc "?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 592
    .seh_stackalloc 592
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 456], -2                      ; Move 64-bit value
    mov	qword ptr [rbp + 24], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp + 32], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rbp + 40], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rbp + 528]                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 520]                     ; Move 64-bit value
    mov	al, byte ptr [rbp + 512]
    mov	qword ptr [rbp + 448], rdx                     ; Move 64-bit value
    mov	qword ptr [rbp + 440], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 432], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 424], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 424]                     ; Move 64-bit value
    mov	qword ptr [rbp + 48], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    xor	ecx, ecx
# kill: def $rcx killed $ecx
    cmp	rcx, qword ptr [rbp + 528]                     ; Compare values
    mov	byte ptr [rbp + 63], al         # 1-byte Spill
    jae	.LBB833_4                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp + 520]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax]
    mov	al, 1
    cmp	ecx, 43                                        ; Compare values
    mov	byte ptr [rbp + 23], al         # 1-byte Spill
    je	.LBB833_3                                       ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 520]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 45                                        ; Compare values
    sete	al
    mov	byte ptr [rbp + 23], al         # 1-byte Spill
    .LBB833_3:
    mov	al, byte ptr [rbp + 23]         # 1-byte Reload
    mov	byte ptr [rbp + 63], al         # 1-byte Spill
    .LBB833_4:
    mov	al, byte ptr [rbp + 63]         # 1-byte Reload
    and	al, 1
    movzx	eax, al
# kill: def $rax killed $eax
    mov	qword ptr [rbp + 416], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 3584
    cmp	eax, 2048                                      ; Compare values
    jne	.LBB833_10                                     ; Jump instruction
# %bb.5:
    mov	rax, qword ptr [rbp + 416]                     ; Move 64-bit value
    add	rax, 2
    cmp	rax, qword ptr [rbp + 528]                     ; Compare values
    ja	.LBB833_10                                      ; Jump instruction
# %bb.6:
    mov	rax, qword ptr [rbp + 520]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 416]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    cmp	eax, 48                                        ; Compare values
    jne	.LBB833_10                                     ; Jump instruction
# %bb.7:
    mov	rax, qword ptr [rbp + 520]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 416]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx + 1]
    cmp	eax, 120                                       ; Compare values
    je	.LBB833_9                                       ; Jump instruction
# %bb.8:
    mov	rax, qword ptr [rbp + 520]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 416]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx + 1]
    cmp	eax, 88                                        ; Compare values
    jne	.LBB833_10                                     ; Jump instruction
    .LBB833_9:
    mov	rax, qword ptr [rbp + 416]                     ; Move 64-bit value
    add	rax, 2
    mov	qword ptr [rbp + 416], rax                     ; Move 64-bit value
    .LBB833_10:
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    lea	rdx, [rbp + 392]
    mov	qword ptr [rbp], rdx            # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp]            # 8-byte Reload ; Move 64-bit value
    .Ltmp594:
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp595:
    mov	qword ptr [rbp + 8], rax        # 8-byte Spill ; Move 64-bit value
    jmp	.LBB833_11                                     ; Jump instruction
    .LBB833_11:
    lea	rcx, [rbp + 392]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 408], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 528]                     ; Move 64-bit value
    xor	eax, eax
    mov	dword ptr [rbp - 12], eax       # 4-byte Spill ; Move 32-bit value
    mov	r8b, al
    lea	rcx, [rbp + 360]
    mov	qword ptr [rbp - 24], rcx       # 8-byte Spill ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
# kill: def $rdx killed $rax
    mov	eax, dword ptr [rbp - 12]       # 4-byte Reload ; Move 32-bit value
    mov	rdx, qword ptr [rbp + 408]                     ; Move 64-bit value
    mov	qword ptr [rbp - 8], rdx        # 8-byte Spill ; Move 64-bit value
    mov	edx, eax
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rdx, qword ptr [rbp + 520]                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 528]                     ; Move 64-bit value
    mov	r8, rdx
    add	r8, rax
    .Ltmp596:
    call	"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"   ; Function call
    .Ltmp597:
    jmp	.LBB833_12                                     ; Jump instruction
    .LBB833_12:
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    lea	rdx, [rbp + 336]
    mov	qword ptr [rbp - 40], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    .Ltmp598:
    call	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp599:
    mov	qword ptr [rbp - 32], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB833_13                                     ; Jump instruction
    .LBB833_13:
    lea	rcx, [rbp + 336]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 352], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 352]                     ; Move 64-bit value
    .Ltmp600:
    lea	rdx, [rbp + 304]
    call	"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp601:
    jmp	.LBB833_14                                     ; Jump instruction
    .LBB833_14:
    lea	rcx, [rbp + 304]
    xor	eax, eax
    mov	edx, eax
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z" ; Function call
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 127                                       ; Compare values
    je	.LBB833_29                                      ; Jump instruction
# %bb.15:
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax]
    xor	eax, eax
    cmp	eax, ecx                                       ; Compare values
    jge	.LBB833_29                                     ; Jump instruction
# %bb.16:
    mov	rcx, qword ptr [rbp + 352]                     ; Move 64-bit value
    .Ltmp602:
    call	"?thousands_sep@?$numpunct@D@std@@QEBADXZ"    ; Function call
    .Ltmp603:
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    jmp	.LBB833_17                                     ; Jump instruction
    .LBB833_17:
    mov	al, byte ptr [rbp - 41]         # 1-byte Reload
    mov	byte ptr [rbp + 295], al
    .LBB833_18:                             # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax]
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	ecx, 127                                       ; Compare values
    mov	byte ptr [rbp - 42], al         # 1-byte Spill
    je	.LBB833_21                                      ; Jump instruction
# %bb.19:                               #   in Loop: Header=BB833_18 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	edx, byte ptr [rax]
    xor	eax, eax
# kill: def $al killed $al killed $eax
    xor	ecx, ecx
    cmp	ecx, edx                                       ; Compare values
    mov	byte ptr [rbp - 42], al         # 1-byte Spill
    jge	.LBB833_21                                     ; Jump instruction
# %bb.20:                               #   in Loop: Header=BB833_18 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	rax, byte ptr [rax]
    mov	rcx, qword ptr [rbp + 528]                     ; Move 64-bit value
    sub	rcx, qword ptr [rbp + 416]
    cmp	rax, rcx                                       ; Compare values
    setb	al
    mov	byte ptr [rbp - 42], al         # 1-byte Spill
    .LBB833_21:                             #   in Loop: Header=BB833_18 Depth=1
    mov	al, byte ptr [rbp - 42]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB833_22                                     ; Jump instruction
    jmp	.LBB833_28                                     ; Jump instruction
    .LBB833_22:                             #   in Loop: Header=BB833_18 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	rcx, byte ptr [rax]
    mov	rax, qword ptr [rbp + 528]                     ; Move 64-bit value
    sub	rax, rcx
    mov	qword ptr [rbp + 528], rax                     ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 295]
    mov	rdx, qword ptr [rbp + 528]                     ; Move 64-bit value
    .Ltmp618:
    lea	rcx, [rbp + 360]
    mov	r8d, 1
    call	"?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z" ; Function call
    .Ltmp619:
    jmp	.LBB833_23                                     ; Jump instruction
    .LBB833_23:                             #   in Loop: Header=BB833_18 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax + 1]
    xor	eax, eax
    cmp	eax, ecx                                       ; Compare values
    jge	.LBB833_27                                     ; Jump instruction
# %bb.24:                               #   in Loop: Header=BB833_18 Depth=1
    mov	rax, qword ptr [rbp + 296]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    jmp	.LBB833_27                                     ; Jump instruction
    .LBB833_27:                             #   in Loop: Header=BB833_18 Depth=1
    jmp	.LBB833_18                                     ; Jump instruction
    .LBB833_28:
    jmp	.LBB833_29                                     ; Jump instruction
    .LBB833_29:
    lea	rcx, [rbp + 360]
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	qword ptr [rbp + 528], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, 0                                         ; Compare values
    jle	.LBB833_31                                     ; Jump instruction
# %bb.30:
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, qword ptr [rbp + 528]                     ; Compare values
    ja	.LBB833_32                                      ; Jump instruction
    .LBB833_31:
    mov	qword ptr [rbp + 280], 0                       ; Move 64-bit value
    jmp	.LBB833_33                                     ; Jump instruction
    .LBB833_32:
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    sub	rax, qword ptr [rbp + 528]
    mov	qword ptr [rbp + 280], rax                     ; Move 64-bit value
    .LBB833_33:
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 448
    mov	dword ptr [rbp + 276], eax                     ; Move 32-bit value
    cmp	dword ptr [rbp + 276], 64                      ; Compare values
    je	.LBB833_38                                      ; Jump instruction
# %bb.34:
    cmp	dword ptr [rbp + 276], 256                     ; Compare values
    je	.LBB833_38                                      ; Jump instruction
# %bb.35:
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 280]                     ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 512]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 240], xmm0
    .Ltmp610:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 256]
    lea	r8, [rbp + 240]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp611:
    jmp	.LBB833_36                                     ; Jump instruction
    .LBB833_36:
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 256]
    movups	xmmword ptr [rax], xmm0
    mov	qword ptr [rbp + 280], 0                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 416]                     ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	rcx, [rbp + 360]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 208], xmm0
    .Ltmp612:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 224]
    lea	r8, [rbp + 208]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp613:
    jmp	.LBB833_37                                     ; Jump instruction
    .LBB833_37:
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 224]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 232]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    jmp	.LBB833_45                                     ; Jump instruction
    .LBB833_38:
    cmp	dword ptr [rbp + 276], 256                     ; Compare values
    jne	.LBB833_42                                     ; Jump instruction
# %bb.39:
    mov	rax, qword ptr [rbp + 416]                     ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	rcx, [rbp + 360]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 176], xmm0
    .Ltmp606:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 192]
    lea	r8, [rbp + 176]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp607:
    jmp	.LBB833_40                                     ; Jump instruction
    .LBB833_40:
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 192]
    movups	xmmword ptr [rax], xmm0
    mov	rdx, qword ptr [rbp + 280]                     ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 512]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 144], xmm0
    .Ltmp608:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 160]
    lea	r8, [rbp + 144]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp609:
    jmp	.LBB833_41                                     ; Jump instruction
    .LBB833_41:
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 160]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 168]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp + 280], 0                       ; Move 64-bit value
    jmp	.LBB833_44                                     ; Jump instruction
    .LBB833_42:
    mov	rax, qword ptr [rbp + 416]                     ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	rcx, [rbp + 360]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 112], xmm0
    .Ltmp604:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 128]
    lea	r8, [rbp + 112]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp605:
    jmp	.LBB833_43                                     ; Jump instruction
    .LBB833_43:
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 128]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 136]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    .LBB833_44:
    jmp	.LBB833_45                                     ; Jump instruction
    .LBB833_45:
    mov	rax, qword ptr [rbp + 528]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 416]                     ; Move 64-bit value
    sub	rax, rdx
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 360]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 80], xmm0
    .Ltmp614:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 96]
    lea	r8, [rbp + 80]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp615:
    jmp	.LBB833_46                                     ; Jump instruction
    .LBB833_46:
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 96]
    movups	xmmword ptr [rax], xmm0
    mov	rcx, qword ptr [rbp + 440]                     ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    call	"?width@ios_base@std@@QEAA_J_J@Z"             ; Function call
    mov	rcx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 32]       # 8-byte Reload ; Move 64-bit value
# kill: def $r8 killed $rax
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 280]                      ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 512]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 64], xmm0
    .Ltmp616:
    mov	rax, rsp
    mov	qword ptr [rax + 32], r8                       ; Move 64-bit value
    lea	r8, [rbp + 64]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp617:
    jmp	.LBB833_47                                     ; Jump instruction
    .LBB833_47:
    lea	rcx, [rbp + 304]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 360]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 592
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z")@IMGREL
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$25@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA":
    .seh_proc "?dtor$25@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"
    .LBB833_25:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 392]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$26@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA":
    .seh_proc "?dtor$26@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"
    .LBB833_26:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 336]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$48@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA":
    .seh_proc "?dtor$48@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"
    .LBB833_48:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 304]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$49@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA":
    .seh_proc "?dtor$49@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"
    .LBB833_49:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 360]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end81:
    .seh_handlerdata
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .p2align	2, 0x0
    "$cppxdata$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z":
    .long	429065506                       # MagicNumber
    .long	4                               # MaxState
    .long	("$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	8                               # IPMapEntries
    .long	("$ip2state$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z")@IMGREL # IPToStateXData
    .long	584                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z":
    .long	-1                              # ToState
    .long	"?dtor$25@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"@IMGREL # Action
    .long	-1                              # ToState
    .long	"?dtor$49@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$48@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$26@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA"@IMGREL # Action
    "$ip2state$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z":
    .long	.Lfunc_begin81@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp594@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp595@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	.Ltmp596@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp598@IMGREL+1               # IP
    .long	3                               # ToState
    .long	.Ltmp600@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp602@IMGREL+1               # IP
    .long	2                               # ToState
    .long	.Ltmp617@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .section	.text,"xr",discard,sprintf_s
.globl	sprintf_s                       # -- Begin function sprintf_s
    .p2align	4, 0x90
    sprintf_s:                              # @sprintf_s
    .seh_proc sprintf_s
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 120], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    lea	rax, [rsp + 120]
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	r9, qword ptr [rsp + 48]                       ; Move 64-bit value
    mov	r8, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rax, rsp
    mov	qword ptr [rax + 32], r9                       ; Move 64-bit value
    xor	eax, eax
    mov	r9d, eax
    call	_vsprintf_s_l                                 ; Function call
    mov	dword ptr [rsp + 60], eax                      ; Move 32-bit value
    mov	eax, dword ptr [rsp + 60]                      ; Move 32-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z"
.globl	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z" # -- Begin function ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
    .p2align	4, 0x90
    "??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z": # @"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z"
    .seh_proc "??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ" ; Function call
    add	rax, qword ptr [rsp + 48]
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z"
.globl	"?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z" # -- Begin function ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z
    .p2align	4, 0x90
    "?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z": # @"?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z"
    .seh_proc "?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z"
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	byte ptr [rsp + 127], r9b
    mov	qword ptr [rsp + 112], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 104], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	qword ptr [rsp + 56], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 24]                      ; Move 64-bit value
    sub	rcx, qword ptr [rsp + 88]
    cmp	rax, rcx                                       ; Compare values
    ja	.LBB836_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 112]
    mov	qword ptr [rcx + 16], rax                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" ; Function call
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 104]
    mov	qword ptr [rsp + 72], rax                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 88]                       ; Move 64-bit value
    sub	r8, qword ptr [rsp + 104]
    add	r8, 1
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 112]
    call	"?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	r8b, byte ptr [rsp + 127]
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    jmp	.LBB836_3                                      ; Jump instruction
    .LBB836_2:
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	al, byte ptr [rsp + 127]
    mov	r10, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	r9, qword ptr [rsp + 104]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 71]
    mov	qword ptr [rsp + 32], r10                      ; Move 64-bit value
    mov	byte ptr [rsp + 40], al
    call	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z" ; Function call
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    .LBB836_3:
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z"
.globl	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" # -- Begin function ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z
    .p2align	4, 0x90
    "?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z": # @"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z"
    .seh_proc "?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	byte ptr [rsp + 95], r9b
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    .LBB837_1:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jae	.LBB837_4                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB837_1 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	al, byte ptr [rsp + 95]
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    call	"??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    mov	dl, byte ptr [rsp + 47]         # 1-byte Reload
    mov	rcx, rax
    call	"??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z" ; Function call
# %bb.3:                                #   in Loop: Header=BB837_1 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 144], rax                     ; Move 64-bit value
    call	"??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    jmp	.LBB837_1                                      ; Jump instruction
    .LBB837_4:
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z"
.globl	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" # -- Begin function ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z
    .p2align	4, 0x90
    "?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z": # @"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z"
    .seh_proc "?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	qword ptr [rsp + 48], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 56], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    .LBB838_1:                              # =>This Inner Loop Header: Depth=1
    xor	eax, eax
# kill: def $rax killed $eax
    cmp	rax, qword ptr [rsp + 144]                     ; Compare values
    jae	.LBB838_4                                      ; Jump instruction
# %bb.2:                                #   in Loop: Header=BB838_1 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	al, byte ptr [rax]
    mov	byte ptr [rsp + 47], al         # 1-byte Spill
    call	"??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    mov	dl, byte ptr [rsp + 47]         # 1-byte Reload
    mov	rcx, rax
    call	"??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z" ; Function call
# %bb.3:                                #   in Loop: Header=BB838_1 Depth=1
    mov	rcx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    add	rax, -1
    mov	qword ptr [rsp + 144], rax                     ; Move 64-bit value
    call	"??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" ; Function call
    mov	rax, qword ptr [rsp + 88]                      ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    jmp	.LBB838_1                                      ; Jump instruction
    .LBB838_4:
    mov	rax, qword ptr [rsp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rdx]                            ; Move 64-bit value
    mov	qword ptr [rcx], r8                            ; Move 64-bit value
    mov	rdx, qword ptr [rdx + 8]                       ; Move 64-bit value
    mov	qword ptr [rcx + 8], rdx                       ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z"
.globl	"?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z" # -- Begin function ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
    .p2align	4, 0x90
    "?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z": # @"?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z"
    .seh_proc "?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 48]                      ; Compare values
    jae	.LBB839_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ" ; Function call
    .LBB839_2:
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z"
.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z
    .p2align	4, 0x90
    "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z"
    .seh_proc "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z"
# %bb.0:
    sub	rsp, 200
    .seh_stackalloc 200
    .seh_endprologue
    mov	al, byte ptr [rsp + 248]
    mov	rax, qword ptr [rsp + 240]                     ; Move 64-bit value
    mov	byte ptr [rsp + 199], r8b
    mov	qword ptr [rsp + 184], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 176], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 168], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 168]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 160], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 152], rax                     ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    sub	rax, qword ptr [rsp + 152]
    cmp	rax, qword ptr [rsp + 176]                     ; Compare values
    jae	.LBB840_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB840_2:
    mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 152]                     ; Move 64-bit value
    add	rax, qword ptr [rsp + 176]
    mov	qword ptr [rsp + 144], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 24]                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 144]                     ; Move 64-bit value
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 120], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    lea	rdx, [rsp + 128]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 160]                     ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    cmp	qword ptr [rsp + 136], 15                      ; Compare values
    jbe	.LBB840_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 248]
    mov	byte ptr [rsp + 87], al         # 1-byte Spill
    mov	rax, qword ptr [rsp + 240]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 184]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 152]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	r8, qword ptr [rsp + 56]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rsp + 64]        # 8-byte Reload ; Move 64-bit value
    mov	r10, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	al, byte ptr [rsp + 87]         # 1-byte Reload
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 32], r10                      ; Move 64-bit value
    mov	byte ptr [rsp + 40], al
    call	"??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z" ; Function call
    mov	r8, qword ptr [rsp + 136]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 120]                     ; Move 64-bit value
    call	"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB840_5                                      ; Jump instruction
    .LBB840_4:
    mov	al, byte ptr [rsp + 248]
    mov	r10, qword ptr [rsp + 240]                     ; Move 64-bit value
    mov	r9, qword ptr [rsp + 184]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 152]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 160]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 32], r10                      ; Move 64-bit value
    mov	byte ptr [rsp + 40], al
    call	"??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z" ; Function call
    mov	rcx, qword ptr [rsp + 160]                     ; Move 64-bit value
    lea	rdx, [rsp + 112]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    .LBB840_5:
    mov	rax, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 200
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
.globl	"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ" # -- Begin function ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
    .p2align	4, 0x90
    "?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ": # @"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
    .seh_proc "?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    lea	rcx, [rip + "??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"]
    call	"?_Xout_of_range@std@@YAXPEBD@Z"              ; Function call
    int3
    .seh_endproc
    .section	.text,"xr",discard,"??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z"
.globl	"??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z" # -- Begin function ??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z
    .p2align	4, 0x90
    "??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z": # @"??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z"
    .seh_proc "??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	al, byte ptr [rsp + 120]
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	r8b, byte ptr [rsp + 120]
    mov	rdx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 64]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" ; Function call
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    sub	r8, qword ptr [rsp + 64]
    add	r8, 1
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    add	rdx, qword ptr [rsp + 64]
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 64]
    add	rcx, qword ptr [rsp + 112]
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
.globl	"??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ": # @"??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z"
.globl	"??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z" # -- Begin function ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z
    .p2align	4, 0x90
    "??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z": # @"??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z"
    .seh_proc "??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], dl
    mov	qword ptr [rsp + 56], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    cmp	qword ptr [rax + 8], 0                         ; Compare values
    je	.LBB844_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rax + 8]                       ; Move 64-bit value
    mov	dl, byte ptr [rsp + 71]
    call	"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z" ; Function call
    mov	dword ptr [rsp + 44], eax       # 4-byte Spill ; Move 32-bit value
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rsp + 44]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB844_2                                      ; Jump instruction
    jmp	.LBB844_3                                      ; Jump instruction
    .LBB844_2:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    mov	byte ptr [rax], 1
    .LBB844_3:
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
.globl	"??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ" # -- Begin function ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
    .p2align	4, 0x90
    "??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ": # @"??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
    .seh_proc "??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,_vsprintf_s_l
.globl	_vsprintf_s_l                   # -- Begin function _vsprintf_s_l
    .p2align	4, 0x90
    _vsprintf_s_l:                          # @_vsprintf_s_l
    .seh_proc _vsprintf_s_l
# %bb.0:
    sub	rsp, 136
    .seh_stackalloc 136
    .seh_endprologue
    mov	rax, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	qword ptr [rsp + 128], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], r8                      ; Move 64-bit value
    mov	qword ptr [rsp + 112], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 104], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 176]                     ; Move 64-bit value
    mov	qword ptr [rsp + 88], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 120]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 104]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    call	__local_stdio_printf_options                  ; Function call
    mov	rdx, qword ptr [rsp + 56]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rsp + 64]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rsp + 72]        # 8-byte Reload ; Move 64-bit value
    mov	r10, qword ptr [rsp + 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, rax
    mov	rax, qword ptr [rsp + 88]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rcx]                           ; Move 64-bit value
    mov	qword ptr [rsp + 32], r10                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    call	__stdio_common_vsprintf_s                     ; Function call
    mov	dword ptr [rsp + 100], eax                     ; Move 32-bit value
    cmp	dword ptr [rsp + 100], 0                       ; Compare values
    jge	.LBB846_2                                      ; Jump instruction
# %bb.1:
    mov	eax, 4294967295
    mov	dword ptr [rsp + 52], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB846_3                                      ; Jump instruction
    .LBB846_2:
    mov	eax, dword ptr [rsp + 100]                     ; Move 32-bit value
    mov	dword ptr [rsp + 52], eax       # 4-byte Spill ; Move 32-bit value
    .LBB846_3:
    mov	eax, dword ptr [rsp + 52]       # 4-byte Reload ; Move 32-bit value
    add	rsp, 136
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,__local_stdio_printf_options
.globl	__local_stdio_printf_options    # -- Begin function __local_stdio_printf_options
    .p2align	4, 0x90
    __local_stdio_printf_options:           # @__local_stdio_printf_options
# %bb.0:
    lea	rax, [rip + "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"]
    ret                                                ; Return from function
    .section	.text,"xr",discard,"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ"
.globl	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" # -- Begin function ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
    .p2align	4, 0x90
    "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ": # @"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ"
    .seh_proc "??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	dl, byte ptr [rsp + 47]
    call	"??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?precision@ios_base@std@@QEBA_JXZ"
.globl	"?precision@ios_base@std@@QEBA_JXZ" # -- Begin function ?precision@ios_base@std@@QEBA_JXZ
    .p2align	4, 0x90
    "?precision@ios_base@std@@QEBA_JXZ":    # @"?precision@ios_base@std@@QEBA_JXZ"
    .seh_proc "?precision@ios_base@std@@QEBA_JXZ"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    mov	rax, qword ptr [rsp]                           ; Move 64-bit value
    mov	rax, qword ptr [rax + 32]                      ; Move 64-bit value
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Float_put_desired_precision@O@std@@YAH_JH@Z"
.globl	"??$_Float_put_desired_precision@O@std@@YAH_JH@Z" # -- Begin function ??$_Float_put_desired_precision@O@std@@YAH_JH@Z
    .p2align	4, 0x90
    "??$_Float_put_desired_precision@O@std@@YAH_JH@Z": # @"??$_Float_put_desired_precision@O@std@@YAH_JH@Z"
    .seh_proc "??$_Float_put_desired_precision@O@std@@YAH_JH@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	dword ptr [rsp + 16], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    cmp	dword ptr [rsp + 16], 12288                    ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rsp + 7], al
    test	byte ptr [rsp + 7], 1                         ; Test values
    je	.LBB850_2                                       ; Jump instruction
# %bb.1:
    mov	dword ptr [rsp + 20], 13                       ; Move 32-bit value
    jmp	.LBB850_9                                      ; Jump instruction
    .LBB850_2:
    cmp	qword ptr [rsp + 8], 0                         ; Compare values
    jle	.LBB850_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
# kill: def $eax killed $eax killed $rax
    mov	dword ptr [rsp + 20], eax                      ; Move 32-bit value
    jmp	.LBB850_9                                      ; Jump instruction
    .LBB850_4:
    cmp	qword ptr [rsp + 8], 0                         ; Compare values
    jne	.LBB850_8                                      ; Jump instruction
# %bb.5:
    cmp	dword ptr [rsp + 16], 0                        ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rsp + 6], al
    test	byte ptr [rsp + 6], 1                         ; Test values
    je	.LBB850_7                                       ; Jump instruction
# %bb.6:
    mov	dword ptr [rsp + 20], 1                        ; Move 32-bit value
    jmp	.LBB850_9                                      ; Jump instruction
    .LBB850_7:
    mov	dword ptr [rsp + 20], 0                        ; Move 32-bit value
    jmp	.LBB850_9                                      ; Jump instruction
    .LBB850_8:
    mov	dword ptr [rsp], 6                             ; Move 32-bit value
    mov	dword ptr [rsp + 20], 6                        ; Move 32-bit value
    .LBB850_9:
    mov	eax, dword ptr [rsp + 20]                      ; Move 32-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,frexpl
.globl	frexpl                          # -- Begin function frexpl
    .p2align	4, 0x90
    frexpl:                                 # @frexpl
    .seh_proc frexpl
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    movsd	qword ptr [rsp + 40], xmm0                   ; Load 64-bit double
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rsp + 40]      # xmm0 = mem[0],zero ; Load 64-bit double
    call	frexp                                         ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z"
.globl	"?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z" # -- Begin function ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z
    .p2align	4, 0x90
    "?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z": # @"?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z"
    .seh_proc "?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	byte ptr [rsp + 71], r8b
    mov	qword ptr [rsp + 56], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 40]                      ; Compare values
    ja	.LBB852_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z" ; Function call
    jmp	.LBB852_3                                      ; Jump instruction
    .LBB852_2:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 71]
    mov	rdx, qword ptr [rsp + 56]                      ; Move 64-bit value
    sub	rdx, qword ptr [rsp + 40]
    call	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z" ; Function call
    .LBB852_3:
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?isfinite@@YA_NO@Z"
.globl	"?isfinite@@YA_NO@Z"            # -- Begin function ?isfinite@@YA_NO@Z
    .p2align	4, 0x90
    "?isfinite@@YA_NO@Z":                   # @"?isfinite@@YA_NO@Z"
    .seh_proc "?isfinite@@YA_NO@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    movsd	qword ptr [rsp], xmm0                        ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp]           # xmm0 = mem[0],zero ; Load 64-bit double
    movq	rax, xmm0
    movabs	rcx, 9223372036854775807
    and	rax, rcx
    movabs	rcx, 9218868437227405312
    sub	rax, rcx
    setl	al
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z"
.globl	"?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z" # -- Begin function ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z
    .p2align	4, 0x90
    "?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z": # @"?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z"
    .seh_proc "?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z"
# %bb.0:
    sub	rsp, 40
    .seh_stackalloc 40
    .seh_endprologue
    mov	dword ptr [rsp + 36], r9d                      ; Move 32-bit value
    mov	byte ptr [rsp + 35], r8b
    mov	qword ptr [rsp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 37
    mov	eax, dword ptr [rsp + 36]                      ; Move 32-bit value
    and	eax, 32
    cmp	eax, 0                                         ; Compare values
    je	.LBB854_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 43
    .LBB854_2:
    mov	eax, dword ptr [rsp + 36]                      ; Move 32-bit value
    and	eax, 16
    cmp	eax, 0                                         ; Compare values
    je	.LBB854_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 35
    .LBB854_4:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 46
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 42
    movsx	eax, byte ptr [rsp + 35]
    cmp	eax, 0                                         ; Compare values
    je	.LBB854_6                                       ; Jump instruction
# %bb.5:
    mov	cl, byte ptr [rsp + 35]
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	byte ptr [rax], cl
    .LBB854_6:
    mov	eax, dword ptr [rsp + 36]                      ; Move 32-bit value
    and	eax, 12288
    mov	dword ptr [rsp], eax                           ; Move 32-bit value
    mov	eax, dword ptr [rsp + 36]                      ; Move 32-bit value
    and	eax, 4
    cmp	eax, 0                                         ; Compare values
    je	.LBB854_17                                      ; Jump instruction
# %bb.7:
    cmp	dword ptr [rsp], 8192                          ; Compare values
    jne	.LBB854_9                                      ; Jump instruction
# %bb.8:
    mov	byte ptr [rsp + 7], 102
    jmp	.LBB854_16                                     ; Jump instruction
    .LBB854_9:
    cmp	dword ptr [rsp], 12288                         ; Compare values
    jne	.LBB854_11                                     ; Jump instruction
# %bb.10:
    mov	byte ptr [rsp + 7], 65
    jmp	.LBB854_15                                     ; Jump instruction
    .LBB854_11:
    cmp	dword ptr [rsp], 4096                          ; Compare values
    jne	.LBB854_13                                     ; Jump instruction
# %bb.12:
    mov	byte ptr [rsp + 7], 69
    jmp	.LBB854_14                                     ; Jump instruction
    .LBB854_13:
    mov	byte ptr [rsp + 7], 71
    .LBB854_14:
    jmp	.LBB854_15                                     ; Jump instruction
    .LBB854_15:
    jmp	.LBB854_16                                     ; Jump instruction
    .LBB854_16:
    jmp	.LBB854_27                                     ; Jump instruction
    .LBB854_17:
    cmp	dword ptr [rsp], 8192                          ; Compare values
    jne	.LBB854_19                                     ; Jump instruction
# %bb.18:
    mov	byte ptr [rsp + 7], 102
    jmp	.LBB854_26                                     ; Jump instruction
    .LBB854_19:
    cmp	dword ptr [rsp], 12288                         ; Compare values
    jne	.LBB854_21                                     ; Jump instruction
# %bb.20:
    mov	byte ptr [rsp + 7], 97
    jmp	.LBB854_25                                     ; Jump instruction
    .LBB854_21:
    cmp	dword ptr [rsp], 4096                          ; Compare values
    jne	.LBB854_23                                     ; Jump instruction
# %bb.22:
    mov	byte ptr [rsp + 7], 101
    jmp	.LBB854_24                                     ; Jump instruction
    .LBB854_23:
    mov	byte ptr [rsp + 7], 103
    .LBB854_24:
    jmp	.LBB854_25                                     ; Jump instruction
    .LBB854_25:
    jmp	.LBB854_26                                     ; Jump instruction
    .LBB854_26:
    jmp	.LBB854_27                                     ; Jump instruction
    .LBB854_27:
    mov	cl, byte ptr [rsp + 7]
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    add	rsp, 40
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
.globl	"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z" # -- Begin function ??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z
    .p2align	4, 0x90
    "??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z": # @"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .Lfunc_begin82:
    .seh_proc "??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 656
    .seh_stackalloc 656
    lea	rbp, [rsp + 128]
    .seh_setframe rbp, 128
    .seh_endprologue
    mov	qword ptr [rbp + 520], -2                      ; Move 64-bit value
    mov	qword ptr [rbp + 40], r8        # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rbp + 48], rdx       # 8-byte Spill ; Move 64-bit value
    mov	rax, rdx
    mov	qword ptr [rbp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	al, byte ptr [rbp + 600]
    mov	r10, qword ptr [rbp + 592]                     ; Move 64-bit value
    mov	r10, qword ptr [rbp + 584]                     ; Move 64-bit value
    mov	r10b, byte ptr [rbp + 576]
    mov	qword ptr [rbp + 512], rdx                     ; Move 64-bit value
    and	al, 1
    mov	byte ptr [rbp + 511], al
    mov	qword ptr [rbp + 496], r9                      ; Move 64-bit value
    mov	qword ptr [rbp + 488], r8                      ; Move 64-bit value
    mov	qword ptr [rbp + 480], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 480]                     ; Move 64-bit value
    mov	qword ptr [rbp + 64], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
# kill: def $al killed $al killed $eax
    xor	ecx, ecx
# kill: def $rcx killed $ecx
    cmp	rcx, qword ptr [rbp + 592]                     ; Compare values
    mov	byte ptr [rbp + 79], al         # 1-byte Spill
    jae	.LBB855_4                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rbp + 584]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax]
    mov	al, 1
    cmp	ecx, 43                                        ; Compare values
    mov	byte ptr [rbp + 39], al         # 1-byte Spill
    je	.LBB855_3                                       ; Jump instruction
# %bb.2:
    mov	rax, qword ptr [rbp + 584]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 45                                        ; Compare values
    sete	al
    mov	byte ptr [rbp + 39], al         # 1-byte Spill
    .LBB855_3:
    mov	al, byte ptr [rbp + 39]         # 1-byte Reload
    mov	byte ptr [rbp + 79], al         # 1-byte Spill
    .LBB855_4:
    mov	al, byte ptr [rbp + 79]         # 1-byte Reload
    and	al, 1
    movzx	eax, al
# kill: def $rax killed $eax
    mov	qword ptr [rbp + 472], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 12288
    cmp	eax, 12288                                     ; Compare values
    je	.LBB855_6                                       ; Jump instruction
# %bb.5:
    lea	rax, [rip + "??_C@_02MDKMJEGG@eE?$AA@"]
    mov	qword ptr [rbp + 464], rax                     ; Move 64-bit value
    jmp	.LBB855_12                                     ; Jump instruction
    .LBB855_6:
    lea	rax, [rip + "??_C@_02OOPEBDOJ@pP?$AA@"]
    mov	qword ptr [rbp + 464], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 472]                     ; Move 64-bit value
    add	rax, 2
    cmp	rax, qword ptr [rbp + 592]                     ; Compare values
    ja	.LBB855_11                                      ; Jump instruction
# %bb.7:
    mov	rax, qword ptr [rbp + 584]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 472]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx]
    cmp	eax, 48                                        ; Compare values
    jne	.LBB855_11                                     ; Jump instruction
# %bb.8:
    mov	rax, qword ptr [rbp + 584]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 472]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx + 1]
    cmp	eax, 120                                       ; Compare values
    je	.LBB855_10                                      ; Jump instruction
# %bb.9:
    mov	rax, qword ptr [rbp + 584]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 472]                     ; Move 64-bit value
    movsx	eax, byte ptr [rax + rcx + 1]
    cmp	eax, 88                                        ; Compare values
    jne	.LBB855_11                                     ; Jump instruction
    .LBB855_10:
    mov	rax, qword ptr [rbp + 472]                     ; Move 64-bit value
    add	rax, 2
    mov	qword ptr [rbp + 472], rax                     ; Move 64-bit value
    .LBB855_11:
    jmp	.LBB855_12                                     ; Jump instruction
    .LBB855_12:
    mov	rdx, qword ptr [rbp + 464]                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 584]                     ; Move 64-bit value
    call	strcspn                                       ; Function call
    mov	qword ptr [rbp + 456], rax                     ; Move 64-bit value
    mov	word ptr [rbp + 454], 46
    call	localeconv                                    ; Function call
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	al, byte ptr [rax]
    mov	byte ptr [rbp + 454], al
    mov	rcx, qword ptr [rbp + 584]                     ; Move 64-bit value
    lea	rdx, [rbp + 454]
    call	strcspn                                       ; Function call
    mov	qword ptr [rbp + 440], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    lea	rdx, [rbp + 416]
    mov	qword ptr [rbp + 16], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp + 16]       # 8-byte Reload ; Move 64-bit value
    .Ltmp620:
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp621:
    mov	qword ptr [rbp + 24], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB855_13                                     ; Jump instruction
    .LBB855_13:
    lea	rcx, [rbp + 416]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp + 24]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 432], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 592]                     ; Move 64-bit value
    xor	eax, eax
    mov	dword ptr [rbp + 4], eax        # 4-byte Spill ; Move 32-bit value
    mov	r8b, al
    lea	rcx, [rbp + 384]
    mov	qword ptr [rbp - 8], rcx        # 8-byte Spill ; Move 64-bit value
    call	"??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z" ; Function call
    mov	rcx, qword ptr [rbp - 8]        # 8-byte Reload ; Move 64-bit value
# kill: def $rdx killed $rax
    mov	eax, dword ptr [rbp + 4]        # 4-byte Reload ; Move 32-bit value
    mov	rdx, qword ptr [rbp + 432]                     ; Move 64-bit value
    mov	qword ptr [rbp + 8], rdx        # 8-byte Spill ; Move 64-bit value
    mov	edx, eax
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rbp + 8]        # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rdx, qword ptr [rbp + 584]                     ; Move 64-bit value
    mov	rax, qword ptr [rbp + 592]                     ; Move 64-bit value
    mov	r8, rdx
    add	r8, rax
    .Ltmp622:
    call	"?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"   ; Function call
    .Ltmp623:
    jmp	.LBB855_14                                     ; Jump instruction
    .LBB855_14:
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    lea	rdx, [rbp + 360]
    mov	qword ptr [rbp - 24], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 24]       # 8-byte Reload ; Move 64-bit value
    .Ltmp624:
    call	"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp625:
    mov	qword ptr [rbp - 16], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB855_15                                     ; Jump instruction
    .LBB855_15:
    lea	rcx, [rbp + 360]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	rax, qword ptr [rbp - 16]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 376], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 376]                     ; Move 64-bit value
    .Ltmp626:
    lea	rdx, [rbp + 328]
    call	"?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ" ; Function call
    .Ltmp627:
    jmp	.LBB855_16                                     ; Jump instruction
    .LBB855_16:
    mov	rcx, qword ptr [rbp + 376]                     ; Move 64-bit value
    .Ltmp628:
    call	"?thousands_sep@?$numpunct@D@std@@QEBADXZ"    ; Function call
    .Ltmp629:
    mov	byte ptr [rbp - 25], al         # 1-byte Spill
    jmp	.LBB855_17                                     ; Jump instruction
    .LBB855_17:
    mov	al, byte ptr [rbp - 25]         # 1-byte Reload
    mov	byte ptr [rbp + 327], al
    mov	rax, qword ptr [rbp + 440]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 592]                     ; Compare values
    je	.LBB855_22                                      ; Jump instruction
# %bb.18:
    mov	rcx, qword ptr [rbp + 376]                     ; Move 64-bit value
    .Ltmp630:
    call	"?decimal_point@?$numpunct@D@std@@QEBADXZ"    ; Function call
    .Ltmp631:
    mov	byte ptr [rbp - 26], al         # 1-byte Spill
    jmp	.LBB855_19                                     ; Jump instruction
    .LBB855_19:
    mov	rdx, qword ptr [rbp + 440]                     ; Move 64-bit value
    lea	rcx, [rbp + 384]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	cl, byte ptr [rbp - 26]         # 1-byte Reload
    mov	byte ptr [rax], cl
    jmp	.LBB855_22                                     ; Jump instruction
    .LBB855_22:
    test	byte ptr [rbp + 511], 1                       ; Test values
    je	.LBB855_36                                      ; Jump instruction
# %bb.23:
    mov	rax, qword ptr [rbp + 440]                     ; Move 64-bit value
    cmp	rax, qword ptr [rbp + 592]                     ; Compare values
    jne	.LBB855_25                                     ; Jump instruction
# %bb.24:
    mov	rax, qword ptr [rbp + 456]                     ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB855_26                                     ; Jump instruction
    .LBB855_25:
    mov	rax, qword ptr [rbp + 440]                     ; Move 64-bit value
    mov	qword ptr [rbp - 40], rax       # 8-byte Spill ; Move 64-bit value
    .LBB855_26:
    mov	rax, qword ptr [rbp - 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rbp + 312], rax                     ; Move 64-bit value
    lea	rcx, [rbp + 328]
    xor	eax, eax
    mov	edx, eax
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z" ; Function call
    mov	qword ptr [rbp + 304], rax                     ; Move 64-bit value
    .LBB855_27:                             # =>This Inner Loop Header: Depth=1
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax]
    xor	eax, eax
# kill: def $al killed $al killed $eax
    cmp	ecx, 127                                       ; Compare values
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    je	.LBB855_30                                      ; Jump instruction
# %bb.28:                               #   in Loop: Header=BB855_27 Depth=1
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    movsx	edx, byte ptr [rax]
    xor	eax, eax
# kill: def $al killed $al killed $eax
    xor	ecx, ecx
    cmp	ecx, edx                                       ; Compare values
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    jge	.LBB855_30                                     ; Jump instruction
# %bb.29:                               #   in Loop: Header=BB855_27 Depth=1
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    movsx	rax, byte ptr [rax]
    mov	rcx, qword ptr [rbp + 312]                     ; Move 64-bit value
    sub	rcx, qword ptr [rbp + 472]
    cmp	rax, rcx                                       ; Compare values
    setb	al
    mov	byte ptr [rbp - 41], al         # 1-byte Spill
    .LBB855_30:                             #   in Loop: Header=BB855_27 Depth=1
    mov	al, byte ptr [rbp - 41]         # 1-byte Reload
    test	al, 1                                         ; Test values
    jne	.LBB855_31                                     ; Jump instruction
    jmp	.LBB855_35                                     ; Jump instruction
    .LBB855_31:                             #   in Loop: Header=BB855_27 Depth=1
    mov	r9b, byte ptr [rbp + 327]
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    movsx	rax, byte ptr [rax]
    mov	rdx, qword ptr [rbp + 312]                     ; Move 64-bit value
    sub	rdx, rax
    mov	qword ptr [rbp + 312], rdx                     ; Move 64-bit value
    .Ltmp646:
    lea	rcx, [rbp + 384]
    mov	r8d, 1
    call	"?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z" ; Function call
    .Ltmp647:
    jmp	.LBB855_32                                     ; Jump instruction
    .LBB855_32:                             #   in Loop: Header=BB855_27 Depth=1
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    movsx	ecx, byte ptr [rax + 1]
    xor	eax, eax
    cmp	eax, ecx                                       ; Compare values
    jge	.LBB855_34                                     ; Jump instruction
# %bb.33:                               #   in Loop: Header=BB855_27 Depth=1
    mov	rax, qword ptr [rbp + 304]                     ; Move 64-bit value
    add	rax, 1
    mov	qword ptr [rbp + 304], rax                     ; Move 64-bit value
    .LBB855_34:                             #   in Loop: Header=BB855_27 Depth=1
    jmp	.LBB855_27                                     ; Jump instruction
    .LBB855_35:
    jmp	.LBB855_36                                     ; Jump instruction
    .LBB855_36:
    lea	rcx, [rbp + 384]
    call	"?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    mov	qword ptr [rbp + 592], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, 0                                         ; Compare values
    jle	.LBB855_38                                     ; Jump instruction
# %bb.37:
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    cmp	rax, qword ptr [rbp + 592]                     ; Compare values
    ja	.LBB855_39                                      ; Jump instruction
    .LBB855_38:
    mov	qword ptr [rbp + 296], 0                       ; Move 64-bit value
    jmp	.LBB855_40                                     ; Jump instruction
    .LBB855_39:
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    call	"?width@ios_base@std@@QEBA_JXZ"               ; Function call
    sub	rax, qword ptr [rbp + 592]
    mov	qword ptr [rbp + 296], rax                     ; Move 64-bit value
    .LBB855_40:
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    call	"?flags@ios_base@std@@QEBAHXZ"                ; Function call
    and	eax, 448
    mov	dword ptr [rbp + 292], eax                     ; Move 32-bit value
    cmp	dword ptr [rbp + 292], 64                      ; Compare values
    je	.LBB855_45                                      ; Jump instruction
# %bb.41:
    cmp	dword ptr [rbp + 292], 256                     ; Compare values
    je	.LBB855_45                                      ; Jump instruction
# %bb.42:
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 296]                     ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 576]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 256], xmm0
    .Ltmp638:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 272]
    lea	r8, [rbp + 256]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp639:
    jmp	.LBB855_43                                     ; Jump instruction
    .LBB855_43:
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 272]
    movups	xmmword ptr [rax], xmm0
    mov	qword ptr [rbp + 296], 0                       ; Move 64-bit value
    mov	rax, qword ptr [rbp + 472]                     ; Move 64-bit value
    mov	qword ptr [rbp - 56], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	rcx, [rbp + 384]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 224], xmm0
    .Ltmp640:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 240]
    lea	r8, [rbp + 224]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp641:
    jmp	.LBB855_44                                     ; Jump instruction
    .LBB855_44:
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 240]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 248]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    jmp	.LBB855_52                                     ; Jump instruction
    .LBB855_45:
    cmp	dword ptr [rbp + 292], 256                     ; Compare values
    jne	.LBB855_49                                     ; Jump instruction
# %bb.46:
    mov	rax, qword ptr [rbp + 472]                     ; Move 64-bit value
    mov	qword ptr [rbp - 64], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	rcx, [rbp + 384]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 64]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 192], xmm0
    .Ltmp634:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 208]
    lea	r8, [rbp + 192]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp635:
    jmp	.LBB855_47                                     ; Jump instruction
    .LBB855_47:
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 208]
    movups	xmmword ptr [rax], xmm0
    mov	rdx, qword ptr [rbp + 296]                     ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 576]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 160], xmm0
    .Ltmp636:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 176]
    lea	r8, [rbp + 160]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp637:
    jmp	.LBB855_48                                     ; Jump instruction
    .LBB855_48:
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 176]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 184]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    mov	qword ptr [rbp + 296], 0                       ; Move 64-bit value
    jmp	.LBB855_51                                     ; Jump instruction
    .LBB855_49:
    mov	rax, qword ptr [rbp + 472]                     ; Move 64-bit value
    mov	qword ptr [rbp - 72], rax       # 8-byte Spill ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    lea	rcx, [rbp + 384]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 72]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 128], xmm0
    .Ltmp632:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 144]
    lea	r8, [rbp + 128]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp633:
    jmp	.LBB855_50                                     ; Jump instruction
    .LBB855_50:
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 152]                     ; Move 64-bit value
    mov	qword ptr [rax + 8], rcx                       ; Move 64-bit value
    .LBB855_51:
    jmp	.LBB855_52                                     ; Jump instruction
    .LBB855_52:
    mov	rax, qword ptr [rbp + 592]                     ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 472]                     ; Move 64-bit value
    sub	rax, rdx
    mov	qword ptr [rbp - 80], rax       # 8-byte Spill ; Move 64-bit value
    lea	rcx, [rbp + 384]
    call	"??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z" ; Function call
    mov	rdx, qword ptr [rbp - 80]       # 8-byte Reload ; Move 64-bit value
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	r9, rax
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 96], xmm0
    .Ltmp642:
    mov	rax, rsp
    mov	qword ptr [rax + 32], rdx                      ; Move 64-bit value
    lea	rdx, [rbp + 112]
    lea	r8, [rbp + 96]
    call	"?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z" ; Function call
    .Ltmp643:
    jmp	.LBB855_53                                     ; Jump instruction
    .LBB855_53:
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    movups	xmm0, xmmword ptr [rbp + 112]
    movups	xmmword ptr [rax], xmm0
    mov	rcx, qword ptr [rbp + 496]                     ; Move 64-bit value
    xor	eax, eax
    mov	edx, eax
    call	"?width@ios_base@std@@QEAA_J_J@Z"             ; Function call
    mov	rcx, qword ptr [rbp + 64]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rbp + 48]       # 8-byte Reload ; Move 64-bit value
# kill: def $r8 killed $rax
    mov	rax, qword ptr [rbp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	r8, qword ptr [rbp + 296]                      ; Move 64-bit value
    mov	r9b, byte ptr [rbp + 576]
    movups	xmm0, xmmword ptr [rax]
    movaps	xmmword ptr [rbp + 80], xmm0
    .Ltmp644:
    mov	rax, rsp
    mov	qword ptr [rax + 32], r8                       ; Move 64-bit value
    lea	r8, [rbp + 80]
    call	"?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z" ; Function call
    .Ltmp645:
    jmp	.LBB855_54                                     ; Jump instruction
    .LBB855_54:
    lea	rcx, [rbp + 328]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    lea	rcx, [rbp + 384]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp + 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 656
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z")@IMGREL
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$20@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA":
    .seh_proc "?dtor$20@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"
    .LBB855_20:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 416]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$21@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA":
    .seh_proc "?dtor$21@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"
    .LBB855_21:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 360]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$55@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA":
    .seh_proc "?dtor$55@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"
    .LBB855_55:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 328]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$56@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA":
    .seh_proc "?dtor$56@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"
    .LBB855_56:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 48
    .seh_stackalloc 48
    lea	rbp, [rdx + 128]
    .seh_endprologue
    lea	rcx, [rbp + 384]
    call	"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 48
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end82:
    .seh_handlerdata
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .p2align	2, 0x0
    "$cppxdata$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z":
    .long	429065506                       # MagicNumber
    .long	4                               # MaxState
    .long	("$stateUnwindMap$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	8                               # IPMapEntries
    .long	("$ip2state$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z")@IMGREL # IPToStateXData
    .long	648                             # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z":
    .long	-1                              # ToState
    .long	"?dtor$20@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"@IMGREL # Action
    .long	-1                              # ToState
    .long	"?dtor$56@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$55@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"@IMGREL # Action
    .long	1                               # ToState
    .long	"?dtor$21@?0???$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z@4HA"@IMGREL # Action
    "$ip2state$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z":
    .long	.Lfunc_begin82@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp620@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp621@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	.Ltmp622@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp624@IMGREL+1               # IP
    .long	3                               # ToState
    .long	.Ltmp626@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp628@IMGREL+1               # IP
    .long	2                               # ToState
    .long	.Ltmp645@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .section	.text,"xr",discard,"?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
.globl	"?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ" # -- Begin function ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
    .p2align	4, 0x90
    "?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ": # @"?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
    .seh_proc "?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    lea	rdx, [rip + "?_Fake_alloc@std@@3U_Fake_allocator@1@B"]
    call	"?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax + 16], 0                        ; Move 64-bit value
    mov	rax, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rax + 24], 15                       ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ" ; Function call
    mov	byte ptr [rsp + 39], 0
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    lea	rdx, [rsp + 39]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z"
.globl	"?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z" # -- Begin function ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
    .p2align	4, 0x90
    "?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z": # @"?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z"
    .seh_proc "?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	qword ptr [rcx + 16], rax                      ; Move 64-bit value
    mov	byte ptr [rsp + 39], 0
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" ; Function call
    mov	rcx, rax
    add	rcx, qword ptr [rsp + 48]
    lea	rdx, [rsp + 39]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z"
.globl	"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z" # -- Begin function ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
    .p2align	4, 0x90
    "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z": # @"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z"
    .seh_proc "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	byte ptr [rsp + 95], r8b
    mov	qword ptr [rsp + 80], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rcx + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rcx + 24]                      ; Move 64-bit value
    sub	rcx, qword ptr [rsp + 64]
    cmp	rax, rcx                                       ; Compare values
    ja	.LBB858_2                                       ; Jump instruction
# %bb.1:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 80]
    mov	qword ptr [rcx + 16], rax                      ; Move 64-bit value
    call	"?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 95]
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 64]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" ; Function call
    mov	byte ptr [rsp + 55], 0
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 80]
    add	rcx, rax
    lea	rdx, [rsp + 55]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    mov	rax, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    jmp	.LBB858_3                                      ; Jump instruction
    .LBB858_2:
    mov	rcx, qword ptr [rsp + 40]       # 8-byte Reload ; Move 64-bit value
    mov	al, byte ptr [rsp + 95]
    mov	r9, qword ptr [rsp + 80]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	r8b, byte ptr [rsp + 54]
    mov	byte ptr [rsp + 32], al
    call	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    .LBB858_3:
    mov	rax, qword ptr [rsp + 96]                      ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
.globl	"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z" # -- Begin function ??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z
    .p2align	4, 0x90
    "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z": # @"??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
    .seh_proc "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
# %bb.0:
    sub	rsp, 184
    .seh_stackalloc 184
    .seh_endprologue
    mov	al, byte ptr [rsp + 224]
    mov	byte ptr [rsp + 183], r8b
    mov	qword ptr [rsp + 168], r9                      ; Move 64-bit value
    mov	qword ptr [rsp + 160], rdx                     ; Move 64-bit value
    mov	qword ptr [rsp + 152], rcx                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 152]                     ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx       # 8-byte Spill ; Move 64-bit value
    mov	qword ptr [rsp + 144], rcx                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 16]                      ; Move 64-bit value
    mov	qword ptr [rsp + 136], rax                     ; Move 64-bit value
    call	"?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ" ; Function call
    sub	rax, qword ptr [rsp + 136]
    cmp	rax, qword ptr [rsp + 160]                     ; Compare values
    jae	.LBB859_2                                      ; Jump instruction
# %bb.1:
    call	"?_Xlen_string@std@@YAXXZ"                    ; Function call
    .LBB859_2:
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    add	rax, qword ptr [rsp + 160]
    mov	qword ptr [rsp + 128], rax                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rax + 24]                      ; Move 64-bit value
    mov	qword ptr [rsp + 120], rax                     ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 128]                     ; Move 64-bit value
    call	"?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 112], rax                     ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 104], rax                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    lea	rdx, [rsp + 112]
    call	"??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z" ; Function call
    mov	qword ptr [rsp + 96], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    call	"?_Orphan_all@_Container_base0@std@@QEAAXXZ"  ; Function call
    mov	rcx, qword ptr [rsp + 128]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax + 16], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 112]                     ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax + 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	qword ptr [rsp + 88], rax                      ; Move 64-bit value
    cmp	qword ptr [rsp + 120], 15                      ; Compare values
    jbe	.LBB859_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rax, qword ptr [rax]                           ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    mov	al, byte ptr [rsp + 224]
    mov	byte ptr [rsp + 71], al         # 1-byte Spill
    mov	rax, qword ptr [rsp + 168]                     ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax       # 8-byte Spill ; Move 64-bit value
    mov	rax, qword ptr [rsp + 136]                     ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 80]                      ; Move 64-bit value
    call	"??$_Unfancy@D@std@@YAPEADPEAD@Z"             ; Function call
    mov	r8, qword ptr [rsp + 48]        # 8-byte Reload ; Move 64-bit value
    mov	r9, qword ptr [rsp + 56]        # 8-byte Reload ; Move 64-bit value
    mov	rdx, rax
    mov	al, byte ptr [rsp + 71]         # 1-byte Reload
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	byte ptr [rsp + 32], al
    call	"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z" ; Function call
    mov	r8, qword ptr [rsp + 120]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 80]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 104]                     ; Move 64-bit value
    call	"?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z" ; Function call
    mov	rcx, qword ptr [rsp + 96]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	qword ptr [rax], rcx                           ; Move 64-bit value
    jmp	.LBB859_5                                      ; Jump instruction
    .LBB859_4:
    mov	al, byte ptr [rsp + 224]
    mov	r9, qword ptr [rsp + 168]                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 136]                      ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 144]                     ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 88]                      ; Move 64-bit value
    mov	byte ptr [rsp + 32], al
    call	"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z" ; Function call
    mov	rcx, qword ptr [rsp + 144]                     ; Move 64-bit value
    lea	rdx, [rsp + 96]
    call	"??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z" ; Function call
    .LBB859_5:
    mov	rax, qword ptr [rsp + 72]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 184
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z"
.globl	"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z" # -- Begin function ??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z
    .p2align	4, 0x90
    "??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z": # @"??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z"
    .seh_proc "??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z"
# %bb.0:
    sub	rsp, 72
    .seh_stackalloc 72
    .seh_endprologue
    mov	al, byte ptr [rsp + 112]
    mov	qword ptr [rsp + 64], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 56], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	r8, qword ptr [rsp + 56]                       ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    call	"?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z" ; Function call
    mov	r8b, byte ptr [rsp + 112]
    mov	rdx, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    add	rcx, qword ptr [rsp + 56]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z" ; Function call
    mov	byte ptr [rsp + 39], 0
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 56]                      ; Move 64-bit value
    add	rax, qword ptr [rsp + 64]
    add	rcx, rax
    lea	rdx, [rsp + 39]
    call	"?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z" ; Function call
    nop
    add	rsp, 72
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Float_put_desired_precision@N@std@@YAH_JH@Z"
.globl	"??$_Float_put_desired_precision@N@std@@YAH_JH@Z" # -- Begin function ??$_Float_put_desired_precision@N@std@@YAH_JH@Z
    .p2align	4, 0x90
    "??$_Float_put_desired_precision@N@std@@YAH_JH@Z": # @"??$_Float_put_desired_precision@N@std@@YAH_JH@Z"
    .seh_proc "??$_Float_put_desired_precision@N@std@@YAH_JH@Z"
# %bb.0:
    sub	rsp, 24
    .seh_stackalloc 24
    .seh_endprologue
    mov	dword ptr [rsp + 16], edx                      ; Move 32-bit value
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    cmp	dword ptr [rsp + 16], 12288                    ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rsp + 7], al
    test	byte ptr [rsp + 7], 1                         ; Test values
    je	.LBB861_2                                       ; Jump instruction
# %bb.1:
    mov	dword ptr [rsp + 20], 13                       ; Move 32-bit value
    jmp	.LBB861_9                                      ; Jump instruction
    .LBB861_2:
    cmp	qword ptr [rsp + 8], 0                         ; Compare values
    jle	.LBB861_4                                      ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
# kill: def $eax killed $eax killed $rax
    mov	dword ptr [rsp + 20], eax                      ; Move 32-bit value
    jmp	.LBB861_9                                      ; Jump instruction
    .LBB861_4:
    cmp	qword ptr [rsp + 8], 0                         ; Compare values
    jne	.LBB861_8                                      ; Jump instruction
# %bb.5:
    cmp	dword ptr [rsp + 16], 0                        ; Compare values
    sete	al
    and	al, 1
    mov	byte ptr [rsp + 6], al
    test	byte ptr [rsp + 6], 1                         ; Test values
    je	.LBB861_7                                       ; Jump instruction
# %bb.6:
    mov	dword ptr [rsp + 20], 1                        ; Move 32-bit value
    jmp	.LBB861_9                                      ; Jump instruction
    .LBB861_7:
    mov	dword ptr [rsp + 20], 0                        ; Move 32-bit value
    jmp	.LBB861_9                                      ; Jump instruction
    .LBB861_8:
    mov	dword ptr [rsp], 6                             ; Move 32-bit value
    mov	dword ptr [rsp + 20], 6                        ; Move 32-bit value
    .LBB861_9:
    mov	eax, dword ptr [rsp + 20]                      ; Move 32-bit value
    add	rsp, 24
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?isfinite@@YA_NN@Z"
.globl	"?isfinite@@YA_NN@Z"            # -- Begin function ?isfinite@@YA_NN@Z
    .p2align	4, 0x90
    "?isfinite@@YA_NN@Z":                   # @"?isfinite@@YA_NN@Z"
    .seh_proc "?isfinite@@YA_NN@Z"
# %bb.0:
    push	rax                                           ; Push to stack
    .seh_stackalloc 8
    .seh_endprologue
    movsd	qword ptr [rsp], xmm0                        ; Load 64-bit double
    movsd	xmm0, qword ptr [rsp]           # xmm0 = mem[0],zero ; Load 64-bit double
    movq	rax, xmm0
    movabs	rcx, 9223372036854775807
    and	rax, rcx
    movabs	rcx, 9218868437227405312
    sub	rax, rcx
    setl	al
    and	al, 1
    pop	rcx                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z"
.globl	"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z" # -- Begin function ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z
    .p2align	4, 0x90
    "?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z": # @"?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z"
    .seh_proc "?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z"
# %bb.0:
    sub	rsp, 48
    .seh_stackalloc 48
    .seh_endprologue
    mov	dword ptr [rsp + 44], r9d                      ; Move 32-bit value
    mov	qword ptr [rsp + 32], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 24], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 16], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    mov	qword ptr [rsp + 8], rax                       ; Move 64-bit value
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 37
    mov	eax, dword ptr [rsp + 44]                      ; Move 32-bit value
    and	eax, 32
    cmp	eax, 0                                         ; Compare values
    je	.LBB863_2                                       ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 43
    .LBB863_2:
    mov	eax, dword ptr [rsp + 44]                      ; Move 32-bit value
    and	eax, 8
    cmp	eax, 0                                         ; Compare values
    je	.LBB863_4                                       ; Jump instruction
# %bb.3:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 35
    .LBB863_4:
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    movsx	eax, byte ptr [rax]
    cmp	eax, 76                                        ; Compare values
    je	.LBB863_6                                       ; Jump instruction
# %bb.5:
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	cl, byte ptr [rax]
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	byte ptr [rax], cl
    jmp	.LBB863_7                                      ; Jump instruction
    .LBB863_6:
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 73
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 54
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rcx, rax
    add	rcx, 1
    mov	qword ptr [rsp + 8], rcx                       ; Move 64-bit value
    mov	byte ptr [rax], 52
    .LBB863_7:
    mov	eax, dword ptr [rsp + 44]                      ; Move 32-bit value
    and	eax, 3584
    mov	dword ptr [rsp + 4], eax                       ; Move 32-bit value
    cmp	dword ptr [rsp + 4], 1024                      ; Compare values
    jne	.LBB863_9                                      ; Jump instruction
# %bb.8:
    mov	al, 111
    mov	byte ptr [rsp + 3], al          # 1-byte Spill
    jmp	.LBB863_13                                     ; Jump instruction
    .LBB863_9:
    cmp	dword ptr [rsp + 4], 2048                      ; Compare values
    je	.LBB863_11                                      ; Jump instruction
# %bb.10:
    mov	rax, qword ptr [rsp + 32]                      ; Move 64-bit value
    mov	al, byte ptr [rax + 1]
    mov	byte ptr [rsp + 2], al          # 1-byte Spill
    jmp	.LBB863_12                                     ; Jump instruction
    .LBB863_11:
    mov	ecx, dword ptr [rsp + 44]                      ; Move 32-bit value
    and	ecx, 4
    mov	al, 88
    mov	dl, 120
    mov	byte ptr [rsp], dl              # 1-byte Spill
    cmp	ecx, 0                                         ; Compare values
    mov	byte ptr [rsp + 1], al          # 1-byte Spill
    jne	.LBB863_15                                     ; Jump instruction
# %bb.14:
    mov	al, byte ptr [rsp]              # 1-byte Reload
    mov	byte ptr [rsp + 1], al          # 1-byte Spill
    .LBB863_15:
    mov	al, byte ptr [rsp + 1]          # 1-byte Reload
    mov	byte ptr [rsp + 2], al          # 1-byte Spill
    .LBB863_12:
    mov	al, byte ptr [rsp + 2]          # 1-byte Reload
    mov	byte ptr [rsp + 3], al          # 1-byte Spill
    .LBB863_13:
    mov	cl, byte ptr [rsp + 3]          # 1-byte Reload
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	rdx, rax
    add	rdx, 1
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	byte ptr [rax], cl
    mov	rax, qword ptr [rsp + 8]                       ; Move 64-bit value
    mov	byte ptr [rax], 0
    mov	rax, qword ptr [rsp + 24]                      ; Move 64-bit value
    add	rsp, 48
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z"
.globl	"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z" # -- Begin function ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
    .p2align	4, 0x90
    "?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z": # @"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z"
    .seh_proc "?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	qword ptr [rsp + 48], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rcx       # 8-byte Spill ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    call	"??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z" ; Function call
# kill: def $rcx killed $rax
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z"
.globl	"??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z" # -- Begin function ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
    .p2align	4, 0x90
    "??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z": # @"??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z"
    .seh_proc "??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z"
# %bb.0:
    sub	rsp, 88
    .seh_stackalloc 88
    .seh_endprologue
    mov	qword ptr [rsp + 72], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 64], rcx                      ; Move 64-bit value
    mov	rax, qword ptr [rsp + 64]                      ; Move 64-bit value
    mov	qword ptr [rsp + 32], rax       # 8-byte Spill ; Move 64-bit value
    cmp	rax, qword ptr [rsp + 72]                      ; Compare values
    jne	.LBB865_2                                      ; Jump instruction
# %bb.1:
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    jmp	.LBB865_3                                      ; Jump instruction
    .LBB865_2:
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 48], rax                      ; Move 64-bit value
    mov	dword ptr [rsp + 44], 0                        ; Move 32-bit value
    call	"?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ" ; Function call
    mov	rdx, qword ptr [rsp + 48]                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 56]                      ; Move 64-bit value
    call	"??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z" ; Function call
    mov	rcx, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	rdx, qword ptr [rsp + 72]                      ; Move 64-bit value
    call	"?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z" ; Function call
    mov	rax, qword ptr [rsp + 32]       # 8-byte Reload ; Move 64-bit value
    mov	qword ptr [rsp + 80], rax                      ; Move 64-bit value
    .LBB865_3:
    mov	rax, qword ptr [rsp + 80]                      ; Move 64-bit value
    add	rsp, 88
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z"
.globl	"??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z" # -- Begin function ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z
    .p2align	4, 0x90
    "??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z": # @"??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z"
    .seh_proc "??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z"
# %bb.0:
    sub	rsp, 16
    .seh_stackalloc 16
    .seh_endprologue
    mov	qword ptr [rsp + 8], rdx                       ; Move 64-bit value
    mov	qword ptr [rsp], rcx                           ; Move 64-bit value
    add	rsp, 16
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
.globl	"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z" # -- Begin function ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
    .p2align	4, 0x90
    "?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z": # @"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .Lfunc_begin83:
    .seh_proc "?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	byte ptr [rbp - 9], dl
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rdx, qword ptr [rbp - 24]                      ; Move 64-bit value
    mov	qword ptr [rbp - 56], rdx       # 8-byte Spill ; Move 64-bit value
    mov	dword ptr [rbp - 28], 0                        ; Move 32-bit value
    lea	rcx, [rbp - 48]
    call	"??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z" ; Function call
    lea	rcx, [rbp - 48]
    call	"??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB867_2                                      ; Jump instruction
# %bb.1:
    mov	eax, dword ptr [rbp - 28]                      ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp - 28], eax                      ; Move 32-bit value
    jmp	.LBB867_10                                     ; Jump instruction
    .LBB867_2:
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    call	"?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ" ; Function call
    mov	rcx, rax
    mov	dl, byte ptr [rbp - 9]
    .Ltmp648:
    call	"?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z" ; Function call
    .Ltmp649:
    mov	dword ptr [rbp - 60], eax       # 4-byte Spill ; Move 32-bit value
    jmp	.LBB867_7                                      ; Jump instruction
    .LBB867_5:                              # Block address taken
    $ehgcr_867_5:
    jmp	.LBB867_6                                      ; Jump instruction
    .LBB867_6:
    jmp	.LBB867_10                                     ; Jump instruction
    .LBB867_7:
    call	"?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"    ; Function call
    mov	edx, dword ptr [rbp - 60]       # 4-byte Reload ; Move 32-bit value
    mov	ecx, eax
    call	"?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z" ; Function call
    test	al, 1                                         ; Test values
    jne	.LBB867_8                                      ; Jump instruction
    jmp	.LBB867_9                                      ; Jump instruction
    .LBB867_8:
    mov	eax, dword ptr [rbp - 28]                      ; Move 32-bit value
    or	eax, 4
    mov	dword ptr [rbp - 28], eax                      ; Move 32-bit value
    .LBB867_9:
    jmp	.LBB867_6                                      ; Jump instruction
    .LBB867_10:
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    mov	edx, dword ptr [rbp - 28]                      ; Move 32-bit value
    .Ltmp652:
    xor	eax, eax
    mov	r8b, al
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp653:
    jmp	.LBB867_11                                     ; Jump instruction
    .LBB867_11:
    lea	rcx, [rbp - 48]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    mov	rax, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z")@IMGREL
    .section	.text,"xr",discard,"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?catch$3@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA":
    .seh_proc "?catch$3@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA"
    .seh_handler __CxxFrameHandler3, @unwind, @except
    .LBB867_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    movsxd	rax, dword ptr [rax + 4]                    ; Move 32-bit value
    add	rcx, rax
    .Ltmp650:
    mov	edx, 4
    mov	r8b, 1
    call	"?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z" ; Function call
    .Ltmp651:
    jmp	.LBB867_4                                      ; Jump instruction
    .LBB867_4:
    lea	rax, [rip + .LBB867_5]
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CATCHRET ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z")@IMGREL
    .section	.text,"xr",discard,"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$12@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA":
    .seh_proc "?dtor$12@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA"
    .LBB867_12:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    lea	rcx, [rbp - 48]
    call	"??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ" ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end83:
    .seh_handlerdata
    .section	.text,"xr",discard,"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .p2align	2, 0x0
    "$cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z":
    .long	429065506                       # MagicNumber
    .long	3                               # MaxState
    .long	("$stateUnwindMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z")@IMGREL # UnwindMap
    .long	1                               # NumTryBlocks
    .long	("$tryMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z")@IMGREL # TryBlockMap
    .long	5                               # IPMapEntries
    .long	("$ip2state$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z":
    .long	-1                              # ToState
    .long	"?dtor$12@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA"@IMGREL # Action
    .long	0                               # ToState
    .long	0                               # Action
    .long	0                               # ToState
    .long	0                               # Action
    "$tryMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z":
    .long	1                               # TryLow
    .long	1                               # TryHigh
    .long	2                               # CatchHigh
    .long	1                               # NumCatches
    .long	("$handlerMap$0$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z")@IMGREL # HandlerArray
    "$handlerMap$0$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z":
    .long	64                              # Adjectives
    .long	0                               # Type
    .long	0                               # CatchObjOffset
    .long	"?catch$3@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA"@IMGREL # Handler
    .long	56                              # ParentFrameOffset
    "$ip2state$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z":
    .long	.Lfunc_begin83@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp648@IMGREL+1               # IP
    .long	1                               # ToState
    .long	.Ltmp652@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp653@IMGREL+1               # IP
    .long	-1                              # ToState
    .long	"?catch$3@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA"@IMGREL # IP
    .long	2                               # ToState
    .section	.text,"xr",discard,"?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .section	.text,"xr",discard,"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
.globl	"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z" # -- Begin function ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
    .p2align	4, 0x90
    "?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z": # @"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .Lfunc_begin84:
    .seh_proc "?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .seh_handler __CxxFrameHandler3, @unwind, @except
# %bb.0:
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 96
    .seh_stackalloc 96
    lea	rbp, [rsp + 96]
    .seh_setframe rbp, 96
    .seh_endprologue
    mov	qword ptr [rbp - 8], -2                        ; Move 64-bit value
    mov	byte ptr [rbp - 9], dl
    mov	qword ptr [rbp - 24], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rbp - 24]                      ; Move 64-bit value
    lea	rdx, [rbp - 40]
    mov	qword ptr [rbp - 56], rdx       # 8-byte Spill ; Move 64-bit value
    call	"?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"    ; Function call
    mov	rcx, qword ptr [rbp - 56]       # 8-byte Reload ; Move 64-bit value
    .Ltmp654:
    call	"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z" ; Function call
    .Ltmp655:
    mov	qword ptr [rbp - 48], rax       # 8-byte Spill ; Move 64-bit value
    jmp	.LBB868_1                                      ; Jump instruction
    .LBB868_1:
    mov	rcx, qword ptr [rbp - 48]       # 8-byte Reload ; Move 64-bit value
    mov	dl, byte ptr [rbp - 9]
    .Ltmp656:
    call	"?widen@?$ctype@D@std@@QEBADD@Z"              ; Function call
    .Ltmp657:
    mov	byte ptr [rbp - 57], al         # 1-byte Spill
    jmp	.LBB868_2                                      ; Jump instruction
    .LBB868_2:
    lea	rcx, [rbp - 40]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    mov	al, byte ptr [rbp - 57]         # 1-byte Reload
    add	rsp, 96
    pop	rbp                                            ; Pop from stack
    ret                                                ; Return from function
    .seh_handlerdata
    .long	("$cppxdata$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z")@IMGREL
    .section	.text,"xr",discard,"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .seh_endproc
    .p2align	4, 0x90
    "?dtor$3@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA":
    .seh_proc "?dtor$3@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA"
    .LBB868_3:
    mov	qword ptr [rsp + 16], rdx                      ; Move 64-bit value
    push	rbp                                           ; Push to stack
    .seh_pushreg rbp                                   ; Push to stack
    sub	rsp, 32
    .seh_stackalloc 32
    lea	rbp, [rdx + 96]
    .seh_endprologue
    lea	rcx, [rbp - 40]
    call	"??1locale@std@@QEAA@XZ"                      ; Function call
    nop
    add	rsp, 32
    pop	rbp                                            ; Pop from stack
    ret                                     # CLEANUPRET ; Return from function
    .Lfunc_end84:
    .seh_handlerdata
    .section	.text,"xr",discard,"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .seh_endproc
    .section	.xdata,"dr",associative,"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .p2align	2, 0x0
    "$cppxdata$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z":
    .long	429065506                       # MagicNumber
    .long	1                               # MaxState
    .long	("$stateUnwindMap$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z")@IMGREL # UnwindMap
    .long	0                               # NumTryBlocks
    .long	0                               # TryBlockMap
    .long	3                               # IPMapEntries
    .long	("$ip2state$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z")@IMGREL # IPToStateXData
    .long	88                              # UnwindHelp
    .long	0                               # ESTypeList
    .long	1                               # EHFlags
    "$stateUnwindMap$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z":
    .long	-1                              # ToState
    .long	"?dtor$3@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA"@IMGREL # Action
    "$ip2state$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z":
    .long	.Lfunc_begin84@IMGREL           # IP
    .long	-1                              # ToState
    .long	.Ltmp654@IMGREL+1               # IP
    .long	0                               # ToState
    .long	.Ltmp657@IMGREL+1               # IP
    .long	-1                              # ToState
    .section	.text,"xr",discard,"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .section	.text,"xr",discard,"?widen@?$ctype@D@std@@QEBADD@Z"
.globl	"?widen@?$ctype@D@std@@QEBADD@Z" # -- Begin function ?widen@?$ctype@D@std@@QEBADD@Z
    .p2align	4, 0x90
    "?widen@?$ctype@D@std@@QEBADD@Z":       # @"?widen@?$ctype@D@std@@QEBADD@Z"
    .seh_proc "?widen@?$ctype@D@std@@QEBADD@Z"
# %bb.0:
    sub	rsp, 56
    .seh_stackalloc 56
    .seh_endprologue
    mov	byte ptr [rsp + 55], dl
    mov	qword ptr [rsp + 40], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 40]                      ; Move 64-bit value
    mov	dl, byte ptr [rsp + 55]
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    call	qword ptr [rax + 64]                          ; Function call
    nop
    add	rsp, 56
    ret                                                ; Return from function
    .seh_endproc
    .section	.text,"xr",discard,"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
.globl	"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z" # -- Begin function ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
    .p2align	4, 0x90
    "?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z": # @"?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .seh_proc "?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
# %bb.0:
    sub	rsp, 104
    .seh_stackalloc 104
    .seh_endprologue
    mov	rax, rdx
    mov	qword ptr [rsp + 48], rax       # 8-byte Spill ; Move 64-bit value
    movsd	xmm0, qword ptr [rsp + 152]     # xmm0 = mem[0],zero ; Load 64-bit double
    mov	al, byte ptr [rsp + 144]
    mov	qword ptr [rsp + 96], rdx                      ; Move 64-bit value
    mov	qword ptr [rsp + 88], r9                       ; Move 64-bit value
    mov	qword ptr [rsp + 80], r8                       ; Move 64-bit value
    mov	qword ptr [rsp + 72], rcx                      ; Move 64-bit value
    mov	rcx, qword ptr [rsp + 72]                      ; Move 64-bit value
    movsd	xmm0, qword ptr [rsp + 152]     # xmm0 = mem[0],zero ; Load 64-bit double
    mov	r10b, byte ptr [rsp + 144]
    mov	r9, qword ptr [rsp + 88]                       ; Move 64-bit value
    mov	rax, qword ptr [r8]                            ; Move 64-bit value
    mov	qword ptr [rsp + 56], rax                      ; Move 64-bit value
    mov	rax, qword ptr [r8 + 8]                        ; Move 64-bit value
    mov	qword ptr [rsp + 64], rax                      ; Move 64-bit value
    mov	rax, qword ptr [rcx]                           ; Move 64-bit value
    lea	r8, [rsp + 56]
    mov	byte ptr [rsp + 32], r10b
    movsd	qword ptr [rsp + 40], xmm0                   ; Load 64-bit double
    call	qword ptr [rax + 32]                          ; Function call
    mov	rax, qword ptr [rsp + 48]       # 8-byte Reload ; Move 64-bit value
    add	rsp, 104
    ret                                                ; Return from function
    .seh_endproc
    .section	.rdata,"dr"
    .p2align	3, 0x0                          # @INF
    INF:
    .quad	0x7ff0000000000000              # double +Inf
    .section	.rdata,"dr",discard,"??_C@_05MBLBFKHI@Case?5?$AA@"
.globl	"??_C@_05MBLBFKHI@Case?5?$AA@"  # @"??_C@_05MBLBFKHI@Case?5?$AA@"
    "??_C@_05MBLBFKHI@Case?5?$AA@":
    .asciz	"Case "
    .section	.rdata,"dr",discard,"??_C@_01JLIPDDHJ@?3?$AA@"
.globl	"??_C@_01JLIPDDHJ@?3?$AA@"      # @"??_C@_01JLIPDDHJ@?3?$AA@"
    "??_C@_01JLIPDDHJ@?3?$AA@":
    .asciz	":"
    .section	.rdata,"dr",discard,"??_C@_0L@GOOMCKGH@impossible?$AA@"
.globl	"??_C@_0L@GOOMCKGH@impossible?$AA@" # @"??_C@_0L@GOOMCKGH@impossible?$AA@"
    "??_C@_0L@GOOMCKGH@impossible?$AA@":
    .asciz	"impossible"
    .section	.bss,"bw",discard,"?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
.globl	"?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A" # @"?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
    .p2align	3, 0x0
    "?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A":
    .zero	8
    .section	.bss,"bw",discard,"?id@?$numpunct@D@std@@2V0locale@2@A"
.globl	"?id@?$numpunct@D@std@@2V0locale@2@A" # @"?id@?$numpunct@D@std@@2V0locale@2@A"
    .p2align	3, 0x0
    "?id@?$numpunct@D@std@@2V0locale@2@A":
    .zero	8
    .section	.bss,"bw",discard,"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
.globl	"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A" # @"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
    .p2align	3, 0x0
    "?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A":
    .zero	8
    .section	.rdata,"dr"
    "?_Fake_alloc@std@@3U_Fake_allocator@1@B": # @"?_Fake_alloc@std@@3U_Fake_allocator@1@B"
    .zero	1
    .section	.rdata,"dr",discard,"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
.globl	"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@" # @"??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@"
    "??_C@_0BA@FOIKENOD@vector?5too?5long?$AA@":
    .asciz	"vector too long"
    .section	.data,"dw",discard,"??_R0?AVbad_array_new_length@std@@@8"
.globl	"??_R0?AVbad_array_new_length@std@@@8" # @"??_R0?AVbad_array_new_length@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVbad_array_new_length@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVbad_array_new_length@std@@"
    .zero	1
    .section	.xdata,"dr",discard,"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24"
.globl	"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24"
    .p2align	4, 0x0
    "_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24":
    .long	0                               # 0x0
    .long	"??_R0?AVbad_array_new_length@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	24                              # 0x18
    .long	"??0bad_array_new_length@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVbad_alloc@std@@@8"
.globl	"??_R0?AVbad_alloc@std@@@8"     # @"??_R0?AVbad_alloc@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVbad_alloc@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVbad_alloc@std@@"
    .zero	4
    .section	.xdata,"dr",discard,"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24"
.globl	"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24"
    .p2align	4, 0x0
    "_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24":
    .long	16                              # 0x10
    .long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	24                              # 0x18
    .long	"??0bad_alloc@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVexception@std@@@8"
.globl	"??_R0?AVexception@std@@@8"     # @"??_R0?AVexception@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVexception@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVexception@std@@"
    .zero	4
    .section	.xdata,"dr",discard,"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"
.globl	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"
    .p2align	4, 0x0
    "_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24":
    .long	0                               # 0x0
    .long	"??_R0?AVexception@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	24                              # 0x18
    .long	"??0exception@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.xdata,"dr",discard,"_CTA3?AVbad_array_new_length@std@@"
.globl	"_CTA3?AVbad_array_new_length@std@@" # @"_CTA3?AVbad_array_new_length@std@@"
    .p2align	3, 0x0
    "_CTA3?AVbad_array_new_length@std@@":
    .long	3                               # 0x3
    .long	"_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24"@IMGREL
    .long	"_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24"@IMGREL
    .long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"@IMGREL
    .section	.xdata,"dr",discard,"_TI3?AVbad_array_new_length@std@@"
.globl	"_TI3?AVbad_array_new_length@std@@" # @"_TI3?AVbad_array_new_length@std@@"
    .p2align	3, 0x0
    "_TI3?AVbad_array_new_length@std@@":
    .long	0                               # 0x0
    .long	"??1bad_array_new_length@std@@UEAA@XZ"@IMGREL
    .long	0                               # 0x0
    .long	"_CTA3?AVbad_array_new_length@std@@"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
.globl	"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@" # @"??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@"
    "??_C@_0BF@KINCDENJ@bad?5array?5new?5length?$AA@":
    .asciz	"bad array new length"
    .section	.rdata,"dr",largest,"??_7bad_array_new_length@std@@6B@"
    .p2align	4, 0x0                          # @0
    .L__unnamed_1:
    .quad	"??_R4bad_array_new_length@std@@6B@"
    .quad	"??_Gbad_array_new_length@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4bad_array_new_length@std@@6B@"
.globl	"??_R4bad_array_new_length@std@@6B@" # @"??_R4bad_array_new_length@std@@6B@"
    .p2align	4, 0x0
    "??_R4bad_array_new_length@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVbad_array_new_length@std@@@8"@IMGREL
    .long	"??_R3bad_array_new_length@std@@8"@IMGREL
    .long	"??_R4bad_array_new_length@std@@6B@"@IMGREL
    .section	.rdata,"dr",discard,"??_R3bad_array_new_length@std@@8"
.globl	"??_R3bad_array_new_length@std@@8" # @"??_R3bad_array_new_length@std@@8"
    .p2align	3, 0x0
    "??_R3bad_array_new_length@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	3                               # 0x3
    .long	"??_R2bad_array_new_length@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2bad_array_new_length@std@@8"
.globl	"??_R2bad_array_new_length@std@@8" # @"??_R2bad_array_new_length@std@@8"
    .p2align	2, 0x0
    "??_R2bad_array_new_length@std@@8":
    .long	"??_R1A@?0A@EA@bad_array_new_length@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@bad_alloc@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_array_new_length@std@@8"
.globl	"??_R1A@?0A@EA@bad_array_new_length@std@@8" # @"??_R1A@?0A@EA@bad_array_new_length@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@bad_array_new_length@std@@8":
    .long	"??_R0?AVbad_array_new_length@std@@@8"@IMGREL
    .long	2                               # 0x2
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3bad_array_new_length@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_alloc@std@@8"
.globl	"??_R1A@?0A@EA@bad_alloc@std@@8" # @"??_R1A@?0A@EA@bad_alloc@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@bad_alloc@std@@8":
    .long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3bad_alloc@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R3bad_alloc@std@@8"
.globl	"??_R3bad_alloc@std@@8"         # @"??_R3bad_alloc@std@@8"
    .p2align	3, 0x0
    "??_R3bad_alloc@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	2                               # 0x2
    .long	"??_R2bad_alloc@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2bad_alloc@std@@8"
.globl	"??_R2bad_alloc@std@@8"         # @"??_R2bad_alloc@std@@8"
    .p2align	2, 0x0
    "??_R2bad_alloc@std@@8":
    .long	"??_R1A@?0A@EA@bad_alloc@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@exception@std@@8"
.globl	"??_R1A@?0A@EA@exception@std@@8" # @"??_R1A@?0A@EA@exception@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@exception@std@@8":
    .long	"??_R0?AVexception@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3exception@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R3exception@std@@8"
.globl	"??_R3exception@std@@8"         # @"??_R3exception@std@@8"
    .p2align	3, 0x0
    "??_R3exception@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	"??_R2exception@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2exception@std@@8"
.globl	"??_R2exception@std@@8"         # @"??_R2exception@std@@8"
    .p2align	2, 0x0
    "??_R2exception@std@@8":
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",largest,"??_7bad_alloc@std@@6B@"
    .p2align	4, 0x0                          # @1
    .L__unnamed_2:
    .quad	"??_R4bad_alloc@std@@6B@"
    .quad	"??_Gbad_alloc@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4bad_alloc@std@@6B@"
.globl	"??_R4bad_alloc@std@@6B@"       # @"??_R4bad_alloc@std@@6B@"
    .p2align	4, 0x0
    "??_R4bad_alloc@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVbad_alloc@std@@@8"@IMGREL
    .long	"??_R3bad_alloc@std@@8"@IMGREL
    .long	"??_R4bad_alloc@std@@6B@"@IMGREL
    .section	.rdata,"dr",largest,"??_7exception@std@@6B@"
    .p2align	4, 0x0                          # @2
    .L__unnamed_3:
    .quad	"??_R4exception@std@@6B@"
    .quad	"??_Gexception@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4exception@std@@6B@"
.globl	"??_R4exception@std@@6B@"       # @"??_R4exception@std@@6B@"
    .p2align	4, 0x0
    "??_R4exception@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVexception@std@@@8"@IMGREL
    .long	"??_R3exception@std@@8"@IMGREL
    .long	"??_R4exception@std@@6B@"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
.globl	"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@" # @"??_C@_0BC@EOODALEL@Unknown?5exception?$AA@"
    "??_C@_0BC@EOODALEL@Unknown?5exception?$AA@":
    .asciz	"Unknown exception"
    .section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB"
.globl	"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB" # @"?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB"
    .p2align	3, 0x0
    "?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB":
    .quad	0
    .section	.rdata,"dr",discard,"??_C@_00CNPNBAHC@?$AA@"
.globl	"??_C@_00CNPNBAHC@?$AA@"        # @"??_C@_00CNPNBAHC@?$AA@"
    "??_C@_00CNPNBAHC@?$AA@":
    .zero	1
    .section	.rdata,"dr",discard,"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
.globl	"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@" # @"??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@"
    "??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@":
    .asciz	"bad locale name"
    .section	.rdata,"dr",largest,"??_7?$ctype@D@std@@6B@"
    .p2align	4, 0x0                          # @3
    .L__unnamed_4:
    .quad	"??_R4?$ctype@D@std@@6B@"
    .quad	"??_G?$ctype@D@std@@MEAAPEAXI@Z"
    .quad	"?_Incref@facet@locale@std@@UEAAXXZ"
    .quad	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .quad	"?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
    .quad	"?do_tolower@?$ctype@D@std@@MEBADD@Z"
    .quad	"?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z"
    .quad	"?do_toupper@?$ctype@D@std@@MEBADD@Z"
    .quad	"?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z"
    .quad	"?do_widen@?$ctype@D@std@@MEBADD@Z"
    .quad	"?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z"
    .quad	"?do_narrow@?$ctype@D@std@@MEBADDD@Z"
    .section	.rdata,"dr",discard,"??_R4?$ctype@D@std@@6B@"
.globl	"??_R4?$ctype@D@std@@6B@"       # @"??_R4?$ctype@D@std@@6B@"
    .p2align	4, 0x0
    "??_R4?$ctype@D@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV?$ctype@D@std@@@8"@IMGREL
    .long	"??_R3?$ctype@D@std@@8"@IMGREL
    .long	"??_R4?$ctype@D@std@@6B@"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV?$ctype@D@std@@@8"
.globl	"??_R0?AV?$ctype@D@std@@@8"     # @"??_R0?AV?$ctype@D@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV?$ctype@D@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV?$ctype@D@std@@"
    .zero	4
    .section	.rdata,"dr",discard,"??_R3?$ctype@D@std@@8"
.globl	"??_R3?$ctype@D@std@@8"         # @"??_R3?$ctype@D@std@@8"
    .p2align	3, 0x0
    "??_R3?$ctype@D@std@@8":
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	5                               # 0x5
    .long	"??_R2?$ctype@D@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2?$ctype@D@std@@8"
.globl	"??_R2?$ctype@D@std@@8"         # @"??_R2?$ctype@D@std@@8"
    .p2align	4, 0x0
    "??_R2?$ctype@D@std@@8":
    .long	"??_R1A@?0A@EA@?$ctype@D@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@ctype_base@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@facet@locale@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	"??_R17?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$ctype@D@std@@8"
.globl	"??_R1A@?0A@EA@?$ctype@D@std@@8" # @"??_R1A@?0A@EA@?$ctype@D@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@?$ctype@D@std@@8":
    .long	"??_R0?AV?$ctype@D@std@@@8"@IMGREL
    .long	4                               # 0x4
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3?$ctype@D@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@ctype_base@std@@8"
.globl	"??_R1A@?0A@EA@ctype_base@std@@8" # @"??_R1A@?0A@EA@ctype_base@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@ctype_base@std@@8":
    .long	"??_R0?AUctype_base@std@@@8"@IMGREL
    .long	3                               # 0x3
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3ctype_base@std@@8"@IMGREL
    .section	.data,"dw",discard,"??_R0?AUctype_base@std@@@8"
.globl	"??_R0?AUctype_base@std@@@8"    # @"??_R0?AUctype_base@std@@@8"
    .p2align	4, 0x0
    "??_R0?AUctype_base@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AUctype_base@std@@"
    .zero	3
    .section	.rdata,"dr",discard,"??_R3ctype_base@std@@8"
.globl	"??_R3ctype_base@std@@8"        # @"??_R3ctype_base@std@@8"
    .p2align	3, 0x0
    "??_R3ctype_base@std@@8":
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	4                               # 0x4
    .long	"??_R2ctype_base@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2ctype_base@std@@8"
.globl	"??_R2ctype_base@std@@8"        # @"??_R2ctype_base@std@@8"
    .p2align	4, 0x0
    "??_R2ctype_base@std@@8":
    .long	"??_R1A@?0A@EA@ctype_base@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@facet@locale@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	"??_R17?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@facet@locale@std@@8"
.globl	"??_R1A@?0A@EA@facet@locale@std@@8" # @"??_R1A@?0A@EA@facet@locale@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@facet@locale@std@@8":
    .long	"??_R0?AVfacet@locale@std@@@8"@IMGREL
    .long	2                               # 0x2
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3facet@locale@std@@8"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVfacet@locale@std@@@8"
.globl	"??_R0?AVfacet@locale@std@@@8"  # @"??_R0?AVfacet@locale@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVfacet@locale@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVfacet@locale@std@@"
    .zero	1
    .section	.rdata,"dr",discard,"??_R3facet@locale@std@@8"
.globl	"??_R3facet@locale@std@@8"      # @"??_R3facet@locale@std@@8"
    .p2align	3, 0x0
    "??_R3facet@locale@std@@8":
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	3                               # 0x3
    .long	"??_R2facet@locale@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2facet@locale@std@@8"
.globl	"??_R2facet@locale@std@@8"      # @"??_R2facet@locale@std@@8"
    .p2align	2, 0x0
    "??_R2facet@locale@std@@8":
    .long	"??_R1A@?0A@EA@facet@locale@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	"??_R17?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Facet_base@std@@8"
.globl	"??_R1A@?0A@EA@_Facet_base@std@@8" # @"??_R1A@?0A@EA@_Facet_base@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@_Facet_base@std@@8":
    .long	"??_R0?AV_Facet_base@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3_Facet_base@std@@8"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV_Facet_base@std@@@8"
.globl	"??_R0?AV_Facet_base@std@@@8"   # @"??_R0?AV_Facet_base@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV_Facet_base@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV_Facet_base@std@@"
    .zero	2
    .section	.rdata,"dr",discard,"??_R3_Facet_base@std@@8"
.globl	"??_R3_Facet_base@std@@8"       # @"??_R3_Facet_base@std@@8"
    .p2align	3, 0x0
    "??_R3_Facet_base@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	"??_R2_Facet_base@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2_Facet_base@std@@8"
.globl	"??_R2_Facet_base@std@@8"       # @"??_R2_Facet_base@std@@8"
    .p2align	2, 0x0
    "??_R2_Facet_base@std@@8":
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R17?0A@EA@_Crt_new_delete@std@@8"
.globl	"??_R17?0A@EA@_Crt_new_delete@std@@8" # @"??_R17?0A@EA@_Crt_new_delete@std@@8"
    .p2align	4, 0x0
    "??_R17?0A@EA@_Crt_new_delete@std@@8":
    .long	"??_R0?AU_Crt_new_delete@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	8                               # 0x8
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3_Crt_new_delete@std@@8"@IMGREL
    .section	.data,"dw",discard,"??_R0?AU_Crt_new_delete@std@@@8"
.globl	"??_R0?AU_Crt_new_delete@std@@@8" # @"??_R0?AU_Crt_new_delete@std@@@8"
    .p2align	4, 0x0
    "??_R0?AU_Crt_new_delete@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AU_Crt_new_delete@std@@"
    .zero	6
    .section	.rdata,"dr",discard,"??_R3_Crt_new_delete@std@@8"
.globl	"??_R3_Crt_new_delete@std@@8"   # @"??_R3_Crt_new_delete@std@@8"
    .p2align	3, 0x0
    "??_R3_Crt_new_delete@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	"??_R2_Crt_new_delete@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2_Crt_new_delete@std@@8"
.globl	"??_R2_Crt_new_delete@std@@8"   # @"??_R2_Crt_new_delete@std@@8"
    .p2align	2, 0x0
    "??_R2_Crt_new_delete@std@@8":
    .long	"??_R1A@?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
.globl	"??_R1A@?0A@EA@_Crt_new_delete@std@@8" # @"??_R1A@?0A@EA@_Crt_new_delete@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@_Crt_new_delete@std@@8":
    .long	"??_R0?AU_Crt_new_delete@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3_Crt_new_delete@std@@8"@IMGREL
    .section	.rdata,"dr",largest,"??_7ctype_base@std@@6B@"
    .p2align	4, 0x0                          # @4
    .L__unnamed_5:
    .quad	"??_R4ctype_base@std@@6B@"
    .quad	"??_Gctype_base@std@@UEAAPEAXI@Z"
    .quad	"?_Incref@facet@locale@std@@UEAAXXZ"
    .quad	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .section	.rdata,"dr",discard,"??_R4ctype_base@std@@6B@"
.globl	"??_R4ctype_base@std@@6B@"      # @"??_R4ctype_base@std@@6B@"
    .p2align	4, 0x0
    "??_R4ctype_base@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AUctype_base@std@@@8"@IMGREL
    .long	"??_R3ctype_base@std@@8"@IMGREL
    .long	"??_R4ctype_base@std@@6B@"@IMGREL
    .section	.rdata,"dr",largest,"??_7facet@locale@std@@6B@"
    .p2align	4, 0x0                          # @5
    .L__unnamed_6:
    .quad	"??_R4facet@locale@std@@6B@"
    .quad	"??_Gfacet@locale@std@@MEAAPEAXI@Z"
    .quad	"?_Incref@facet@locale@std@@UEAAXXZ"
    .quad	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .section	.rdata,"dr",discard,"??_R4facet@locale@std@@6B@"
.globl	"??_R4facet@locale@std@@6B@"    # @"??_R4facet@locale@std@@6B@"
    .p2align	4, 0x0
    "??_R4facet@locale@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVfacet@locale@std@@@8"@IMGREL
    .long	"??_R3facet@locale@std@@8"@IMGREL
    .long	"??_R4facet@locale@std@@6B@"@IMGREL
    .section	.rdata,"dr",largest,"??_7_Facet_base@std@@6B@"
    .p2align	4, 0x0                          # @6
    .L__unnamed_7:
    .quad	"??_R4_Facet_base@std@@6B@"
    .quad	"??_G_Facet_base@std@@UEAAPEAXI@Z"
    .quad	_purecall                                    ; Function call
    .quad	_purecall                                    ; Function call
    .section	.rdata,"dr",discard,"??_R4_Facet_base@std@@6B@"
.globl	"??_R4_Facet_base@std@@6B@"     # @"??_R4_Facet_base@std@@6B@"
    .p2align	4, 0x0
    "??_R4_Facet_base@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV_Facet_base@std@@@8"@IMGREL
    .long	"??_R3_Facet_base@std@@8"@IMGREL
    .long	"??_R4_Facet_base@std@@6B@"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVbad_cast@std@@@8"
.globl	"??_R0?AVbad_cast@std@@@8"      # @"??_R0?AVbad_cast@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVbad_cast@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVbad_cast@std@@"
    .zero	5
    .section	.xdata,"dr",discard,"_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24"
.globl	"_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24"
    .p2align	4, 0x0
    "_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24":
    .long	0                               # 0x0
    .long	"??_R0?AVbad_cast@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	24                              # 0x18
    .long	"??0bad_cast@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.xdata,"dr",discard,"_CTA2?AVbad_cast@std@@"
.globl	"_CTA2?AVbad_cast@std@@"        # @"_CTA2?AVbad_cast@std@@"
    .p2align	3, 0x0
    "_CTA2?AVbad_cast@std@@":
    .long	2                               # 0x2
    .long	"_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24"@IMGREL
    .long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"@IMGREL
    .section	.xdata,"dr",discard,"_TI2?AVbad_cast@std@@"
.globl	"_TI2?AVbad_cast@std@@"         # @"_TI2?AVbad_cast@std@@"
    .p2align	3, 0x0
    "_TI2?AVbad_cast@std@@":
    .long	0                               # 0x0
    .long	"??1bad_cast@std@@UEAA@XZ"@IMGREL
    .long	0                               # 0x0
    .long	"_CTA2?AVbad_cast@std@@"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_08EPJLHIJG@bad?5cast?$AA@"
.globl	"??_C@_08EPJLHIJG@bad?5cast?$AA@" # @"??_C@_08EPJLHIJG@bad?5cast?$AA@"
    "??_C@_08EPJLHIJG@bad?5cast?$AA@":
    .asciz	"bad cast"
    .section	.rdata,"dr",largest,"??_7bad_cast@std@@6B@"
    .p2align	4, 0x0                          # @7
    .L__unnamed_8:
    .quad	"??_R4bad_cast@std@@6B@"
    .quad	"??_Gbad_cast@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4bad_cast@std@@6B@"
.globl	"??_R4bad_cast@std@@6B@"        # @"??_R4bad_cast@std@@6B@"
    .p2align	4, 0x0
    "??_R4bad_cast@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVbad_cast@std@@@8"@IMGREL
    .long	"??_R3bad_cast@std@@8"@IMGREL
    .long	"??_R4bad_cast@std@@6B@"@IMGREL
    .section	.rdata,"dr",discard,"??_R3bad_cast@std@@8"
.globl	"??_R3bad_cast@std@@8"          # @"??_R3bad_cast@std@@8"
    .p2align	3, 0x0
    "??_R3bad_cast@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	2                               # 0x2
    .long	"??_R2bad_cast@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2bad_cast@std@@8"
.globl	"??_R2bad_cast@std@@8"          # @"??_R2bad_cast@std@@8"
    .p2align	2, 0x0
    "??_R2bad_cast@std@@8":
    .long	"??_R1A@?0A@EA@bad_cast@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@bad_cast@std@@8"
.globl	"??_R1A@?0A@EA@bad_cast@std@@8" # @"??_R1A@?0A@EA@bad_cast@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@bad_cast@std@@8":
    .long	"??_R0?AVbad_cast@std@@@8"@IMGREL
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3bad_cast@std@@8"@IMGREL
    .section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"
.globl	"?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB" # @"?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"
    .p2align	3, 0x0
    "?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB":
    .quad	0
    .section	.rdata,"dr",largest,"??_7?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .p2align	4, 0x0                          # @8
    .L__unnamed_9:
    .quad	"??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .quad	"??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
    .quad	"?_Incref@facet@locale@std@@UEAAXXZ"
    .quad	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z"
    .quad	"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z"
    .section	.rdata,"dr",discard,"??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
.globl	"??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@" # @"??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .p2align	4, 0x0
    "??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"@IMGREL
    .long	"??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .long	"??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
.globl	"??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8" # @"??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@"
    .zero	6
    .section	.rdata,"dr",discard,"??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
.globl	"??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .p2align	3, 0x0
    "??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	4                               # 0x4
    .long	"??_R2?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
.globl	"??_R2?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R2?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .p2align	4, 0x0
    "??_R2?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
    .long	"??_R1A@?0A@EA@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@facet@locale@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	"??_R17?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
.globl	"??_R1A@?0A@EA@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R1A@?0A@EA@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
    .long	"??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"@IMGREL
    .long	3                               # 0x3
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB"
.globl	"?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB" # @"?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB"
    .p2align	4, 0x0
    "?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB":
    .asciz	"0123456789ABCDEFabcdef-+Xx"
    .section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB"
.globl	"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB" # @"?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB"
    .p2align	3, 0x0
    "?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB":
    .quad	0
    .section	.rdata,"dr",largest,"??_7?$numpunct@D@std@@6B@"
    .p2align	4, 0x0                          # @9
    .L__unnamed_10:
    .quad	"??_R4?$numpunct@D@std@@6B@"
    .quad	"??_G?$numpunct@D@std@@MEAAPEAXI@Z"
    .quad	"?_Incref@facet@locale@std@@UEAAXXZ"
    .quad	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .quad	"?do_decimal_point@?$numpunct@D@std@@MEBADXZ"
    .quad	"?do_thousands_sep@?$numpunct@D@std@@MEBADXZ"
    .quad	"?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .quad	"?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .quad	"?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .section	.rdata,"dr",discard,"??_R4?$numpunct@D@std@@6B@"
.globl	"??_R4?$numpunct@D@std@@6B@"    # @"??_R4?$numpunct@D@std@@6B@"
    .p2align	4, 0x0
    "??_R4?$numpunct@D@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV?$numpunct@D@std@@@8"@IMGREL
    .long	"??_R3?$numpunct@D@std@@8"@IMGREL
    .long	"??_R4?$numpunct@D@std@@6B@"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV?$numpunct@D@std@@@8"
.globl	"??_R0?AV?$numpunct@D@std@@@8"  # @"??_R0?AV?$numpunct@D@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV?$numpunct@D@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV?$numpunct@D@std@@"
    .zero	1
    .section	.rdata,"dr",discard,"??_R3?$numpunct@D@std@@8"
.globl	"??_R3?$numpunct@D@std@@8"      # @"??_R3?$numpunct@D@std@@8"
    .p2align	3, 0x0
    "??_R3?$numpunct@D@std@@8":
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	4                               # 0x4
    .long	"??_R2?$numpunct@D@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2?$numpunct@D@std@@8"
.globl	"??_R2?$numpunct@D@std@@8"      # @"??_R2?$numpunct@D@std@@8"
    .p2align	4, 0x0
    "??_R2?$numpunct@D@std@@8":
    .long	"??_R1A@?0A@EA@?$numpunct@D@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@facet@locale@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	"??_R17?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$numpunct@D@std@@8"
.globl	"??_R1A@?0A@EA@?$numpunct@D@std@@8" # @"??_R1A@?0A@EA@?$numpunct@D@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@?$numpunct@D@std@@8":
    .long	"??_R0?AV?$numpunct@D@std@@@8"@IMGREL
    .long	3                               # 0x3
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3?$numpunct@D@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_05LAPONLG@false?$AA@"
.globl	"??_C@_05LAPONLG@false?$AA@"    # @"??_C@_05LAPONLG@false?$AA@"
    "??_C@_05LAPONLG@false?$AA@":
    .asciz	"false"
    .section	.rdata,"dr",discard,"??_C@_04LOAJBDKD@true?$AA@"
.globl	"??_C@_04LOAJBDKD@true?$AA@"    # @"??_C@_04LOAJBDKD@true?$AA@"
    "??_C@_04LOAJBDKD@true?$AA@":
    .asciz	"true"
    .section	.rdata,"dr",discard,"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
.globl	"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@" # @"??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@"
    "??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@":
    .asciz	"string too long"
    .section	.rdata,"dr",discard,"?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"
.globl	"?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB" # @"?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"
    .p2align	4, 0x0
    "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB":
    .asciz	"0123456789ABCDEFabcdef-+XxPp"
    .section	.rdata,"dr",discard,"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
.globl	"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@" # @"??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@"
    "??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@":
    .asciz	"ios_base::badbit set"
    .section	.rdata,"dr",discard,"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
.globl	"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@" # @"??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@"
    "??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@":
    .asciz	"ios_base::failbit set"
    .section	.rdata,"dr",discard,"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
.globl	"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@" # @"??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@"
    "??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@":
    .asciz	"ios_base::eofbit set"
    .section	.data,"dw",discard,"??_R0?AVfailure@ios_base@std@@@8"
.globl	"??_R0?AVfailure@ios_base@std@@@8" # @"??_R0?AVfailure@ios_base@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVfailure@ios_base@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVfailure@ios_base@std@@"
    .zero	5
    .section	.xdata,"dr",discard,"_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40"
.globl	"_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40" # @"_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40"
    .p2align	4, 0x0
    "_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40":
    .long	0                               # 0x0
    .long	"??_R0?AVfailure@ios_base@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	40                              # 0x28
    .long	"??0failure@ios_base@std@@QEAA@AEBV012@@Z"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVsystem_error@std@@@8"
.globl	"??_R0?AVsystem_error@std@@@8"  # @"??_R0?AVsystem_error@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVsystem_error@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVsystem_error@std@@"
    .zero	1
    .section	.xdata,"dr",discard,"_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40"
.globl	"_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40" # @"_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40"
    .p2align	4, 0x0
    "_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40":
    .long	0                               # 0x0
    .long	"??_R0?AVsystem_error@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	40                              # 0x28
    .long	"??0system_error@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV_System_error@std@@@8"
.globl	"??_R0?AV_System_error@std@@@8" # @"??_R0?AV_System_error@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV_System_error@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV_System_error@std@@"
    .section	.xdata,"dr",discard,"_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40"
.globl	"_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40" # @"_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40"
    .p2align	4, 0x0
    "_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40":
    .long	0                               # 0x0
    .long	"??_R0?AV_System_error@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	40                              # 0x28
    .long	"??0_System_error@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVruntime_error@std@@@8"
.globl	"??_R0?AVruntime_error@std@@@8" # @"??_R0?AVruntime_error@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVruntime_error@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVruntime_error@std@@"
    .section	.xdata,"dr",discard,"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24"
.globl	"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24" # @"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24"
    .p2align	4, 0x0
    "_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24":
    .long	0                               # 0x0
    .long	"??_R0?AVruntime_error@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	24                              # 0x18
    .long	"??0runtime_error@std@@QEAA@AEBV01@@Z"@IMGREL
    .section	.xdata,"dr",discard,"_CTA5?AVfailure@ios_base@std@@"
.globl	"_CTA5?AVfailure@ios_base@std@@" # @"_CTA5?AVfailure@ios_base@std@@"
    .p2align	4, 0x0
    "_CTA5?AVfailure@ios_base@std@@":
    .long	5                               # 0x5
    .long	"_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40"@IMGREL
    .long	"_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40"@IMGREL
    .long	"_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40"@IMGREL
    .long	"_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24"@IMGREL
    .long	"_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24"@IMGREL
    .section	.xdata,"dr",discard,"_TI5?AVfailure@ios_base@std@@"
.globl	"_TI5?AVfailure@ios_base@std@@" # @"_TI5?AVfailure@ios_base@std@@"
    .p2align	3, 0x0
    "_TI5?AVfailure@ios_base@std@@":
    .long	0                               # 0x0
    .long	"??1failure@ios_base@std@@UEAA@XZ"@IMGREL
    .long	0                               # 0x0
    .long	"_CTA5?AVfailure@ios_base@std@@"@IMGREL
    .section	.data,"dw",discard,"?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A"
.globl	"?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A" # @"?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A"
    .p2align	3, 0x0
    "?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A":
    .quad	"??_7_Iostream_error_category2@std@@6B@"
    .quad	5                               # 0x5
    .section	.rdata,"dr",largest,"??_7_Iostream_error_category2@std@@6B@"
    .p2align	4, 0x0                          # @10
    .L__unnamed_11:
    .quad	"??_R4_Iostream_error_category2@std@@6B@"
    .quad	"??_G_Iostream_error_category2@std@@UEAAPEAXI@Z"
    .quad	"?name@_Iostream_error_category2@std@@UEBAPEBDXZ"
    .quad	"?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z"
    .quad	"?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z"
    .quad	"?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z"
    .quad	"?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z"
    .section	.bss,"bw",discard,"?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"
.globl	"?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA" # @"?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"
    .p2align	2, 0x0
    "?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA":
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R4_Iostream_error_category2@std@@6B@"
.globl	"??_R4_Iostream_error_category2@std@@6B@" # @"??_R4_Iostream_error_category2@std@@6B@"
    .p2align	4, 0x0
    "??_R4_Iostream_error_category2@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV_Iostream_error_category2@std@@@8"@IMGREL
    .long	"??_R3_Iostream_error_category2@std@@8"@IMGREL
    .long	"??_R4_Iostream_error_category2@std@@6B@"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV_Iostream_error_category2@std@@@8"
.globl	"??_R0?AV_Iostream_error_category2@std@@@8" # @"??_R0?AV_Iostream_error_category2@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV_Iostream_error_category2@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV_Iostream_error_category2@std@@"
    .zero	4
    .section	.rdata,"dr",discard,"??_R3_Iostream_error_category2@std@@8"
.globl	"??_R3_Iostream_error_category2@std@@8" # @"??_R3_Iostream_error_category2@std@@8"
    .p2align	3, 0x0
    "??_R3_Iostream_error_category2@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	2                               # 0x2
    .long	"??_R2_Iostream_error_category2@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2_Iostream_error_category2@std@@8"
.globl	"??_R2_Iostream_error_category2@std@@8" # @"??_R2_Iostream_error_category2@std@@8"
    .p2align	2, 0x0
    "??_R2_Iostream_error_category2@std@@8":
    .long	"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@error_category@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
.globl	"??_R1A@?0A@EA@_Iostream_error_category2@std@@8" # @"??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@_Iostream_error_category2@std@@8":
    .long	"??_R0?AV_Iostream_error_category2@std@@@8"@IMGREL
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3_Iostream_error_category2@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@error_category@std@@8"
.globl	"??_R1A@?0A@EA@error_category@std@@8" # @"??_R1A@?0A@EA@error_category@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@error_category@std@@8":
    .long	"??_R0?AVerror_category@std@@@8"@IMGREL
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3error_category@std@@8"@IMGREL
    .section	.data,"dw",discard,"??_R0?AVerror_category@std@@@8"
.globl	"??_R0?AVerror_category@std@@@8" # @"??_R0?AVerror_category@std@@@8"
    .p2align	4, 0x0
    "??_R0?AVerror_category@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AVerror_category@std@@"
    .zero	7
    .section	.rdata,"dr",discard,"??_R3error_category@std@@8"
.globl	"??_R3error_category@std@@8"    # @"??_R3error_category@std@@8"
    .p2align	3, 0x0
    "??_R3error_category@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	"??_R2error_category@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2error_category@std@@8"
.globl	"??_R2error_category@std@@8"    # @"??_R2error_category@std@@8"
    .p2align	2, 0x0
    "??_R2error_category@std@@8":
    .long	"??_R1A@?0A@EA@error_category@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_C@_08LLGCOLLL@iostream?$AA@"
.globl	"??_C@_08LLGCOLLL@iostream?$AA@" # @"??_C@_08LLGCOLLL@iostream?$AA@"
    "??_C@_08LLGCOLLL@iostream?$AA@":
    .asciz	"iostream"
    .section	.rdata,"dr",discard,"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
.globl	"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB" # @"?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
    .p2align	4, 0x0
    "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB":
    .asciz	"iostream stream error"
    .section	.rdata,"dr",largest,"??_7failure@ios_base@std@@6B@"
    .p2align	4, 0x0                          # @11
    .L__unnamed_12:
    .quad	"??_R4failure@ios_base@std@@6B@"
    .quad	"??_Gfailure@ios_base@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4failure@ios_base@std@@6B@"
.globl	"??_R4failure@ios_base@std@@6B@" # @"??_R4failure@ios_base@std@@6B@"
    .p2align	4, 0x0
    "??_R4failure@ios_base@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVfailure@ios_base@std@@@8"@IMGREL
    .long	"??_R3failure@ios_base@std@@8"@IMGREL
    .long	"??_R4failure@ios_base@std@@6B@"@IMGREL
    .section	.rdata,"dr",discard,"??_R3failure@ios_base@std@@8"
.globl	"??_R3failure@ios_base@std@@8"  # @"??_R3failure@ios_base@std@@8"
    .p2align	3, 0x0
    "??_R3failure@ios_base@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	5                               # 0x5
    .long	"??_R2failure@ios_base@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2failure@ios_base@std@@8"
.globl	"??_R2failure@ios_base@std@@8"  # @"??_R2failure@ios_base@std@@8"
    .p2align	4, 0x0
    "??_R2failure@ios_base@std@@8":
    .long	"??_R1A@?0A@EA@failure@ios_base@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@system_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_System_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@failure@ios_base@std@@8"
.globl	"??_R1A@?0A@EA@failure@ios_base@std@@8" # @"??_R1A@?0A@EA@failure@ios_base@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@failure@ios_base@std@@8":
    .long	"??_R0?AVfailure@ios_base@std@@@8"@IMGREL
    .long	4                               # 0x4
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3failure@ios_base@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@system_error@std@@8"
.globl	"??_R1A@?0A@EA@system_error@std@@8" # @"??_R1A@?0A@EA@system_error@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@system_error@std@@8":
    .long	"??_R0?AVsystem_error@std@@@8"@IMGREL
    .long	3                               # 0x3
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3system_error@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R3system_error@std@@8"
.globl	"??_R3system_error@std@@8"      # @"??_R3system_error@std@@8"
    .p2align	3, 0x0
    "??_R3system_error@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	4                               # 0x4
    .long	"??_R2system_error@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2system_error@std@@8"
.globl	"??_R2system_error@std@@8"      # @"??_R2system_error@std@@8"
    .p2align	4, 0x0
    "??_R2system_error@std@@8":
    .long	"??_R1A@?0A@EA@system_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_System_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@_System_error@std@@8"
.globl	"??_R1A@?0A@EA@_System_error@std@@8" # @"??_R1A@?0A@EA@_System_error@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@_System_error@std@@8":
    .long	"??_R0?AV_System_error@std@@@8"@IMGREL
    .long	2                               # 0x2
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3_System_error@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R3_System_error@std@@8"
.globl	"??_R3_System_error@std@@8"     # @"??_R3_System_error@std@@8"
    .p2align	3, 0x0
    "??_R3_System_error@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	3                               # 0x3
    .long	"??_R2_System_error@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2_System_error@std@@8"
.globl	"??_R2_System_error@std@@8"     # @"??_R2_System_error@std@@8"
    .p2align	2, 0x0
    "??_R2_System_error@std@@8":
    .long	"??_R1A@?0A@EA@_System_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@runtime_error@std@@8"
.globl	"??_R1A@?0A@EA@runtime_error@std@@8" # @"??_R1A@?0A@EA@runtime_error@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@runtime_error@std@@8":
    .long	"??_R0?AVruntime_error@std@@@8"@IMGREL
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3runtime_error@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R3runtime_error@std@@8"
.globl	"??_R3runtime_error@std@@8"     # @"??_R3runtime_error@std@@8"
    .p2align	3, 0x0
    "??_R3runtime_error@std@@8":
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	2                               # 0x2
    .long	"??_R2runtime_error@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2runtime_error@std@@8"
.globl	"??_R2runtime_error@std@@8"     # @"??_R2runtime_error@std@@8"
    .p2align	2, 0x0
    "??_R2runtime_error@std@@8":
    .long	"??_R1A@?0A@EA@runtime_error@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@exception@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",largest,"??_7system_error@std@@6B@"
    .p2align	4, 0x0                          # @12
    .L__unnamed_13:
    .quad	"??_R4system_error@std@@6B@"
    .quad	"??_Gsystem_error@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4system_error@std@@6B@"
.globl	"??_R4system_error@std@@6B@"    # @"??_R4system_error@std@@6B@"
    .p2align	4, 0x0
    "??_R4system_error@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVsystem_error@std@@@8"@IMGREL
    .long	"??_R3system_error@std@@8"@IMGREL
    .long	"??_R4system_error@std@@6B@"@IMGREL
    .section	.rdata,"dr",largest,"??_7_System_error@std@@6B@"
    .p2align	4, 0x0                          # @13
    .L__unnamed_14:
    .quad	"??_R4_System_error@std@@6B@"
    .quad	"??_G_System_error@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4_System_error@std@@6B@"
.globl	"??_R4_System_error@std@@6B@"   # @"??_R4_System_error@std@@6B@"
    .p2align	4, 0x0
    "??_R4_System_error@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV_System_error@std@@@8"@IMGREL
    .long	"??_R3_System_error@std@@8"@IMGREL
    .long	"??_R4_System_error@std@@6B@"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_02LMMGGCAJ@?3?5?$AA@"
.globl	"??_C@_02LMMGGCAJ@?3?5?$AA@"    # @"??_C@_02LMMGGCAJ@?3?5?$AA@"
    "??_C@_02LMMGGCAJ@?3?5?$AA@":
    .asciz	": "
    .section	.rdata,"dr",largest,"??_7runtime_error@std@@6B@"
    .p2align	4, 0x0                          # @14
    .L__unnamed_15:
    .quad	"??_R4runtime_error@std@@6B@"
    .quad	"??_Gruntime_error@std@@UEAAPEAXI@Z"
    .quad	"?what@exception@std@@UEBAPEBDXZ"
    .section	.rdata,"dr",discard,"??_R4runtime_error@std@@6B@"
.globl	"??_R4runtime_error@std@@6B@"   # @"??_R4runtime_error@std@@6B@"
    .p2align	4, 0x0
    "??_R4runtime_error@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AVruntime_error@std@@@8"@IMGREL
    .long	"??_R3runtime_error@std@@8"@IMGREL
    .long	"??_R4runtime_error@std@@6B@"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
.globl	"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@" # @"??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@"
    "??_C@_0BB@GCADKGJO@map?1set?5too?5long?$AA@":
    .asciz	"map/set too long"
    .section	.rdata,"dr"
    "?piecewise_construct@std@@3Upiecewise_construct_t@1@B": # @"?piecewise_construct@std@@3Upiecewise_construct_t@1@B"
    .zero	1
    .section	.bss,"bw",discard,"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"
.globl	"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB" # @"?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"
    .p2align	3, 0x0
    "?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB":
    .quad	0
    .section	.rdata,"dr",largest,"??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .p2align	4, 0x0                          # @15
    .L__unnamed_16:
    .quad	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .quad	"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z"
    .quad	"?_Incref@facet@locale@std@@UEAAXXZ"
    .quad	"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
    .quad	"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z"
    .section	.rdata,"dr",discard,"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
.globl	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@" # @"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .p2align	4, 0x0
    "??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@":
    .long	1                               # 0x1
    .long	0                               # 0x0
    .long	0                               # 0x0
    .long	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"@IMGREL
    .long	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .long	"??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"@IMGREL
    .section	.data,"dw",discard,"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
.globl	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8" # @"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
    .p2align	4, 0x0
    "??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8":
    .quad	"??_7type_info@@6B@"
    .quad	0
    .asciz	".?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@"
    .zero	6
    .section	.rdata,"dr",discard,"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
.globl	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .p2align	3, 0x0
    "??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
    .long	0                               # 0x0
    .long	1                               # 0x1
    .long	4                               # 0x4
    .long	"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
.globl	"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .p2align	4, 0x0
    "??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
    .long	"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@facet@locale@std@@8"@IMGREL
    .long	"??_R1A@?0A@EA@_Facet_base@std@@8"@IMGREL
    .long	"??_R17?0A@EA@_Crt_new_delete@std@@8"@IMGREL
    .long	0                               # 0x0
    .section	.rdata,"dr",discard,"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
.globl	"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8" # @"??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .p2align	4, 0x0
    "??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8":
    .long	"??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"@IMGREL
    .long	3                               # 0x3
    .long	0                               # 0x0
    .long	4294967295                      # 0xffffffff
    .long	0                               # 0x0
    .long	64                              # 0x40
    .long	"??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"@IMGREL
    .section	.rdata,"dr",discard,"??_C@_02BBAHNLBA@?$CFp?$AA@"
.globl	"??_C@_02BBAHNLBA@?$CFp?$AA@"   # @"??_C@_02BBAHNLBA@?$CFp?$AA@"
    "??_C@_02BBAHNLBA@?$CFp?$AA@":
    .asciz	"%p"
    .section	.rdata,"dr",discard,"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
.globl	"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@" # @"??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@"
    "??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@":
    .asciz	"invalid string position"
    .section	.bss,"bw",discard,"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
.globl	"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA" # @"?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
    .p2align	3, 0x0
    "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA":
    .quad	0                               # 0x0
    .section	.rdata,"dr",discard,"??_C@_02MDKMJEGG@eE?$AA@"
.globl	"??_C@_02MDKMJEGG@eE?$AA@"      # @"??_C@_02MDKMJEGG@eE?$AA@"
    "??_C@_02MDKMJEGG@eE?$AA@":
    .asciz	"eE"
    .section	.rdata,"dr",discard,"??_C@_02OOPEBDOJ@pP?$AA@"
.globl	"??_C@_02OOPEBDOJ@pP?$AA@"      # @"??_C@_02OOPEBDOJ@pP?$AA@"
    "??_C@_02OOPEBDOJ@pP?$AA@":
    .asciz	"pP"
    .section	.rdata,"dr"
    ".L__const.??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z._Dp": # @"__const.??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z._Dp"
    .asciz	"."
    .section	.rdata,"dr",discard,"??_C@_02CLHGNPPK@Lu?$AA@"
.globl	"??_C@_02CLHGNPPK@Lu?$AA@"      # @"??_C@_02CLHGNPPK@Lu?$AA@"
    "??_C@_02CLHGNPPK@Lu?$AA@":
    .asciz	"Lu"
    .section	.rdata,"dr",discard,"??_C@_02HIKPPMOK@Ld?$AA@"
.globl	"??_C@_02HIKPPMOK@Ld?$AA@"      # @"??_C@_02HIKPPMOK@Ld?$AA@"
    "??_C@_02HIKPPMOK@Ld?$AA@":
    .asciz	"Ld"
    .section	.rdata,"dr",discard,"??_C@_02BDDLJJBK@lu?$AA@"
.globl	"??_C@_02BDDLJJBK@lu?$AA@"      # @"??_C@_02BDDLJJBK@lu?$AA@"
    "??_C@_02BDDLJJBK@lu?$AA@":
    .asciz	"lu"
    .section	.rdata,"dr",discard,"??_C@_02EAOCLKAK@ld?$AA@"
.globl	"??_C@_02EAOCLKAK@ld?$AA@"      # @"??_C@_02EAOCLKAK@ld?$AA@"
    "??_C@_02EAOCLKAK@ld?$AA@":
    .asciz	"ld"
    .section	.CRT$XCU,"dr",associative,"?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
    .p2align	3, 0x0
    .quad	"??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
    .section	.CRT$XCU,"dr",associative,"?id@?$numpunct@D@std@@2V0locale@2@A"
    .p2align	3, 0x0
    .quad	"??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
    .section	.CRT$XCU,"dr",associative,"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
    .p2align	3, 0x0
    .quad	"??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
    .section	.drectve,"yni"
    .ascii	" /FAILIFMISMATCH:\"_MSC_VER=1900\""
    .ascii	" /FAILIFMISMATCH:\"_ITERATOR_DEBUG_LEVEL=0\""
    .ascii	" /FAILIFMISMATCH:\"RuntimeLibrary=MT_StaticRelease\""
    .ascii	" /DEFAULTLIB:libcpmt.lib"
    .ascii	" /FAILIFMISMATCH:\"_CRT_STDIO_ISO_WIDE_SPECIFIERS=0\""
    .ascii	" /FAILIFMISMATCH:\"annotate_string=0\""
    .ascii	" /FAILIFMISMATCH:\"annotate_vector=0\""
    .ascii	" /INCLUDE:\"?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A\""
    .ascii	" /INCLUDE:\"?id@?$numpunct@D@std@@2V0locale@2@A\""
    .ascii	" /INCLUDE:\"?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A\""
.globl	"??_7bad_array_new_length@std@@6B@"
.globl	"??_7bad_alloc@std@@6B@"
.globl	"??_7exception@std@@6B@"
.globl	"??_7?$ctype@D@std@@6B@"
.globl	"??_7ctype_base@std@@6B@"
.globl	"??_7facet@locale@std@@6B@"
.globl	"??_7_Facet_base@std@@6B@"
.globl	"??_7bad_cast@std@@6B@"
.globl	"??_7?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
.globl	"??_7?$numpunct@D@std@@6B@"
.globl	"??_7_Iostream_error_category2@std@@6B@"
.globl	"??_7failure@ios_base@std@@6B@"
.globl	"??_7system_error@std@@6B@"
.globl	"??_7_System_error@std@@6B@"
.globl	"??_7runtime_error@std@@6B@"
.globl	"??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .addrsig
    .addrsig_sym "add_two_points"
    .addrsig_sym "subtract_two_points"
    .addrsig_sym "??D@YA?AUPoint@@AEBU0@O@Z"
    .addrsig_sym "??K@YA?AUPoint@@AEBU0@O@Z"
    .addrsig_sym "?lat_lon_to_xyz@@YA?AUPoint@@OO@Z"
    .addrsig_sym "?cos@@YAOO@Z"
    .addrsig_sym "?sin@@YAOO@Z"
    .addrsig_sym "?dot@@YAOAEBUPoint@@0@Z"
    .addrsig_sym "?cross@@YA?AUPoint@@AEBU1@0@Z"
    .addrsig_sym "?magnitude@@YAOAEBUPoint@@@Z"
    .addrsig_sym "?sqrt@@YAOO@Z"
    .addrsig_sym "?normalize@@YA?AUPoint@@AEBU1@@Z"
    .addrsig_sym "?dist_xyz@@YAOAEBUPoint@@0@Z"
    .addrsig_sym "??$max@O@std@@YAAEBOAEBO0@Z"
    .addrsig_sym "??$min@O@std@@YAAEBOAEBO0@Z"
    .addrsig_sym "?acos@@YAOO@Z"
    .addrsig_sym "?point_at_angle_on_great_circle@@YA?AUPoint@@AEBU1@0O@Z"
    .addrsig_sym "?is_on_arc@@YA_NAEBUPoint@@00@Z"
    .addrsig_sym "?abs@@YAOO@Z"
    .addrsig_sym "?get_arc_parameter@@YAOAEBUPoint@@00@Z"
    .addrsig_sym "?get_small_circle_intersections@@YA?AV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBUPoint@@0O@Z"
    .addrsig_sym "?push_back@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAX$$QEAUPoint@@@Z" ; Push to stack
    .addrsig_sym __CxxFrameHandler3
    .addrsig_sym "?get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z"
    .addrsig_sym "?push_back@?$vector@OV?$allocator@O@std@@@std@@QEAAX$$QEAO@Z" ; Push to stack
    .addrsig_sym "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
    .addrsig_sym "?end@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
    .addrsig_sym "?begin@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@XZ"
    .addrsig_sym "?erase@?$vector@OV?$allocator@O@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@2@0@Z"
    .addrsig_sym "??$unique@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@2@AEBUPoint@@00O@Z@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@V10@0V<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@0@AEBUPoint@@11O@Z@@Z"
    .addrsig_sym "?size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
    .addrsig_sym "??A?$vector@OV?$allocator@O@std@@@std@@QEAAAEAO_K@Z"
    .addrsig_sym "?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAX$$QEAU?$pair@OO@2@@Z" ; Push to stack
    .addrsig_sym "?merge_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAV12@@Z"
    .addrsig_sym "?empty@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_NXZ"
    .addrsig_sym "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
    .addrsig_sym "?end@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
    .addrsig_sym "?begin@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@XZ"
    .addrsig_sym "?push_back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAXAEBU?$pair@OO@2@@Z" ; Push to stack
    .addrsig_sym "??A?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@1@_K@Z"
    .addrsig_sym "?size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
    .addrsig_sym "?back@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAAAEAU?$pair@OO@2@XZ"
    .addrsig_sym "?is_arc_safe@@YA_NAEBUPoint@@0AEBV?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@O@Z"
    .addrsig_sym "?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .addrsig_sym "?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .addrsig_sym "??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEBUPoint@@XZ"
    .addrsig_sym "??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@$0A@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@V21@1@Z"
    .addrsig_sym "??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEAU?$pair@OO@1@XZ"
    .addrsig_sym "??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "?sync_with_stdio@ios_base@std@@SA_N_N@Z"
    .addrsig_sym "?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@PEAV32@@Z"
    .addrsig_sym "??$?6DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z"
    .addrsig_sym "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z"
    .addrsig_sym "?fixed@std@@YAAEAVios_base@1@AEAV21@@Z"
    .addrsig_sym "?setprecision@std@@YA?AU?$_Smanip@_J@1@_J@Z"
    .addrsig_sym "??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAH@Z"
    .addrsig_sym "??5?$basic_istream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@AEAO@Z"
    .addrsig_sym "??Bios_base@std@@QEBA_NXZ"
    .addrsig_sym "??A?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAAAEAUPoint@@_K@Z"
    .addrsig_sym "?begin@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .addrsig_sym "?end@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@2@XZ"
    .addrsig_sym "??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAAEAUPoint@@XZ"
    .addrsig_sym "??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@_N@1@AEBUPoint@@@Z"
    .addrsig_sym "??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "?end@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
    .addrsig_sym "?begin@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEAA?AV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@2@XZ"
    .addrsig_sym "?size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
    .addrsig_sym "??A?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAAEAHAEBUPoint@@@Z"
    .addrsig_sym "??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z"
    .addrsig_sym "??A?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEAAAEAV?$vector@OV?$allocator@O@std@@@1@_K@Z"
    .addrsig_sym "??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z"
    .addrsig_sym "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z"
    .addrsig_sym "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z"
    .addrsig_sym "??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z"
    .addrsig_sym "??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@O@Z"
    .addrsig_sym "??__E?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
    .addrsig_sym "??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ"
    .addrsig_sym "??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ"
    .addrsig_sym cosl
    .addrsig_sym cos
    .addrsig_sym sinl
    .addrsig_sym sin
    .addrsig_sym sqrtl
    .addrsig_sym sqrt
    .addrsig_sym acosl
    .addrsig_sym acos
    .addrsig_sym "?setf@ios_base@std@@QEAAHHH@Z"
    .addrsig_sym "?fail@ios_base@std@@QEBA_NXZ"
    .addrsig_sym "?rdstate@ios_base@std@@QEBAHXZ"
    .addrsig_sym "?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
    .addrsig_sym "??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .addrsig_sym "?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .addrsig_sym "?_Orphan_all@_Container_base0@std@@QEAAXXZ"
    .addrsig_sym "??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@@Z"
    .addrsig_sym "??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
    .addrsig_sym "??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@PEAU01@@Z"
    .addrsig_sym "??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@0@Z"
    .addrsig_sym "??$destroy@U?$pair@$$CBUPoint@@H@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@@Z"
    .addrsig_sym __std_terminate
    .addrsig_sym "??$_Destroy_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@@Z"
    .addrsig_sym "?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
    .addrsig_sym "??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z"
    .addrsig_sym "?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z"
    .addrsig_sym "??3@YAXPEAX_K@Z"
    .addrsig_sym _invalid_parameter_noinfo_noreturn    ; Return from function
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .addrsig_sym "?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAPEAV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
    .addrsig_sym "??$_Erase_head@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .addrsig_sym "?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .addrsig_sym "??$_Erase_tree@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU?$_Tree_node@UPoint@@PEAX@1@@Z"
    .addrsig_sym "??$_Freenode0@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
    .addrsig_sym "??$_Freenode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@PEAU01@@Z"
    .addrsig_sym "??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@0@Z"
    .addrsig_sym "??$destroy@UPoint@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@@Z"
    .addrsig_sym "??$_Destroy_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@@Z"
    .addrsig_sym "?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .addrsig_sym "?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z"
    .addrsig_sym "?_Tidy@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXXZ"
    .addrsig_sym "?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAV?$allocator@UPoint@@@2@XZ"
    .addrsig_sym "??$_Destroy_range@V?$allocator@UPoint@@@std@@@std@@YAXPEAUPoint@@QEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .addrsig_sym "?deallocate@?$allocator@UPoint@@@std@@QEAAXQEAUPoint@@_K@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEAAAEAV?$allocator@UPoint@@@2@XZ"
    .addrsig_sym "??$_Emplace_one_at_back@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
    .addrsig_sym "??$_Emplace_back_with_unused_capacity@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAAEAUPoint@@$$QEAU2@@Z"
    .addrsig_sym "??$_Emplace_reallocate@UPoint@@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAPEAUPoint@@QEAU2@$$QEAU2@@Z"
    .addrsig_sym "??$_Construct_in_place@UPoint@@U1@@std@@YAXAEAUPoint@@$$QEAU1@@Z"
    .addrsig_sym "?_Orphan_range@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAXPEAUPoint@@0@Z"
    .addrsig_sym "?max_size@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?_Xlength@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@CAXXZ"
    .addrsig_sym "?_Calculate_growth@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBA_K_K@Z"
    .addrsig_sym "??$_Allocate_at_least_helper@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@AEAV?$allocator@UPoint@@@0@AEA_K@Z"
    .addrsig_sym "??$construct@UPoint@@U1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@$$QEAU3@@Z"
    .addrsig_sym "??$_Unfancy@UPoint@@@std@@YAPEAUPoint@@PEAU1@@Z"
    .addrsig_sym "??$_Uninitialized_move@PEAUPoint@@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@QEAU1@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .addrsig_sym _CxxThrowException
    .addrsig_sym "?_Change_array@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAXQEAUPoint@@_K1@Z"
    .addrsig_sym "??$min@_K@std@@YAAEB_KAEB_K0@Z"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SA_KAEBV?$allocator@UPoint@@@2@@Z"
    .addrsig_sym "?_Getal@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEBAAEBV?$allocator@UPoint@@@2@XZ"
    .addrsig_sym "??$_Max_limit@_J@std@@YA_JXZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@UPoint@@@std@@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@UPoint@@@2@XZ"
    .addrsig_sym "?_Xlength_error@std@@YAXPEBD@Z"
    .addrsig_sym "?capacity@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?allocate@?$allocator@UPoint@@@std@@QEAAPEAUPoint@@_K@Z"
    .addrsig_sym "??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
    .addrsig_sym "??$_Get_size_of_n@$0BI@@std@@YA_K_K@Z"
    .addrsig_sym "??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z"
    .addrsig_sym "?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z"
    .addrsig_sym "?_Throw_bad_array_new_length@std@@YAXXZ"
    .addrsig_sym __std_exception_destroy
    .addrsig_sym __std_exception_copy
    .addrsig_sym "??2@YAPEAX_K@Z"
    .addrsig_sym "??$_Get_unwrapped@AEBQEAUPoint@@@std@@YA?A?<decltype-auto>@@AEBQEAUPoint@@@Z"
    .addrsig_sym "??$_Copy_memmove@PEAUPoint@@PEAU1@@std@@YAPEAUPoint@@PEAU1@00@Z"
    .addrsig_sym "??$_To_address@PEAUPoint@@@std@@YA?A?<auto>@@AEBQEAUPoint@@@Z"
    .addrsig_sym "??$_Construct_n@PEBU?$pair@OO@std@@PEBU12@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K$$QEAPEBU?$pair@OO@1@1@Z"
    .addrsig_sym "?end@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
    .addrsig_sym "?begin@?$initializer_list@U?$pair@OO@std@@@std@@QEBAPEBU?$pair@OO@2@XZ"
    .addrsig_sym "??$_Convert_size@_K_K@std@@YA_K_K@Z"
    .addrsig_sym "?size@?$initializer_list@U?$pair@OO@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
    .addrsig_sym "?_Buy_nonzero@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Uninitialized_copy@PEBU?$pair@OO@std@@PEBU12@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .addrsig_sym "?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$pair@OO@std@@@2@XZ"
    .addrsig_sym "?max_size@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
    .addrsig_sym "?_Xlength@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@CAXXZ"
    .addrsig_sym "?_Buy_raw@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAX_K@Z"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SA_KAEBV?$allocator@U?$pair@OO@std@@@2@@Z"
    .addrsig_sym "?_Getal@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@U?$pair@OO@std@@@std@@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$pair@OO@std@@@2@XZ"
    .addrsig_sym "??$_Allocate_at_least_helper@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAPEAU?$pair@OO@0@AEAV?$allocator@U?$pair@OO@std@@@0@AEA_K@Z"
    .addrsig_sym "?allocate@?$allocator@U?$pair@OO@std@@@std@@QEAAPEAU?$pair@OO@2@_K@Z"
    .addrsig_sym "??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z"
    .addrsig_sym "??$_Get_unwrapped@PEBU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEBU?$pair@OO@0@@Z"
    .addrsig_sym "??$_Copy_memmove@PEBU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEBU10@0PEAU10@@Z"
    .addrsig_sym "??$_Unfancy@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .addrsig_sym "??$_To_address@PEBU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEBU?$pair@OO@0@@Z"
    .addrsig_sym "??$_To_address@PEAU?$pair@OO@std@@@std@@YA?A?<auto>@@AEBQEAU?$pair@OO@0@@Z"
    .addrsig_sym "?_Tidy@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXXZ"
    .addrsig_sym "??$_Destroy_range@V?$allocator@U?$pair@OO@std@@@std@@@std@@YAXPEAU?$pair@OO@0@QEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .addrsig_sym "?deallocate@?$allocator@U?$pair@OO@std@@@std@@QEAAXQEAU?$pair@OO@2@_K@Z"
    .addrsig_sym "?_Tidy@?$vector@OV?$allocator@O@std@@@std@@AEAAXXZ"
    .addrsig_sym "?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAV?$allocator@O@2@XZ"
    .addrsig_sym "??$_Destroy_range@V?$allocator@O@std@@@std@@YAXPEAOQEAOAEAV?$allocator@O@0@@Z"
    .addrsig_sym "?deallocate@?$allocator@O@std@@QEAAXQEAO_K@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEAAAEAV?$allocator@O@2@XZ"
    .addrsig_sym "??$_Emplace_one_at_back@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
    .addrsig_sym "??$_Emplace_back_with_unused_capacity@O@?$vector@OV?$allocator@O@std@@@std@@AEAAAEAO$$QEAO@Z"
    .addrsig_sym "??$_Emplace_reallocate@O@?$vector@OV?$allocator@O@std@@@std@@AEAAPEAOQEAO$$QEAO@Z"
    .addrsig_sym "??$_Construct_in_place@OO@std@@YAXAEAO$$QEAO@Z"
    .addrsig_sym "?_Orphan_range@?$vector@OV?$allocator@O@std@@@std@@AEBAXPEAO0@Z"
    .addrsig_sym "?max_size@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?_Xlength@?$vector@OV?$allocator@O@std@@@std@@CAXXZ"
    .addrsig_sym "?_Calculate_growth@?$vector@OV?$allocator@O@std@@@std@@AEBA_K_K@Z"
    .addrsig_sym "??$_Allocate_at_least_helper@V?$allocator@O@std@@@std@@YAPEAOAEAV?$allocator@O@0@AEA_K@Z"
    .addrsig_sym "??$construct@OO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAO$$QEAO@Z"
    .addrsig_sym "??$_Unfancy@O@std@@YAPEAOPEAO@Z"
    .addrsig_sym "??$_Uninitialized_move@PEAOV?$allocator@O@std@@@std@@YAPEAOQEAO0PEAOAEAV?$allocator@O@0@@Z"
    .addrsig_sym "?_Change_array@?$vector@OV?$allocator@O@std@@@std@@AEAAXQEAO_K1@Z"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA_KAEBV?$allocator@O@2@@Z"
    .addrsig_sym "?_Getal@?$vector@OV?$allocator@O@std@@@std@@AEBAAEBV?$allocator@O@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@O@std@@V?$_Vector_val@U?$_Simple_types@O@std@@@2@$00@std@@QEBAAEBV?$allocator@O@2@XZ"
    .addrsig_sym "?capacity@?$vector@OV?$allocator@O@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?allocate@?$allocator@O@std@@QEAAPEAO_K@Z"
    .addrsig_sym "??$_Get_size_of_n@$07@std@@YA_K_K@Z"
    .addrsig_sym "??$_Get_unwrapped@AEBQEAO@std@@YA?A?<decltype-auto>@@AEBQEAO@Z"
    .addrsig_sym "??$_Copy_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .addrsig_sym "??$_To_address@PEAO@std@@YA?A?<auto>@@AEBQEAO@Z"
    .addrsig_sym "?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z"
    .addrsig_sym "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0U?$less@X@0@@Z"
    .addrsig_sym "??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@0@Z"
    .addrsig_sym "??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
    .addrsig_sym "??$_Sort_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0_JU?$less@X@0@@Z"
    .addrsig_sym "??$_Pass_fn@U?$less@X@std@@@std@@YA?A?<auto>@@AEAU?$less@X@0@@Z"
    .addrsig_sym "?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEBAPEAOXZ"
    .addrsig_sym "??$_Unfancy_maybe_null@O@std@@YAPEAOPEAO@Z"
    .addrsig_sym "??$_Insertion_sort_unchecked@PEAOU?$less@X@std@@@std@@YAPEAOQEAO0U?$less@X@0@@Z"
    .addrsig_sym "??$_Make_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
    .addrsig_sym "??$_Sort_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
    .addrsig_sym "??$_Partition_by_median_guess_unchecked@PEAOU?$less@X@std@@@std@@YA?AU?$pair@PEAOPEAO@0@PEAO0U?$less@X@0@@Z"
    .addrsig_sym "??$?RAEAOAEAO@?$less@X@std@@QEBA_NAEAO0@Z"
    .addrsig_sym "??$_Move_backward_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .addrsig_sym "??$_Copy_backward_memmove@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .addrsig_sym "??$_Pop_heap_hole_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
    .addrsig_sym "??$_Push_heap_by_index@PEAOOU?$less@X@std@@@std@@YAXPEAO_J1$$QEAOU?$less@X@0@@Z"
    .addrsig_sym "??$_Pop_heap_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO0U?$less@X@0@@Z"
    .addrsig_sym "??$_Pop_heap_hole_unchecked@PEAOOU?$less@X@std@@@std@@YAXPEAO00$$QEAOU?$less@X@0@@Z"
    .addrsig_sym "??$_Guess_median_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
    .addrsig_sym "??$_Prev_iter@PEAO@std@@YAPEAOPEAO@Z"
    .addrsig_sym "??$_Next_iter@PEAO@std@@YAPEAOPEAO@Z"
    .addrsig_sym "??$swap@O$0A@@std@@YAXAEAO0@Z"
    .addrsig_sym "??$_Med3_unchecked@PEAOU?$less@X@std@@@std@@YAXPEAO00U?$less@X@0@@Z"
    .addrsig_sym "??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@@Z"
    .addrsig_sym "??R<lambda_0>@?0??get_covered_intervals@@YA?AV?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBUPoint@@00O@Z@QEBA?A?<auto>@@OO@Z"
    .addrsig_sym "??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEAPEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEAPEAO@Z"
    .addrsig_sym "??$_Seek_wrapped@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@AEBQEAO@std@@YAXAEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@0@AEBQEAO@Z"
    .addrsig_sym "?_Seek_to@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@O@std@@@std@@@std@@QEAAXPEBO@Z"
    .addrsig_sym "??$_Refancy_maybe_null@PEAO$0A@@std@@YAPEAOPEAO@Z"
    .addrsig_sym "??$_Move_unchecked@PEAOPEAO@std@@YAPEAOPEAO00@Z"
    .addrsig_sym "??$_Emplace_one_at_back@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
    .addrsig_sym "??$_Emplace_back_with_unused_capacity@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@$$QEAU21@@Z"
    .addrsig_sym "??$_Emplace_reallocate@U?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@$$QEAU21@@Z"
    .addrsig_sym "??$_Construct_in_place@U?$pair@OO@std@@U12@@std@@YAXAEAU?$pair@OO@0@$$QEAU10@@Z"
    .addrsig_sym "?_Orphan_range@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBAXPEAU?$pair@OO@2@0@Z"
    .addrsig_sym "?_Calculate_growth@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEBA_K_K@Z"
    .addrsig_sym "??$construct@U?$pair@OO@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@$$QEAU31@@Z"
    .addrsig_sym "??$_Uninitialized_move@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0PEAU10@AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .addrsig_sym "?_Change_array@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXQEAU?$pair@OO@2@_K1@Z"
    .addrsig_sym "?capacity@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@QEBA_KXZ"
    .addrsig_sym "??$_Get_unwrapped@AEBQEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@AEBQEAU?$pair@OO@0@@Z"
    .addrsig_sym "??$_Copy_memmove@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
    .addrsig_sym "??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0U?$less@X@0@@Z"
    .addrsig_sym "??$_Adl_verify_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@0@Z"
    .addrsig_sym "??$_Get_unwrapped@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEBV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
    .addrsig_sym "??$_Sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0_JU?$less@X@0@@Z"
    .addrsig_sym "?_Unwrapped@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAPEAU?$pair@OO@2@XZ"
    .addrsig_sym "??$_Unfancy_maybe_null@U?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .addrsig_sym "??$_Insertion_sort_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAPEAU?$pair@OO@0@QEAU10@0U?$less@X@0@@Z"
    .addrsig_sym "??$_Make_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .addrsig_sym "??$_Sort_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .addrsig_sym "??$_Partition_by_median_guess_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YA?AU?$pair@PEAU?$pair@OO@std@@PEAU12@@0@PEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .addrsig_sym "??$?RAEAU?$pair@OO@std@@AEAU01@@?$less@X@std@@QEBA_NAEAU?$pair@OO@1@0@Z"
    .addrsig_sym "??$_Move_backward_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
    .addrsig_sym "??$?4U?$pair@OO@std@@$0A@@?$pair@OO@std@@QEAAAEAU01@$$QEAU01@@Z"
    .addrsig_sym "??$?MOOOO@std@@YA_NAEBU?$pair@OO@0@0@Z"
    .addrsig_sym "??$_Pop_heap_hole_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
    .addrsig_sym "??$_Push_heap_by_index@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@_J1$$QEAU10@U?$less@X@0@@Z"
    .addrsig_sym "??$_Pop_heap_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@0U?$less@X@0@@Z"
    .addrsig_sym "??$_Pop_heap_hole_unchecked@PEAU?$pair@OO@std@@U12@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00$$QEAU10@U?$less@X@0@@Z"
    .addrsig_sym "??$_Guess_median_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
    .addrsig_sym "??$_Prev_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .addrsig_sym "??$_Next_iter@PEAU?$pair@OO@std@@@std@@YAPEAU?$pair@OO@0@PEAU10@@Z"
    .addrsig_sym "??$swap@OO$0A@@std@@YAXAEAU?$pair@OO@0@0@Z"
    .addrsig_sym "??$_Med3_unchecked@PEAU?$pair@OO@std@@U?$less@X@2@@std@@YAXPEAU?$pair@OO@0@00U?$less@X@0@@Z"
    .addrsig_sym "?swap@?$pair@OO@std@@QEAAXAEAU12@@Z"
    .addrsig_sym "??$_Emplace_one_at_back@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
    .addrsig_sym "??$_Emplace_back_with_unused_capacity@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAAEAU?$pair@OO@1@AEBU21@@Z"
    .addrsig_sym "??$_Emplace_reallocate@AEBU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAPEAU?$pair@OO@1@QEAU21@AEBU21@@Z"
    .addrsig_sym "??$_Construct_in_place@U?$pair@OO@std@@AEBU12@@std@@YAXAEAU?$pair@OO@0@AEBU10@@Z"
    .addrsig_sym "??$construct@U?$pair@OO@std@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$pair@OO@std@@@std@@@std@@SAXAEAV?$allocator@U?$pair@OO@std@@@1@QEAU?$pair@OO@1@AEBU31@@Z"
    .addrsig_sym "??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UPoint@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
    .addrsig_sym "??$_Get_unwrapped@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@0@@Z"
    .addrsig_sym "??$distance@PEAU?$pair@OO@std@@@std@@YA_JPEAU?$pair@OO@0@0@Z"
    .addrsig_sym "??$_Insert_counted_range@PEAU?$pair@OO@std@@@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAAXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@1@PEAU?$pair@OO@1@_K@Z"
    .addrsig_sym "?_Make_iterator_offset@?$vector@U?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@AEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@2@_K@Z"
    .addrsig_sym "??$_Uninitialized_copy_n@PEAU?$pair@OO@std@@V?$allocator@U?$pair@OO@std@@@2@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0AEAV?$allocator@U?$pair@OO@std@@@0@@Z"
    .addrsig_sym "??$_Move_unchecked@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@00@Z"
    .addrsig_sym "??$_Get_unwrapped@PEAU?$pair@OO@std@@@std@@YA?A?<decltype-auto>@@$$QEAPEAU?$pair@OO@0@@Z"
    .addrsig_sym "??$_Copy_memmove_n@PEAU?$pair@OO@std@@PEAU12@@std@@YAPEAU?$pair@OO@0@PEAU10@_K0@Z"
    .addrsig_sym "??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAXAEBV12@@Z"
    .addrsig_sym "??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@OO@std@@@std@@@std@@@std@@QEBAAEBU?$pair@OO@1@XZ"
    .addrsig_sym "??$_Common_extract_with_num_get@J@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAJ@Z"
    .addrsig_sym "??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
    .addrsig_sym "??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .addrsig_sym "?getloc@ios_base@std@@QEBA?AVlocale@2@XZ"
    .addrsig_sym "?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z"
    .addrsig_sym "?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
    .addrsig_sym "?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z"
    .addrsig_sym "?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ"
    .addrsig_sym "?good@ios_base@std@@QEBA_NXZ"
    .addrsig_sym "?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ"
    .addrsig_sym "?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ"
    .addrsig_sym "?flags@ios_base@std@@QEBAHXZ"
    .addrsig_sym "??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z"
    .addrsig_sym "?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .addrsig_sym "?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NHH@Z"
    .addrsig_sym "?eof@?$_Narrow_char_traits@DH@std@@SAHXZ"
    .addrsig_sym "?is@?$ctype@D@std@@QEBA_NFD@Z"
    .addrsig_sym "?to_char_type@?$_Narrow_char_traits@DH@std@@SADH@Z"
    .addrsig_sym "?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .addrsig_sym "??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
    .addrsig_sym "?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .addrsig_sym "?uncaught_exception@std@@YA_NXZ"
    .addrsig_sym "?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ"
    .addrsig_sym "??Bid@locale@std@@QEAA_KXZ"
    .addrsig_sym "?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z"
    .addrsig_sym "?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .addrsig_sym "?_Throw_bad_cast@std@@YAXXZ"
    .addrsig_sym "?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z"
    .addrsig_sym "?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ"
    .addrsig_sym "?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ"
    .addrsig_sym "?_C_str@locale@std@@QEBAPEBDXZ"
    .addrsig_sym "?c_str@?$_Yarn@D@std@@QEBAPEBDXZ"
    .addrsig_sym "?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z"
    .addrsig_sym "?_Xruntime_error@std@@YAXPEBD@Z"
    .addrsig_sym "?_Tidy@?$_Yarn@D@std@@AEAAXXZ"
    .addrsig_sym free
    .addrsig_sym "?_Tidy@?$_Yarn@_W@std@@AEAAXXZ"
    .addrsig_sym "?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z"
    .addrsig_sym "?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ"
    .addrsig_sym _Getctype
    .addrsig_sym "?_Tidy@?$ctype@D@std@@IEAAXXZ"
    .addrsig_sym "??_V@YAXPEAX@Z"
    .addrsig_sym "??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z"
    .addrsig_sym _Tolower
    .addrsig_sym _Toupper
    .addrsig_sym "??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z"
    .addrsig_sym "?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z"
    .addrsig_sym "??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ"
    .addrsig_sym "??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z"
    .addrsig_sym "?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
    .addrsig_sym "?to_int_type@?$_Narrow_char_traits@DH@std@@SAHD@Z"
    .addrsig_sym "?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ"
    .addrsig_sym "?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
    .addrsig_sym "?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ"
    .addrsig_sym "?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
    .addrsig_sym "?_Getcat@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .addrsig_sym "?_Init@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
    .addrsig_sym "??$_Adl_verify_range@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@V12@@std@@YAXAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
    .addrsig_sym "??$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1HAEBVlocale@1@@Z"
    .addrsig_sym _Stoullx
    .addrsig_sym "??$?8DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
    .addrsig_sym "??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z"
    .addrsig_sym "?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .addrsig_sym "?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ"
    .addrsig_sym "?thousands_sep@?$numpunct@D@std@@QEBADXZ"
    .addrsig_sym "?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z"
    .addrsig_sym "??$end@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
    .addrsig_sym "??$begin@$$CBD$0BL@@std@@YAPEBDAEAY0BL@$$CBD@Z"
    .addrsig_sym "??$?9DU?$char_traits@D@std@@@std@@YA_NAEBV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0@Z"
    .addrsig_sym "??D?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBADXZ"
    .addrsig_sym "??E?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "??$_Find_elem@D$0BL@@std@@YA_KAEAY0BL@$$CBDD@Z"
    .addrsig_sym "??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z"
    .addrsig_sym "?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z" ; Push to stack
    .addrsig_sym "?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
    .addrsig_sym "?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
    .addrsig_sym "?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .addrsig_sym "?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z"
    .addrsig_sym "?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ"
    .addrsig_sym "?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ"
    .addrsig_sym "??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z"
    .addrsig_sym "?_Getfalse@_Locinfo@std@@QEBAPEBDXZ"
    .addrsig_sym "?_Gettrue@_Locinfo@std@@QEBAPEBDXZ"
    .addrsig_sym "??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z"
    .addrsig_sym "??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z"
    .addrsig_sym localeconv
    .addrsig_sym _Getcvt
    .addrsig_sym strlen
    .addrsig_sym calloc                                ; Function call
    .addrsig_sym "?_Xbad_alloc@std@@YAXXZ"
    .addrsig_sym "?_Tidy@?$numpunct@D@std@@AEAAXXZ"
    .addrsig_sym "??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
    .addrsig_sym "?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z"
    .addrsig_sym "?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ"
    .addrsig_sym "?_Xlen_string@std@@YAXXZ"
    .addrsig_sym "?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ"
    .addrsig_sym "?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
    .addrsig_sym "?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z"
    .addrsig_sym "?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z"
    .addrsig_sym "??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z"
    .addrsig_sym "??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z"
    .addrsig_sym "??$_Unfancy@D@std@@YAPEADPEAD@Z"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z"
    .addrsig_sym "?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ"
    .addrsig_sym "??$max@_K@std@@YAAEB_KAEB_K0@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ"
    .addrsig_sym "??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPEADAEAV?$allocator@D@0@AEA_K@Z"
    .addrsig_sym "?allocate@?$allocator@D@std@@QEAAPEAD_K@Z"
    .addrsig_sym "??$_Get_size_of_n@$00@std@@YA_K_K@Z"
    .addrsig_sym "?_Peek@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEBADXZ"
    .addrsig_sym "?_Inc@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@AEAAXXZ"
    .addrsig_sym "??$_Construct@$0A@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXD_K@Z"
    .addrsig_sym "?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z"
    .addrsig_sym "??$_Find_unchecked@PEBDD@std@@YAPEBDPEBDQEBDAEBD@Z"
    .addrsig_sym "??$_Could_compare_equal_to_value_type@PEBDD@std@@YA_NAEBD@Z"
    .addrsig_sym "??$_To_address@PEBD@std@@YA?A?<auto>@@AEBQEBD@Z"
    .addrsig_sym "??$_Find_vectorized@$$CBDD@std@@YAPEBDQEBD0D@Z"
    .addrsig_sym __std_find_trivial_1
    .addrsig_sym "?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ"
    .addrsig_sym "?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ"
    .addrsig_sym "??$_Reallocate_grow_by@V<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??push_back@01@QEAAXD@Z@D@Z" ; Push to stack
    .addrsig_sym "?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z"
    .addrsig_sym "??R<lambda_1>@?0??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@SA?A?<auto>@@QEADQEBD_KD@Z" ; Push to stack
    .addrsig_sym "?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAEAV?$allocator@D@2@QEAD_K@Z"
    .addrsig_sym "?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z"
    .addrsig_sym "?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ"
    .addrsig_sym "?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
    .addrsig_sym "?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
    .addrsig_sym "??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z"
    .addrsig_sym "?equal@?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NAEBV12@@Z"
    .addrsig_sym "??$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@1@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@1AEBVlocale@1@@Z"
    .addrsig_sym "?_Stodx_v3@std@@YANPEBDPEAPEADPEAH@Z"
    .addrsig_sym "??$end@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
    .addrsig_sym "??$begin@$$CBD$0BN@@std@@YAPEBDAEAY0BN@$$CBD@Z"
    .addrsig_sym "??$_Find_elem@D$0BN@@std@@YA_KAEAY0BN@$$CBDD@Z"
    .addrsig_sym "?decimal_point@?$numpunct@D@std@@QEBADXZ"
    .addrsig_sym "?abs@@YA_J_J@Z"
    .addrsig_sym "??$min@_J@std@@YAAEB_JAEB_J0@Z"
    .addrsig_sym "??$reverse@PEAD@std@@YAXQEAD0@Z"
    .addrsig_sym "??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z"
    .addrsig_sym "??$_Get_unwrapped@AEBQEAD@std@@YA?A?<decltype-auto>@@AEBQEAD@Z"
    .addrsig_sym "??$_Reverse_vectorized@$00@std@@YAXPEAX0@Z"
    .addrsig_sym "??$_To_address@PEAD@std@@YA?A?<auto>@@AEBQEAD@Z"
    .addrsig_sym __std_reverse_trivially_swappable_1
    .addrsig_sym _errno
    .addrsig_sym strtod
    .addrsig_sym "?_Stofx_v3@std@@YAMPEBDPEAPEADPEAH@Z"
    .addrsig_sym strtof
    .addrsig_sym _Stollx
    .addrsig_sym _Stoulx
    .addrsig_sym _Stolx
    .addrsig_sym "?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .addrsig_sym "??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z"
    .addrsig_sym "?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .addrsig_sym "??$_Getloctxt@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@D@std@@YAHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@0@0_KPEBDW4_Case_sensitive@0@@Z"
    .addrsig_sym "?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ"
    .addrsig_sym "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z"
    .addrsig_sym "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z"
    .addrsig_sym "?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z"
    .addrsig_sym "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@QEBD_K@Z@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@QEBD0@Z@PEBD_K@Z"
    .addrsig_sym "??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@QEBD_K@Z@SA?A?<auto>@@QEAD0101@Z"
    .addrsig_sym "?tolower@?$ctype@D@std@@QEBADD@Z"
    .addrsig_sym "?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z"
    .addrsig_sym "?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z"
    .addrsig_sym "?clear@ios_base@std@@QEAAXH_N@Z"
    .addrsig_sym "?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z"
    .addrsig_sym "?iostream_category@std@@YAAEBVerror_category@1@XZ"
    .addrsig_sym "??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ"
    .addrsig_sym _Init_thread_header
    .addrsig_sym "??__F_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@YAXXZ"
    .addrsig_sym atexit
    .addrsig_sym _Init_thread_footer
    .addrsig_sym "?_Syserror_map@std@@YAPEBDH@Z"
    .addrsig_sym "??8error_category@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "?category@error_code@std@@QEBAAEBVerror_category@2@XZ"
    .addrsig_sym "?value@error_code@std@@QEBAHXZ"
    .addrsig_sym "??$_Bit_cast@_KT_Addr_storage@error_category@std@@$0A@@std@@YA_KAEBT_Addr_storage@error_category@0@@Z"
    .addrsig_sym "??8std@@YA_NAEBVerror_condition@0@0@Z"
    .addrsig_sym "?category@error_condition@std@@QEBAAEBVerror_category@2@XZ"
    .addrsig_sym "?value@error_condition@std@@QEBAHXZ"
    .addrsig_sym "?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z"
    .addrsig_sym "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z"
    .addrsig_sym "?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ"
    .addrsig_sym "?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z"
    .addrsig_sym "?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAXXZ"
    .addrsig_sym "?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z"
    .addrsig_sym "??$_Construct@$01PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z"
    .addrsig_sym "??$_Common_extract_with_num_get@O@?$basic_istream@DU?$char_traits@D@std@@@std@@AEAAAEAV01@AEAO@Z"
    .addrsig_sym "?get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z"
    .addrsig_sym "??$_Construct_n@$$V@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "?_Buy_nonzero@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Uninitialized_value_construct_n@V?$allocator@UPoint@@@std@@@std@@YAPEAUPoint@@PEAU1@_KAEAV?$allocator@UPoint@@@0@@Z"
    .addrsig_sym "?_Buy_raw@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXXZ"
    .addrsig_sym "?_Release@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAPEAUPoint@@XZ"
    .addrsig_sym "??$construct@UPoint@@$$V@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@@Z"
    .addrsig_sym "?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .addrsig_sym "??$_Buyheadnode@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@?$_Tree_node@UPoint@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@@Z"
    .addrsig_sym "?allocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
    .addrsig_sym "??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@AEBQEAU10@@Z"
    .addrsig_sym "??$_Get_size_of_n@$0DI@@std@@YA_K_K@Z"
    .addrsig_sym "??$_Emplace@AEBUPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAA?AU?$pair@PEAU?$_Tree_node@UPoint@@PEAX@std@@_N@1@AEBUPoint@@@Z"
    .addrsig_sym "?_Extract@?$_In_place_key_extract_set@UPoint@@U1@@std@@SAAEBUPoint@@AEBU3@@Z"
    .addrsig_sym "??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@UPoint@@PEAX@std@@@1@AEBUPoint@@@Z"
    .addrsig_sym "??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@UPoint@@PEAX@1@AEBUPoint@@@Z"
    .addrsig_sym "?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .addrsig_sym "?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@XZ"
    .addrsig_sym "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAPEAU?$_Tree_node@UPoint@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@UPoint@@PEAX@std@@@2@QEAU32@@Z"
    .addrsig_sym "?_Get_scary@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@XZ"
    .addrsig_sym "?_Getcomp@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
    .addrsig_sym "??RCompare@Point@@QEBA_NAEBU1@0@Z"
    .addrsig_sym "?_Kfn@?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@SAAEBUPoint@@AEBU3@@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
    .addrsig_sym "?max_size@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?_Throw_tree_length_error@std@@YAXXZ"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@@Z"
    .addrsig_sym "?_Getal@?$_Tree@V?$_Tset_traits@UPoint@@UCompare@1@V?$allocator@UPoint@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@2@XZ"
    .addrsig_sym "??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@1@QEAUPoint@@AEBU3@@Z"
    .addrsig_sym "??$_Construct_in_place@PEAU?$_Tree_node@UPoint@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@UPoint@@PEAX@0@0@Z"
    .addrsig_sym "?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@@std@@QEAAXXZ"
    .addrsig_sym "?deallocate@?$allocator@U?$_Tree_node@UPoint@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@UPoint@@PEAX@2@_K@Z"
    .addrsig_sym "??$exchange@PEAU?$_Tree_node@UPoint@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@UPoint@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
    .addrsig_sym "?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
    .addrsig_sym "?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@QEAAXPEAU?$_Tree_node@UPoint@@PEAX@2@@Z"
    .addrsig_sym "??$_Adl_verify_range@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@V12@@std@@YAXAEBV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@0@Z"
    .addrsig_sym "??$_Get_unwrapped@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@0@@Z"
    .addrsig_sym "??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA_JV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
    .addrsig_sym "??$_Construct_n@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$vector@UPoint@@V?$allocator@UPoint@@@std@@@std@@AEAAX_K$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@1@1@Z"
    .addrsig_sym "?_Unwrapped@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@@std@@QEBA?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@2@XZ"
    .addrsig_sym "?_Getcont@_Iterator_base0@std@@QEBAPEBU_Container_base0@2@XZ"
    .addrsig_sym "??$_Adl_verify_range@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXAEBV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0@Z"
    .addrsig_sym "??$_Get_unwrapped@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@AEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
    .addrsig_sym "??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBA_NAEBV01@@Z"
    .addrsig_sym "?_Min@?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@SAPEAU?$_Tree_node@UPoint@@PEAX@2@PEAU32@@Z"
    .addrsig_sym "??$_Uninitialized_copy@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@V12@V?$allocator@UPoint@@@2@@std@@YAPEAUPoint@@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@0PEAU1@AEAV?$allocator@UPoint@@@0@@Z"
    .addrsig_sym "??$_Get_unwrapped@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?A?<decltype-auto>@@$$QEAV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@0@@Z"
    .addrsig_sym "??$_Emplace_back@AEBUPoint@@@?$_Uninitialized_backout_al@V?$allocator@UPoint@@@std@@@std@@QEAAXAEBUPoint@@@Z"
    .addrsig_sym "??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@UPoint@@@std@@@std@@U_Iterator_base0@2@@std@@QEBAAEBUPoint@@XZ"
    .addrsig_sym "??$construct@UPoint@@AEBU1@@?$_Default_allocator_traits@V?$allocator@UPoint@@@std@@@std@@SAXAEAV?$allocator@UPoint@@@1@QEAUPoint@@AEBU3@@Z"
    .addrsig_sym "?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .addrsig_sym "??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@SAPEAU01@AEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@@Z"
    .addrsig_sym "?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
    .addrsig_sym "??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEBQEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEBQEAU10@@Z"
    .addrsig_sym "??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z"
    .addrsig_sym "??$_Construct_n@$$V@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ"
    .addrsig_sym "?_Buy_nonzero@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ"
    .addrsig_sym "?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ"
    .addrsig_sym "?_Buy_raw@?$vector@HV?$allocator@H@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z"
    .addrsig_sym "?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ"
    .addrsig_sym "??$_Allocate_at_least_helper@V?$allocator@H@std@@@std@@YAPEAHAEAV?$allocator@H@0@AEA_K@Z"
    .addrsig_sym "?allocate@?$allocator@H@std@@QEAAPEAH_K@Z"
    .addrsig_sym "??$_Get_size_of_n@$03@std@@YA_K_K@Z"
    .addrsig_sym "??$_Unfancy@H@std@@YAPEAHPEAH@Z"
    .addrsig_sym "??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z"
    .addrsig_sym "??$_To_address@PEAH@std@@YA?A?<auto>@@AEBQEAH@Z"
    .addrsig_sym "?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ"
    .addrsig_sym "??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z"
    .addrsig_sym "?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z"
    .addrsig_sym "??$_Try_emplace@AEBUPoint@@$$V@?$map@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@AEAA?AU?$pair@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@_N@1@AEBUPoint@@@Z"
    .addrsig_sym "??$_Find_lower_bound@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA?AU?$_Tree_find_result@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@AEBUPoint@@@Z"
    .addrsig_sym "??$_Lower_bound_duplicate@UPoint@@@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBA_NQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@1@AEBUPoint@@@Z"
    .addrsig_sym "?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEAAXXZ"
    .addrsig_sym "??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ"
    .addrsig_sym "??$forward_as_tuple@AEBUPoint@@@std@@YA?AV?$tuple@AEBUPoint@@@0@AEBUPoint@@@Z"
    .addrsig_sym "?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@XZ"
    .addrsig_sym "?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@U?$_Tree_id@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@QEAU32@@Z"
    .addrsig_sym "?_Get_scary@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@XZ"
    .addrsig_sym "?_Getcomp@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBUCompare@Point@@XZ"
    .addrsig_sym "??$_Kfn@$$CBUPoint@@H@?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@SAAEBUPoint@@AEBU?$pair@$$CBUPoint@@H@1@@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@UCompare@Point@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@$00@std@@QEBAAEBUCompare@Point@@XZ"
    .addrsig_sym "?max_size@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@QEBA_KXZ"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@@Z"
    .addrsig_sym "?_Getal@?$_Tree@V?$_Tmap_traits@UPoint@@HUCompare@1@V?$allocator@U?$pair@$$CBUPoint@@H@std@@@std@@$0A@@std@@@std@@IEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@2@XZ"
    .addrsig_sym "??$construct@U?$pair@$$CBUPoint@@H@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBUPoint@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@SAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@1@QEAU?$pair@$$CBUPoint@@H@1@AEBUpiecewise_construct_t@1@$$QEAV?$tuple@AEBUPoint@@@1@$$QEAV?$tuple@$$V@1@@Z"
    .addrsig_sym "??$_Construct_in_place@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@AEAPEAU12@@std@@YAXAEAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@0@Z"
    .addrsig_sym "?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@@std@@QEAAXXZ"
    .addrsig_sym "?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@@std@@QEAAXQEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@_K@Z"
    .addrsig_sym "??$_Tuple_get@$0A@AEBUPoint@@@std@@YA?A?<auto>@@$$QEAV?$tuple@AEBUPoint@@@0@@Z"
    .addrsig_sym "??$exchange@PEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@std@@$$T@std@@YAPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@0@AEAPEAU10@$$QEA$$T@Z"
    .addrsig_sym "?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
    .addrsig_sym "?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUPoint@@H@std@@@std@@@std@@QEAAXPEAU?$_Tree_node@U?$pair@$$CBUPoint@@H@std@@PEAX@2@@Z"
    .addrsig_sym "??$_Construct_n@AEBO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBO@Z"
    .addrsig_sym "?_Buy_nonzero@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Uninitialized_fill_n@V?$allocator@O@std@@@std@@YAPEAOPEAO_KAEBOAEAV?$allocator@O@0@@Z"
    .addrsig_sym "?_Buy_raw@?$vector@OV?$allocator@O@std@@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Is_all_bits_zero@O@std@@YA_NAEBO@Z"
    .addrsig_sym "??$_Fill_zero_memset@PEAO@std@@YAXPEAO_K@Z"
    .addrsig_sym "??$_Emplace_back@AEBO@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAXAEBO@Z"
    .addrsig_sym "?_Release@?$_Uninitialized_backout_al@V?$allocator@O@std@@@std@@QEAAPEAOXZ"
    .addrsig_sym memcmp                                ; Compare values
    .addrsig_sym "??$construct@OAEBO@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SAXAEAV?$allocator@O@1@QEAOAEBO@Z"
    .addrsig_sym "??$_Construct_n@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_KAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .addrsig_sym "?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .addrsig_sym "?_Buy_nonzero@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
    .addrsig_sym "??$_Uninitialized_fill_n@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@_KAEBV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEAAAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .addrsig_sym "?max_size@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@QEBA_KXZ"
    .addrsig_sym "?_Xlength@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@CAXXZ"
    .addrsig_sym "?_Buy_raw@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAX_K@Z"
    .addrsig_sym "?max_size@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SA_KAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@Z"
    .addrsig_sym "?_Getal@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .addrsig_sym "?_Get_first@?$_Compressed_pair@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$vector@OV?$allocator@O@std@@@std@@@std@@@2@$00@std@@QEBAAEBV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@XZ"
    .addrsig_sym "??$_Allocate_at_least_helper@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@AEA_K@Z"
    .addrsig_sym "?allocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
    .addrsig_sym "??$_Emplace_back@AEBV?$vector@OV?$allocator@O@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAXAEBV?$vector@OV?$allocator@O@std@@@1@@Z"
    .addrsig_sym "?_Release@?$_Uninitialized_backout_al@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@QEAAPEAV?$vector@OV?$allocator@O@std@@@2@XZ"
    .addrsig_sym "??$construct@V?$vector@OV?$allocator@O@std@@@std@@AEBV12@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@AEBV31@@Z"
    .addrsig_sym "??$_Unfancy@V?$vector@OV?$allocator@O@std@@@std@@@std@@YAPEAV?$vector@OV?$allocator@O@std@@@0@PEAV10@@Z"
    .addrsig_sym "?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@O@std@@@std@@SA?AV?$allocator@O@2@AEBV32@@Z"
    .addrsig_sym "??$_Construct_n@AEBQEAOAEBQEAO@?$vector@OV?$allocator@O@std@@@std@@AEAAX_KAEBQEAO1@Z"
    .addrsig_sym "??$_Uninitialized_copy@PEAOPEAOV?$allocator@O@std@@@std@@YAPEAOPEAO00AEAV?$allocator@O@0@@Z"
    .addrsig_sym "??$_Get_unwrapped@PEAO@std@@YA?A?<decltype-auto>@@$$QEAPEAO@Z"
    .addrsig_sym "??$_Destroy_range@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@YAXPEAV?$vector@OV?$allocator@O@std@@@0@QEAV10@AEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@0@@Z"
    .addrsig_sym "??$destroy@V?$vector@OV?$allocator@O@std@@@std@@@?$_Default_allocator_traits@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@@std@@SAXAEAV?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@1@QEAV?$vector@OV?$allocator@O@std@@@1@@Z"
    .addrsig_sym "?_Tidy@?$vector@V?$vector@OV?$allocator@O@std@@@std@@V?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@2@@std@@AEAAXXZ"
    .addrsig_sym "?deallocate@?$allocator@V?$vector@OV?$allocator@O@std@@@std@@@std@@QEAAXQEAV?$vector@OV?$allocator@O@std@@@2@_K@Z"
    .addrsig_sym "?width@ios_base@std@@QEBA_JXZ"
    .addrsig_sym "?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z"
    .addrsig_sym "?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ"
    .addrsig_sym "?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z"
    .addrsig_sym "?width@ios_base@std@@QEAA_J_J@Z"
    .addrsig_sym "?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ"
    .addrsig_sym "?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ"
    .addrsig_sym "??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z"
    .addrsig_sym "?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z"
    .addrsig_sym "?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ"
    .addrsig_sym "?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z"
    .addrsig_sym "?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z"
    .addrsig_sym "?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z"
    .addrsig_sym sprintf_s
    .addrsig_sym "??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z"
    .addrsig_sym "?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z"
    .addrsig_sym "?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z"
    .addrsig_sym "?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z"
    .addrsig_sym "?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z"
    .addrsig_sym "??$_Reallocate_grow_by@V<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_K0D@Z@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??insert@01@QEAAAEAV01@00D@Z@_K2D@Z"
    .addrsig_sym "?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ"
    .addrsig_sym "?_Xout_of_range@std@@YAXPEBD@Z"
    .addrsig_sym "??R<lambda_1>@?0??insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_K0D@Z@SA?A?<auto>@@QEADQEBD000D@Z"
    .addrsig_sym "??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym "??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z"
    .addrsig_sym "??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ"
    .addrsig_sym _vsprintf_s_l
    .addrsig_sym __stdio_common_vsprintf_s
    .addrsig_sym __local_stdio_printf_options
    .addrsig_sym "?precision@ios_base@std@@QEBA_JXZ"
    .addrsig_sym "??$_Float_put_desired_precision@O@std@@YAH_JH@Z"
    .addrsig_sym frexpl
    .addrsig_sym "?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z"
    .addrsig_sym "?isfinite@@YA_NO@Z"
    .addrsig_sym "?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z"
    .addrsig_sym "??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AEAVios_base@1@DPEBD_K_N@Z"
    .addrsig_sym "?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ"
    .addrsig_sym frexp
    .addrsig_sym "?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z"
    .addrsig_sym "?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z"
    .addrsig_sym "??$_Reallocate_grow_by@V<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV34@_KD@Z@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?0??append@01@QEAAAEAV01@0D@Z@_KD@Z"
    .addrsig_sym "??R<lambda_1>@?0??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV23@_KD@Z@SA?A?<auto>@@QEADQEBD00D@Z"
    .addrsig_sym strcspn
    .addrsig_sym "??$_Float_put_desired_precision@N@std@@YAH_JH@Z"
    .addrsig_sym "?isfinite@@YA_NN@Z"
    .addrsig_sym "?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z"
    .addrsig_sym "?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z"
    .addrsig_sym "??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z"
    .addrsig_sym "??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z"
    .addrsig_sym "?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z"
    .addrsig_sym "?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z"
    .addrsig_sym "?widen@?$ctype@D@std@@QEBADD@Z"
    .addrsig_sym "?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z"
    .addrsig_sym "?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A"
    .addrsig_sym "?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A"
    .addrsig_sym INF
    .addrsig_sym "?id@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
    .addrsig_sym "?id@?$numpunct@D@std@@2V0locale@2@A"
    .addrsig_sym "?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A"
    .addrsig_sym "?_Sync@ios_base@std@@0_NA"
    .addrsig_sym "?_Fake_alloc@std@@3U_Fake_allocator@1@B"
    .addrsig_sym "??_7type_info@@6B@"
    .addrsig_sym "??_R0?AVbad_array_new_length@std@@@8"
    .addrsig_sym __ImageBase
    .addrsig_sym "??_R0?AVbad_alloc@std@@@8"
    .addrsig_sym "??_R0?AVexception@std@@@8"
    .addrsig_sym "??_R4bad_array_new_length@std@@6B@"
    .addrsig_sym "??_R3bad_array_new_length@std@@8"
    .addrsig_sym "??_R2bad_array_new_length@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@bad_array_new_length@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@bad_alloc@std@@8"
    .addrsig_sym "??_R3bad_alloc@std@@8"
    .addrsig_sym "??_R2bad_alloc@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@exception@std@@8"
    .addrsig_sym "??_R3exception@std@@8"
    .addrsig_sym "??_R2exception@std@@8"
    .addrsig_sym "??_R4bad_alloc@std@@6B@"
    .addrsig_sym "??_R4exception@std@@6B@"
    .addrsig_sym "?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB"
    .addrsig_sym "?id@?$ctype@D@std@@2V0locale@2@A"
    .addrsig_sym "?_Id_cnt@id@locale@std@@0HA"
    .addrsig_sym "??_R4?$ctype@D@std@@6B@"
    .addrsig_sym "??_R0?AV?$ctype@D@std@@@8"
    .addrsig_sym "??_R3?$ctype@D@std@@8"
    .addrsig_sym "??_R2?$ctype@D@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@?$ctype@D@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@ctype_base@std@@8"
    .addrsig_sym "??_R0?AUctype_base@std@@@8"
    .addrsig_sym "??_R3ctype_base@std@@8"
    .addrsig_sym "??_R2ctype_base@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@facet@locale@std@@8"
    .addrsig_sym "??_R0?AVfacet@locale@std@@@8"
    .addrsig_sym "??_R3facet@locale@std@@8"
    .addrsig_sym "??_R2facet@locale@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@_Facet_base@std@@8"
    .addrsig_sym "??_R0?AV_Facet_base@std@@@8"
    .addrsig_sym "??_R3_Facet_base@std@@8"
    .addrsig_sym "??_R2_Facet_base@std@@8"
    .addrsig_sym "??_R17?0A@EA@_Crt_new_delete@std@@8"
    .addrsig_sym "??_R0?AU_Crt_new_delete@std@@@8"
    .addrsig_sym "??_R3_Crt_new_delete@std@@8"
    .addrsig_sym "??_R2_Crt_new_delete@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@_Crt_new_delete@std@@8"
    .addrsig_sym "??_R4ctype_base@std@@6B@"
    .addrsig_sym "??_R4facet@locale@std@@6B@"
    .addrsig_sym "??_R4_Facet_base@std@@6B@"
    .addrsig_sym "??_R0?AVbad_cast@std@@@8"
    .addrsig_sym "??_R4bad_cast@std@@6B@"
    .addrsig_sym "??_R3bad_cast@std@@8"
    .addrsig_sym "??_R2bad_cast@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@bad_cast@std@@8"
    .addrsig_sym "?_Psave@?$_Facetptr@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"
    .addrsig_sym "??_R4?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .addrsig_sym "??_R0?AV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
    .addrsig_sym "??_R3?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .addrsig_sym "??_R2?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .addrsig_sym "?_Src@?1???$_Parse_int_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z@4QBDB"
    .addrsig_sym "?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB"
    .addrsig_sym "??_R4?$numpunct@D@std@@6B@"
    .addrsig_sym "??_R0?AV?$numpunct@D@std@@@8"
    .addrsig_sym "??_R3?$numpunct@D@std@@8"
    .addrsig_sym "??_R2?$numpunct@D@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@?$numpunct@D@std@@8"
    .addrsig_sym "?_Src@?1???$_Parse_fp_with_locale@$0A@@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@CA?AU_Num_get_parse_result@2@QEADHAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEBVlocale@2@@Z@4QBDB"
    .addrsig_sym "??_R0?AVfailure@ios_base@std@@@8"
    .addrsig_sym "??_R0?AVsystem_error@std@@@8"
    .addrsig_sym "??_R0?AV_System_error@std@@@8"
    .addrsig_sym "??_R0?AVruntime_error@std@@@8"
    .addrsig_sym "?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4V21@A"
    .addrsig_sym "?$TSS0@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4HA"
    .addrsig_sym "??_R4_Iostream_error_category2@std@@6B@"
    .addrsig_sym "??_R0?AV_Iostream_error_category2@std@@@8"
    .addrsig_sym "??_R3_Iostream_error_category2@std@@8"
    .addrsig_sym "??_R2_Iostream_error_category2@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@_Iostream_error_category2@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@error_category@std@@8"
    .addrsig_sym "??_R0?AVerror_category@std@@@8"
    .addrsig_sym "??_R3error_category@std@@8"
    .addrsig_sym "??_R2error_category@std@@8"
    .addrsig_sym "?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB"
    .addrsig_sym "??_R4failure@ios_base@std@@6B@"
    .addrsig_sym "??_R3failure@ios_base@std@@8"
    .addrsig_sym "??_R2failure@ios_base@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@failure@ios_base@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@system_error@std@@8"
    .addrsig_sym "??_R3system_error@std@@8"
    .addrsig_sym "??_R2system_error@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@_System_error@std@@8"
    .addrsig_sym "??_R3_System_error@std@@8"
    .addrsig_sym "??_R2_System_error@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@runtime_error@std@@8"
    .addrsig_sym "??_R3runtime_error@std@@8"
    .addrsig_sym "??_R2runtime_error@std@@8"
    .addrsig_sym "??_R4system_error@std@@6B@"
    .addrsig_sym "??_R4_System_error@std@@6B@"
    .addrsig_sym "??_R4runtime_error@std@@6B@"
    .addrsig_sym "?piecewise_construct@std@@3Upiecewise_construct_t@1@B"
    .addrsig_sym "?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB"
    .addrsig_sym "??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@"
    .addrsig_sym "??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8"
    .addrsig_sym "??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .addrsig_sym "??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .addrsig_sym "??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8"
    .addrsig_sym "?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA"
.globl	_fltused